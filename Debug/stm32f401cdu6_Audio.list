
stm32f401cdu6_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800ee30  0800ee30  0001ee30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f38c  0800f38c  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  0800f38c  0800f38c  0001f38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f394  0800f394  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f394  0800f394  0001f394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f398  0800f398  0001f398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800f39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d14  20000310  0800f6ac  00020310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005024  0800f6ac  00025024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fabf  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004883  00000000  00000000  0003fdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  00044688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  000462f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc7e  00000000  00000000  00047da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002383f  00000000  00000000  00064a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4641  00000000  00000000  0008825d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c89e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ab4  00000000  00000000  0012c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000310 	.word	0x20000310
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee14 	.word	0x0800ee14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000314 	.word	0x20000314
 80001dc:	0800ee14 	.word	0x0800ee14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	621a      	str	r2, [r3, #32]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d01c      	beq.n	800111a <LL_TIM_OC_DisableFast+0x4a>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d017      	beq.n	8001116 <LL_TIM_OC_DisableFast+0x46>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d012      	beq.n	8001112 <LL_TIM_OC_DisableFast+0x42>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b40      	cmp	r3, #64	; 0x40
 80010f0:	d00d      	beq.n	800110e <LL_TIM_OC_DisableFast+0x3e>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f8:	d007      	beq.n	800110a <LL_TIM_OC_DisableFast+0x3a>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001100:	d101      	bne.n	8001106 <LL_TIM_OC_DisableFast+0x36>
 8001102:	2305      	movs	r3, #5
 8001104:	e00a      	b.n	800111c <LL_TIM_OC_DisableFast+0x4c>
 8001106:	2306      	movs	r3, #6
 8001108:	e008      	b.n	800111c <LL_TIM_OC_DisableFast+0x4c>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <LL_TIM_OC_DisableFast+0x4c>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <LL_TIM_OC_DisableFast+0x4c>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <LL_TIM_OC_DisableFast+0x4c>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <LL_TIM_OC_DisableFast+0x4c>
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3318      	adds	r3, #24
 8001122:	4619      	mov	r1, r3
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LL_TIM_OC_DisableFast+0x84>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	440b      	add	r3, r1
 800112c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4908      	ldr	r1, [pc, #32]	; (8001158 <LL_TIM_OC_DisableFast+0x88>)
 8001136:	5ccb      	ldrb	r3, [r1, r3]
 8001138:	4619      	mov	r1, r3
 800113a:	2304      	movs	r3, #4
 800113c:	408b      	lsls	r3, r1
 800113e:	43db      	mvns	r3, r3
 8001140:	401a      	ands	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	601a      	str	r2, [r3, #0]

}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	0800ef7c 	.word	0x0800ef7c
 8001158:	0800ef84 	.word	0x0800ef84

0800115c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d01c      	beq.n	80011a6 <LL_TIM_OC_EnablePreload+0x4a>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d017      	beq.n	80011a2 <LL_TIM_OC_EnablePreload+0x46>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b10      	cmp	r3, #16
 8001176:	d012      	beq.n	800119e <LL_TIM_OC_EnablePreload+0x42>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b40      	cmp	r3, #64	; 0x40
 800117c:	d00d      	beq.n	800119a <LL_TIM_OC_EnablePreload+0x3e>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001184:	d007      	beq.n	8001196 <LL_TIM_OC_EnablePreload+0x3a>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118c:	d101      	bne.n	8001192 <LL_TIM_OC_EnablePreload+0x36>
 800118e:	2305      	movs	r3, #5
 8001190:	e00a      	b.n	80011a8 <LL_TIM_OC_EnablePreload+0x4c>
 8001192:	2306      	movs	r3, #6
 8001194:	e008      	b.n	80011a8 <LL_TIM_OC_EnablePreload+0x4c>
 8001196:	2304      	movs	r3, #4
 8001198:	e006      	b.n	80011a8 <LL_TIM_OC_EnablePreload+0x4c>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <LL_TIM_OC_EnablePreload+0x4c>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <LL_TIM_OC_EnablePreload+0x4c>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <LL_TIM_OC_EnablePreload+0x4c>
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3318      	adds	r3, #24
 80011ae:	4619      	mov	r1, r3
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LL_TIM_OC_EnablePreload+0x80>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	440b      	add	r3, r1
 80011b8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <LL_TIM_OC_EnablePreload+0x84>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	4619      	mov	r1, r3
 80011c6:	2308      	movs	r3, #8
 80011c8:	408b      	lsls	r3, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	0800ef7c 	.word	0x0800ef7c
 80011e0:	0800ef84 	.word	0x0800ef84

080011e4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	605a      	str	r2, [r3, #4]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60da      	str	r2, [r3, #12]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_TIM_EnableDMAReq_CC2>:
  * @rmtoll DIER         CC2DE         LL_TIM_EnableDMAReq_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2DE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60da      	str	r2, [r3, #12]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	615a      	str	r2, [r3, #20]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_TIM_GenerateEvent_CC1>:
  * @rmtoll EGR          CC1G          LL_TIM_GenerateEvent_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f043 0202 	orr.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	615a      	str	r2, [r3, #20]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40023800 	.word	0x40023800

0800131c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <LL_APB2_GRP1_EnableClock+0x2c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4013      	ands	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800

0800134c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <LL_DMA_EnableStream+0x3c>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <LL_DMA_EnableStream+0x3c>)
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	440a      	add	r2, r1
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	4611      	mov	r1, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	440a      	add	r2, r1
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6013      	str	r3, [r2, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0800ef8c 	.word	0x0800ef8c

0800138c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <LL_DMA_SetDataTransferDirection+0x44>)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80013ac:	4908      	ldr	r1, [pc, #32]	; (80013d0 <LL_DMA_SetDataTransferDirection+0x44>)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	440b      	add	r3, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	440b      	add	r3, r1
 80013ba:	4619      	mov	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	0800ef8c 	.word	0x0800ef8c

080013d4 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <LL_DMA_GetDataTransferDirection+0x2c>)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	0800ef8c 	.word	0x0800ef8c

08001404 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LL_DMA_SetMode+0x44>)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001424:	4908      	ldr	r1, [pc, #32]	; (8001448 <LL_DMA_SetMode+0x44>)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	440b      	add	r3, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	440b      	add	r3, r1
 8001432:	4619      	mov	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	0800ef8c 	.word	0x0800ef8c

0800144c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <LL_DMA_SetPeriphIncMode+0x44>)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800146c:	4908      	ldr	r1, [pc, #32]	; (8001490 <LL_DMA_SetPeriphIncMode+0x44>)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	440b      	add	r3, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	440b      	add	r3, r1
 800147a:	4619      	mov	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	0800ef8c 	.word	0x0800ef8c

08001494 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014b4:	4908      	ldr	r1, [pc, #32]	; (80014d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	440b      	add	r3, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	440b      	add	r3, r1
 80014c2:	4619      	mov	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0800ef8c 	.word	0x0800ef8c

080014dc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LL_DMA_SetPeriphSize+0x44>)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80014fc:	4908      	ldr	r1, [pc, #32]	; (8001520 <LL_DMA_SetPeriphSize+0x44>)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	440b      	add	r3, r1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	440b      	add	r3, r1
 800150a:	4619      	mov	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	0800ef8c 	.word	0x0800ef8c

08001524 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LL_DMA_SetMemorySize+0x44>)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4413      	add	r3, r2
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001544:	4908      	ldr	r1, [pc, #32]	; (8001568 <LL_DMA_SetMemorySize+0x44>)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	440b      	add	r3, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	440b      	add	r3, r1
 8001552:	4619      	mov	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	0800ef8c 	.word	0x0800ef8c

0800156c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800158c:	4908      	ldr	r1, [pc, #32]	; (80015b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	440b      	add	r3, r1
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	440b      	add	r3, r1
 800159a:	4619      	mov	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	0800ef8c 	.word	0x0800ef8c

080015b4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <LL_DMA_SetDataLength+0x44>)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	4908      	ldr	r1, [pc, #32]	; (80015f8 <LL_DMA_SetDataLength+0x44>)
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	440a      	add	r2, r1
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	4611      	mov	r1, r2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	440a      	add	r2, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	0800ef8c 	.word	0x0800ef8c

080015fc <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LL_DMA_SetChannelSelection+0x44>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800161c:	4908      	ldr	r1, [pc, #32]	; (8001640 <LL_DMA_SetChannelSelection+0x44>)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	440b      	add	r3, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	440b      	add	r3, r1
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	0800ef8c 	.word	0x0800ef8c

08001644 <LL_DMA_SetMemoryBurstxfer>:
  *         @arg @ref LL_DMA_MBURST_INC8
  *         @arg @ref LL_DMA_MBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8001664:	4908      	ldr	r1, [pc, #32]	; (8001688 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	440b      	add	r3, r1
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	440b      	add	r3, r1
 8001672:	4619      	mov	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	0800ef8c 	.word	0x0800ef8c

0800168c <LL_DMA_SetPeriphBurstxfer>:
  *         @arg @ref LL_DMA_PBURST_INC8
  *         @arg @ref LL_DMA_PBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Pburst)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LL_DMA_SetPeriphBurstxfer+0x44>)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80016ac:	4908      	ldr	r1, [pc, #32]	; (80016d0 <LL_DMA_SetPeriphBurstxfer+0x44>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	440b      	add	r3, r1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	440b      	add	r3, r1
 80016ba:	4619      	mov	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	0800ef8c 	.word	0x0800ef8c

080016d4 <LL_DMA_EnableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80016de:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <LL_DMA_EnableFifoMode+0x3c>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <LL_DMA_EnableFifoMode+0x3c>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	440a      	add	r2, r1
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	440a      	add	r2, r1
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6153      	str	r3, [r2, #20]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	0800ef8c 	.word	0x0800ef8c

08001714 <LL_DMA_SetFIFOThreshold>:
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Threshold)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LL_DMA_SetFIFOThreshold+0x44>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f023 0203 	bic.w	r2, r3, #3
 8001734:	4908      	ldr	r1, [pc, #32]	; (8001758 <LL_DMA_SetFIFOThreshold+0x44>)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	440b      	add	r3, r1
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	440b      	add	r3, r1
 8001742:	4619      	mov	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	614b      	str	r3, [r1, #20]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	0800ef8c 	.word	0x0800ef8c

0800175c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d114      	bne.n	800179a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <LL_DMA_ConfigAddresses+0x74>)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <LL_DMA_ConfigAddresses+0x74>)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8001798:	e013      	b.n	80017c2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <LL_DMA_ConfigAddresses+0x74>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <LL_DMA_ConfigAddresses+0x74>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	60d3      	str	r3, [r2, #12]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	0800ef8c 	.word	0x0800ef8c

080017d4 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <LL_DMA_EnableIT_HT+0x3c>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <LL_DMA_EnableIT_HT+0x3c>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	440a      	add	r2, r1
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	440a      	add	r2, r1
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	0800ef8c 	.word	0x0800ef8c

08001814 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <LL_DMA_EnableIT_TE+0x3c>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <LL_DMA_EnableIT_TE+0x3c>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	440a      	add	r2, r1
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	440a      	add	r2, r1
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	0800ef8c 	.word	0x0800ef8c

08001854 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <LL_DMA_EnableIT_TC+0x3c>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <LL_DMA_EnableIT_TC+0x3c>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	440a      	add	r2, r1
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	4611      	mov	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	440a      	add	r2, r1
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	0800ef8c 	.word	0x0800ef8c

08001894 <TIM1_TE1>:
uint16_t* VoiceBuff0 = (uint16_t*)&baudio_buffer[0];
uint16_t* VoiceBuff1 = (uint16_t*)&baudio_buffer[N_SIZE];


void TIM1_TE1()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <TIM1_TC2>:
void TIM1_TC2()
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <TIM1_HT2>:
void TIM1_HT2()
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <TIM1_TE2>:
void TIM1_TE2()
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <init_timers>:


void init_timers()
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af02      	add	r7, sp, #8

	  TIM1->ARR = MAX_VOL-1;
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <init_timers+0x100>)
 80018d4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80018da:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018de:	f7ff fd05 	bl	80012ec <LL_AHB1_GRP1_EnableClock>
	  LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_1, (uint32_t)&VoiceBuff0[0], (uint32_t)&TIM1->CCR1, LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_1));
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <init_timers+0x104>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461c      	mov	r4, r3
 80018e8:	2101      	movs	r1, #1
 80018ea:	483a      	ldr	r0, [pc, #232]	; (80019d4 <init_timers+0x108>)
 80018ec:	f7ff fd72 	bl	80013d4 <LL_DMA_GetDataTransferDirection>
 80018f0:	4603      	mov	r3, r0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <init_timers+0x10c>)
 80018f6:	4622      	mov	r2, r4
 80018f8:	2101      	movs	r1, #1
 80018fa:	4836      	ldr	r0, [pc, #216]	; (80019d4 <init_timers+0x108>)
 80018fc:	f7ff ff2e 	bl	800175c <LL_DMA_ConfigAddresses>
	  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, N_SIZE);
 8001900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001904:	2101      	movs	r1, #1
 8001906:	4833      	ldr	r0, [pc, #204]	; (80019d4 <init_timers+0x108>)
 8001908:	f7ff fe54 	bl	80015b4 <LL_DMA_SetDataLength>
	  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 800190c:	2101      	movs	r1, #1
 800190e:	4831      	ldr	r0, [pc, #196]	; (80019d4 <init_timers+0x108>)
 8001910:	f7ff ffa0 	bl	8001854 <LL_DMA_EnableIT_TC>
	  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_1);
 8001914:	2101      	movs	r1, #1
 8001916:	482f      	ldr	r0, [pc, #188]	; (80019d4 <init_timers+0x108>)
 8001918:	f7ff ff7c 	bl	8001814 <LL_DMA_EnableIT_TE>
	  LL_DMA_EnableIT_HT(DMA2, LL_DMA_STREAM_1);
 800191c:	2101      	movs	r1, #1
 800191e:	482d      	ldr	r0, [pc, #180]	; (80019d4 <init_timers+0x108>)
 8001920:	f7ff ff58 	bl	80017d4 <LL_DMA_EnableIT_HT>

	  LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_2, (uint32_t)&VoiceBuff1[0], (uint32_t)&TIM1->CCR2, LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_2));
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <init_timers+0x110>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461c      	mov	r4, r3
 800192a:	2102      	movs	r1, #2
 800192c:	4829      	ldr	r0, [pc, #164]	; (80019d4 <init_timers+0x108>)
 800192e:	f7ff fd51 	bl	80013d4 <LL_DMA_GetDataTransferDirection>
 8001932:	4603      	mov	r3, r0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <init_timers+0x114>)
 8001938:	4622      	mov	r2, r4
 800193a:	2102      	movs	r1, #2
 800193c:	4825      	ldr	r0, [pc, #148]	; (80019d4 <init_timers+0x108>)
 800193e:	f7ff ff0d 	bl	800175c <LL_DMA_ConfigAddresses>
	  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, N_SIZE);
 8001942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001946:	2102      	movs	r1, #2
 8001948:	4822      	ldr	r0, [pc, #136]	; (80019d4 <init_timers+0x108>)
 800194a:	f7ff fe33 	bl	80015b4 <LL_DMA_SetDataLength>
	  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_2);
 800194e:	2102      	movs	r1, #2
 8001950:	4820      	ldr	r0, [pc, #128]	; (80019d4 <init_timers+0x108>)
 8001952:	f7ff ff7f 	bl	8001854 <LL_DMA_EnableIT_TC>
	  LL_DMA_EnableIT_HT(DMA2, LL_DMA_STREAM_2);
 8001956:	2102      	movs	r1, #2
 8001958:	481e      	ldr	r0, [pc, #120]	; (80019d4 <init_timers+0x108>)
 800195a:	f7ff ff3b 	bl	80017d4 <LL_DMA_EnableIT_HT>
	  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_2);
 800195e:	2102      	movs	r1, #2
 8001960:	481c      	ldr	r0, [pc, #112]	; (80019d4 <init_timers+0x108>)
 8001962:	f7ff ff57 	bl	8001814 <LL_DMA_EnableIT_TE>


	  /***************************/
	  /* Enable the DMA transfer */
	  /***************************/
	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8001966:	2101      	movs	r1, #1
 8001968:	481a      	ldr	r0, [pc, #104]	; (80019d4 <init_timers+0x108>)
 800196a:	f7ff fcef 	bl	800134c <LL_DMA_EnableStream>
	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800196e:	2102      	movs	r1, #2
 8001970:	4818      	ldr	r0, [pc, #96]	; (80019d4 <init_timers+0x108>)
 8001972:	f7ff fceb 	bl	800134c <LL_DMA_EnableStream>

	  LL_TIM_EnableDMAReq_CC1(TIM1);
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <init_timers+0x100>)
 8001978:	f7ff fc77 	bl	800126a <LL_TIM_EnableDMAReq_CC1>
	  LL_TIM_EnableDMAReq_CC2(TIM1);
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <init_timers+0x100>)
 800197e:	f7ff fc84 	bl	800128a <LL_TIM_EnableDMAReq_CC2>

	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001982:	2101      	movs	r1, #1
 8001984:	4811      	ldr	r0, [pc, #68]	; (80019cc <init_timers+0x100>)
 8001986:	f7ff fb92 	bl	80010ae <LL_TIM_CC_EnableChannel>
	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 800198a:	2110      	movs	r1, #16
 800198c:	480f      	ldr	r0, [pc, #60]	; (80019cc <init_timers+0x100>)
 800198e:	f7ff fb8e 	bl	80010ae <LL_TIM_CC_EnableChannel>



	  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001992:	2101      	movs	r1, #1
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <init_timers+0x100>)
 8001996:	f7ff fbe1 	bl	800115c <LL_TIM_OC_EnablePreload>
	  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800199a:	2110      	movs	r1, #16
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <init_timers+0x100>)
 800199e:	f7ff fbdd 	bl	800115c <LL_TIM_OC_EnablePreload>

	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 80019a2:	2104      	movs	r1, #4
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <init_timers+0x100>)
 80019a6:	f7ff fb82 	bl	80010ae <LL_TIM_CC_EnableChannel>
	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <init_timers+0x100>)
 80019ae:	f7ff fb7e 	bl	80010ae <LL_TIM_CC_EnableChannel>
	  res = LL_TIM_OC_GetPolarity(TIM1, LL_TIM_CHANNEL_CH1N);
	  printf("OC_GetPolarity %d\n",res);
#endif


	  LL_TIM_EnableCounter(TIM1);
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <init_timers+0x100>)
 80019b4:	f7ff fb5b 	bl	800106e <LL_TIM_EnableCounter>

	  LL_TIM_GenerateEvent_UPDATE(TIM1);
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <init_timers+0x100>)
 80019ba:	f7ff fc76 	bl	80012aa <LL_TIM_GenerateEvent_UPDATE>
	  LL_TIM_GenerateEvent_CC1(TIM1);
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <init_timers+0x100>)
 80019c0:	f7ff fc83 	bl	80012ca <LL_TIM_GenerateEvent_CC1>
	  

}
 80019c4:	bf00      	nop
 80019c6:	3704      	adds	r7, #4
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40010000 	.word	0x40010000
 80019d0:	20000000 	.word	0x20000000
 80019d4:	40026400 	.word	0x40026400
 80019d8:	40010034 	.word	0x40010034
 80019dc:	20000004 	.word	0x20000004
 80019e0:	40010038 	.word	0x40010038

080019e4 <retarget_put_char>:
//	LL_TIM_GenerateEvent_CC1(TIM3);
//}

uint32_t AUDIO_PeriodicTC_FS_Counter;
void retarget_put_char(char p)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &p, 1, 0xffffff); // send message via UART
 80019ee:	1df9      	adds	r1, r7, #7
 80019f0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80019f4:	2201      	movs	r2, #1
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <retarget_put_char+0x20>)
 80019f8:	f005 fcc3 	bl	8007382 <HAL_UART_Transmit>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000091c 	.word	0x2000091c

08001a08 <_write>:
int _write(int fd, char* ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
    (void)fd;
    int i = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
    while (ptr[i] && (i < len))
 8001a18:	e018      	b.n	8001a4c <_write+0x44>
    {
    	if (ptr[i] == '\r')
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b0d      	cmp	r3, #13
 8001a24:	d00f      	beq.n	8001a46 <_write+0x3e>
    	{

    	}
    	else
    	{
			retarget_put_char((int)ptr[i]);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ffd8 	bl	80019e4 <retarget_put_char>
			if (ptr[i] == '\n')
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b0a      	cmp	r3, #10
 8001a3e:	d102      	bne.n	8001a46 <_write+0x3e>
			{
				retarget_put_char((int)'\r');
 8001a40:	200d      	movs	r0, #13
 8001a42:	f7ff ffcf 	bl	80019e4 <retarget_put_char>
			}
    	}
        i++;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
    while (ptr[i] && (i < len))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <_write+0x58>
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbdc      	blt.n	8001a1a <_write+0x12>
    }
    return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	0000      	movs	r0, r0
 8001a6c:	0000      	movs	r0, r0
	...

08001a70 <getNextSampleLR>:
volatile int UsbSamplesAvail = 0;
int zeroSamplePosition=0;
int lastZeroSamplePosition=0;

struct LR getNextSampleLR()
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	struct LR res ;
	res.L = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	813b      	strh	r3, [r7, #8]
	res.R = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	817b      	strh	r3, [r7, #10]
	//res.freq = 0;
	//if(usb_SndBuffer)
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2120      	movs	r1, #32
 8001a84:	486e      	ldr	r0, [pc, #440]	; (8001c40 <getNextSampleLR+0x1d0>)
 8001a86:	f002 fa4b 	bl	8003f20 <HAL_GPIO_WritePin>

	if(UsbSamplesAvail)
 8001a8a:	4b6e      	ldr	r3, [pc, #440]	; (8001c44 <getNextSampleLR+0x1d4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80c5 	beq.w	8001c1e <getNextSampleLR+0x1ae>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2120      	movs	r1, #32
 8001a98:	4869      	ldr	r0, [pc, #420]	; (8001c40 <getNextSampleLR+0x1d0>)
 8001a9a:	f002 fa41 	bl	8003f20 <HAL_GPIO_WritePin>
		readPositionXScaled += readSpeedXScaled;
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <getNextSampleLR+0x1d8>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <getNextSampleLR+0x1dc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a67      	ldr	r2, [pc, #412]	; (8001c48 <getNextSampleLR+0x1d8>)
 8001aaa:	6013      	str	r3, [r2, #0]
		if(readPositionXScaled >= samplesInBuffScaled)
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <getNextSampleLR+0x1d8>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <getNextSampleLR+0x1e0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d306      	bcc.n	8001ac6 <getNextSampleLR+0x56>
		{
			readPositionXScaled -= samplesInBuffScaled;
 8001ab8:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <getNextSampleLR+0x1d8>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <getNextSampleLR+0x1e0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a61      	ldr	r2, [pc, #388]	; (8001c48 <getNextSampleLR+0x1d8>)
 8001ac4:	6013      	str	r3, [r2, #0]
		}

		uint32_t readPositionIntC = readPositionXScaled>>TIME_BIT_SCALE_FACT;
 8001ac6:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <getNextSampleLR+0x1d8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
		//uint32_t readPositionIntN = readPositionIntC+1;

		int16_t L  = usb_SndBuffer[readPositionIntC*2+0];//+usb_SndBuffer[readPositionIntN*2+0];
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <getNextSampleLR+0x1e4>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	857b      	strh	r3, [r7, #42]	; 0x2a
		int16_t R  = usb_SndBuffer[readPositionIntC*2+1];//+usb_SndBuffer[readPositionIntN*2+1];
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <getNextSampleLR+0x1e4>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	853b      	strh	r3, [r7, #40]	; 0x28

		// zero cross
		int16_t L_previous  = usb_SndBuffer[readPositionIntC*2+2];
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <getNextSampleLR+0x1e4>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af2:	3301      	adds	r3, #1
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(L<0 && L_previous>0 && L!=0 && L!=-1 && L_previous!=0 && L_previous!=-1)
 8001afc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da1a      	bge.n	8001b3a <getNextSampleLR+0xca>
 8001b04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	dd16      	ble.n	8001b3a <getNextSampleLR+0xca>
 8001b0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d012      	beq.n	8001b3a <getNextSampleLR+0xca>
 8001b14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d00d      	beq.n	8001b3a <getNextSampleLR+0xca>
 8001b1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <getNextSampleLR+0xca>
 8001b26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d004      	beq.n	8001b3a <getNextSampleLR+0xca>
		{
			zeroSamplePosition=readPositionIntC*2;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <getNextSampleLR+0x1e8>)
 8001b38:	601a      	str	r2, [r3, #0]
		}

		int samplesCount = (zeroSamplePosition-lastZeroSamplePosition)/2;
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <getNextSampleLR+0x1e8>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <getNextSampleLR+0x1ec>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	0fda      	lsrs	r2, r3, #31
 8001b46:	4413      	add	r3, r2
 8001b48:	105b      	asrs	r3, r3, #1
 8001b4a:	623b      	str	r3, [r7, #32]

		if(samplesCount>15 && samplesCount<480)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	dd4f      	ble.n	8001bf2 <getNextSampleLR+0x182>
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b58:	da4b      	bge.n	8001bf2 <getNextSampleLR+0x182>
		{
			int16_t LastSample = usb_SndBuffer[lastZeroSamplePosition+0];
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <getNextSampleLR+0x1e4>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <getNextSampleLR+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	83fb      	strh	r3, [r7, #30]
			int16_t nextToLastSample = usb_SndBuffer[lastZeroSamplePosition+2];
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <getNextSampleLR+0x1e4>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <getNextSampleLR+0x1ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3302      	adds	r3, #2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	83bb      	strh	r3, [r7, #28]

			//linear interpolation
			int32_t startOffset = -(nextToLastSample*20833)/(LastSample-nextToLastSample);
 8001b7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b80:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <getNextSampleLR+0x1f0>)
 8001b82:	fb03 f202 	mul.w	r2, r3, r2
 8001b86:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8001b8a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b8e:	1acb      	subs	r3, r1, r3
 8001b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b94:	61bb      	str	r3, [r7, #24]
			int32_t endOffset = -(L*20833)/(L_previous-L);
 8001b96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b9a:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <getNextSampleLR+0x1f0>)
 8001b9c:	fb03 f202 	mul.w	r2, r3, r2
 8001ba0:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8001ba4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ba8:	1acb      	subs	r3, r1, r3
 8001baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
			int32_t period= startOffset + (samplesCount-1) * 20833 + endOffset;
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f245 1261 	movw	r2, #20833	; 0x5161
 8001bb8:	fb03 f202 	mul.w	r2, r3, r2
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]

			frequency=100000000000/period;
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	17da      	asrs	r2, r3, #31
 8001bca:	461c      	mov	r4, r3
 8001bcc:	4615      	mov	r5, r2
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	a119      	add	r1, pc, #100	; (adr r1, 8001c38 <getNextSampleLR+0x1c8>)
 8001bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bd8:	f7fe ffee 	bl	8000bb8 <__aeabi_ldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <getNextSampleLR+0x1f4>)
 8001be2:	601a      	str	r2, [r3, #0]
				j++;
			}

			j=0;
			*/
			lastZeroSamplePosition=0;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <getNextSampleLR+0x1ec>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
			zeroSamplePosition=0;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <getNextSampleLR+0x1e8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
		{
 8001bf0:	e003      	b.n	8001bfa <getNextSampleLR+0x18a>
		}
		else
		{
			lastZeroSamplePosition=zeroSamplePosition;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <getNextSampleLR+0x1e8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <getNextSampleLR+0x1ec>)
 8001bf8:	6013      	str	r3, [r2, #0]
		}

		if (L==0 && L_previous==0)
 8001bfa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <getNextSampleLR+0x1a0>
 8001c02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <getNextSampleLR+0x1a0>
		{
			res.freq = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	e002      	b.n	8001c16 <getNextSampleLR+0x1a6>
		}
		else
		{
			res.freq = frequency;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <getNextSampleLR+0x1f4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
		}

		res.L = L;
 8001c16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c18:	813b      	strh	r3, [r7, #8]
		res.R = R;
 8001c1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c1c:	817b      	strh	r3, [r7, #10]
	}

    return res;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c2a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	3730      	adds	r7, #48	; 0x30
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bdb0      	pop	{r4, r5, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	4876e800 	.word	0x4876e800
 8001c3c:	00000017 	.word	0x00000017
 8001c40:	40020000 	.word	0x40020000
 8001c44:	20000984 	.word	0x20000984
 8001c48:	20000980 	.word	0x20000980
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	2000097c 	.word	0x2000097c
 8001c54:	20000978 	.word	0x20000978
 8001c58:	20000988 	.word	0x20000988
 8001c5c:	2000098c 	.word	0x2000098c
 8001c60:	ffffae9f 	.word	0xffffae9f
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <AUDIO_Init>:
void  AUDIO_Init(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	printf("AUDIO_Init %d %d %d\n",AudioFreq,Volume,options);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <AUDIO_Init+0x20>)
 8001c7c:	f00a ff90 	bl	800cba0 <iprintf>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	0800ee30 	.word	0x0800ee30

08001c8c <AUDIO_OUT_Start>:

void AUDIO_OUT_Start(uint16_t* pBuffer, uint32_t Size)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	printf("AUDIO_OUT_Start %p Size = %d\n",pBuffer,Size);
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <AUDIO_OUT_Start+0x54>)
 8001c9c:	f00a ff80 	bl	800cba0 <iprintf>
	samplesInBuff = Size/4; //(L & R channels short)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <AUDIO_OUT_Start+0x58>)
 8001ca6:	6013      	str	r3, [r2, #0]
	samplesInBuffH = samplesInBuff/2;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <AUDIO_OUT_Start+0x58>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <AUDIO_OUT_Start+0x5c>)
 8001cb2:	601a      	str	r2, [r3, #0]

	usb_SndBuffer = pBuffer;
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <AUDIO_OUT_Start+0x60>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
	AUDIO_OUT_Play_Counter++;
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <AUDIO_OUT_Start+0x64>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <AUDIO_OUT_Start+0x64>)
 8001cc2:	6013      	str	r3, [r2, #0]

	samplesInBuffScaled = samplesInBuff<<TIME_BIT_SCALE_FACT;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <AUDIO_OUT_Start+0x58>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	049b      	lsls	r3, r3, #18
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <AUDIO_OUT_Start+0x68>)
 8001ccc:	6013      	str	r3, [r2, #0]
	readPositionXScaled = samplesInBuffScaled/2;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <AUDIO_OUT_Start+0x68>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <AUDIO_OUT_Start+0x6c>)
 8001cd6:	6013      	str	r3, [r2, #0]

}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	0800ee48 	.word	0x0800ee48
 8001ce4:	20000970 	.word	0x20000970
 8001ce8:	20000974 	.word	0x20000974
 8001cec:	20000978 	.word	0x20000978
 8001cf0:	20000964 	.word	0x20000964
 8001cf4:	2000097c 	.word	0x2000097c
 8001cf8:	20000980 	.word	0x20000980

08001cfc <median3>:
float inputSpeed = 0;

int prevPos = -1 ;

int  median3(int  a, int  b, int  c)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
   return (b<a)
              ?   (b<c)  ?  (c<a) ? c : a  :  b
              :   (a<c)  ?  (c<b) ? c : b  :  a;
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	da0b      	bge.n	8001d28 <median3+0x2c>
              ?   (b<c)  ?  (c<a) ? c : a  :  b
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	da05      	bge.n	8001d24 <median3+0x28>
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bfa8      	it	ge
 8001d20:	4613      	movge	r3, r2
              :   (a<c)  ?  (c<b) ? c : b  :  a;
 8001d22:	e00c      	b.n	8001d3e <median3+0x42>
              ?   (b<c)  ?  (c<a) ? c : a  :  b
 8001d24:	68bb      	ldr	r3, [r7, #8]
              :   (a<c)  ?  (c<b) ? c : b  :  a;
 8001d26:	e00a      	b.n	8001d3e <median3+0x42>
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	da05      	bge.n	8001d3c <median3+0x40>
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	bfa8      	it	ge
 8001d38:	4613      	movge	r3, r2
 8001d3a:	e000      	b.n	8001d3e <median3+0x42>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <AUDIO_OUT_Periodic>:
int pnt_timeForRecivedSamples_mean = 0;
int appDistErr = 0;


void AUDIO_OUT_Periodic(uint16_t* pBuffer, uint32_t Size)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	AUDIO_PeriodicTC_FS_Counter++;
 8001d56:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <AUDIO_OUT_Periodic+0x220>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a83      	ldr	r2, [pc, #524]	; (8001f6c <AUDIO_OUT_Periodic+0x220>)
 8001d5e:	6013      	str	r3, [r2, #0]
	if(!usb_SndBuffer) return ;
 8001d60:	4b83      	ldr	r3, [pc, #524]	; (8001f70 <AUDIO_OUT_Periodic+0x224>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80fd 	beq.w	8001f64 <AUDIO_OUT_Periodic+0x218>
	int cPos  = (pBuffer - (uint16_t*)usb_SndBuffer)/2;
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <AUDIO_OUT_Periodic+0x224>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	105b      	asrs	r3, r3, #1
 8001d74:	0fda      	lsrs	r2, r3, #31
 8001d76:	4413      	add	r3, r2
 8001d78:	105b      	asrs	r3, r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t lastAudioUsbTimeStampNew = TIM3->CNT;
 8001d7c:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <AUDIO_OUT_Periodic+0x228>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	847b      	strh	r3, [r7, #34]	; 0x22
	if(cPos==0)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d117      	bne.n	8001db8 <AUDIO_OUT_Periodic+0x6c>
	{
		uint16_t timeForRecivedSamples = lastAudioUsbTimeStampNew - lastAudioUsbTimeStamp;
 8001d88:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <AUDIO_OUT_Periodic+0x22c>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	843b      	strh	r3, [r7, #32]

		timeForRecivedSamples_mean [pnt_timeForRecivedSamples_mean++] = timeForRecivedSamples;
 8001d92:	4b7a      	ldr	r3, [pc, #488]	; (8001f7c <AUDIO_OUT_Periodic+0x230>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	4978      	ldr	r1, [pc, #480]	; (8001f7c <AUDIO_OUT_Periodic+0x230>)
 8001d9a:	600a      	str	r2, [r1, #0]
 8001d9c:	8c3a      	ldrh	r2, [r7, #32]
 8001d9e:	4978      	ldr	r1, [pc, #480]	; (8001f80 <AUDIO_OUT_Periodic+0x234>)
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(pnt_timeForRecivedSamples_mean>2)pnt_timeForRecivedSamples_mean = 0;
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <AUDIO_OUT_Periodic+0x230>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	dd02      	ble.n	8001db2 <AUDIO_OUT_Periodic+0x66>
 8001dac:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <AUDIO_OUT_Periodic+0x230>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]


        lastAudioUsbTimeStamp = lastAudioUsbTimeStampNew;
 8001db2:	4a71      	ldr	r2, [pc, #452]	; (8001f78 <AUDIO_OUT_Periodic+0x22c>)
 8001db4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001db6:	8013      	strh	r3, [r2, #0]

	}

	if(cPos==0)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 80d3 	bne.w	8001f66 <AUDIO_OUT_Periodic+0x21a>
	{

		//


		int  timeForRecivedSamples = median3(timeForRecivedSamples_mean[0],timeForRecivedSamples_mean[1],timeForRecivedSamples_mean[2]);
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <AUDIO_OUT_Periodic+0x234>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <AUDIO_OUT_Periodic+0x234>)
 8001dc6:	6851      	ldr	r1, [r2, #4]
 8001dc8:	4a6d      	ldr	r2, [pc, #436]	; (8001f80 <AUDIO_OUT_Periodic+0x234>)
 8001dca:	6892      	ldr	r2, [r2, #8]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff95 	bl	8001cfc <median3>
 8001dd2:	61f8      	str	r0, [r7, #28]
		//(TIMER_CLOCK_FREQ*(float)outDmaSpeedScaled)/TIME_SCALE_FACT;
		if(timeForRecivedSamples)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d013      	beq.n	8001e02 <AUDIO_OUT_Periodic+0xb6>
			inputSpeed = samplesInBuff*TIMER_CLOCK_FREQ/timeForRecivedSamples;
 8001dda:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <AUDIO_OUT_Periodic+0x238>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001f88 <AUDIO_OUT_Periodic+0x23c>
 8001dea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfc:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <AUDIO_OUT_Periodic+0x240>)
 8001dfe:	edc3 7a00 	vstr	s15, [r3]


		//sForcedSpeed = (int)(samplesInBuff*TIME_SCALE_FACT*mean/(timeForRecivedSamples*N_SIZE);

		uint16_t timeFromLastDMA = lastAudioUsbTimeStampNew - lastDmaAccessTime;
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <AUDIO_OUT_Periodic+0x244>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	837b      	strh	r3, [r7, #26]


		//where i am ?

		int approximateSamplesOutedFromLastDMA  = ((float)timeFromLastDMA/TIMER_CLOCK_FREQ)*inputSpeed;
 8001e0c:	8b7b      	ldrh	r3, [r7, #26]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e16:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001f88 <AUDIO_OUT_Periodic+0x23c>
 8001e1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <AUDIO_OUT_Periodic+0x240>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2c:	ee17 3a90 	vmov	r3, s15
 8001e30:	617b      	str	r3, [r7, #20]



		int appDistance  =  (int)(lastDmaPos + approximateSamplesOutedFromLastDMA )-cPos;
 8001e32:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <AUDIO_OUT_Periodic+0x248>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	441a      	add	r2, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(appDistance    < 0 ) appDistance += samplesInBuff;
 8001e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da04      	bge.n	8001e50 <AUDIO_OUT_Periodic+0x104>
 8001e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <AUDIO_OUT_Periodic+0x238>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		//while(appDistance > samplesInBuff)  appDistance -= samplesInBuff;
		int err = appDistance - samplesInBuffH;
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <AUDIO_OUT_Periodic+0x24c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	613b      	str	r3, [r7, #16]


        if(UsbSamplesAvail)
 8001e5a:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <AUDIO_OUT_Periodic+0x250>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06e      	beq.n	8001f40 <AUDIO_OUT_Periodic+0x1f4>
		{
        	if(timeForRecivedSamples)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d070      	beq.n	8001f4a <AUDIO_OUT_Periodic+0x1fe>
        	{
				int dC = appDistance - prevPos;
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <AUDIO_OUT_Periodic+0x254>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
				while(dC>samplesInBuffH)  dC-=samplesInBuff;
 8001e72:	e004      	b.n	8001e7e <AUDIO_OUT_Periodic+0x132>
 8001e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <AUDIO_OUT_Periodic+0x238>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <AUDIO_OUT_Periodic+0x24c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dcf5      	bgt.n	8001e74 <AUDIO_OUT_Periodic+0x128>
				while(dC<-samplesInBuffH) dC+=samplesInBuff;
 8001e88:	e004      	b.n	8001e94 <AUDIO_OUT_Periodic+0x148>
 8001e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <AUDIO_OUT_Periodic+0x238>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <AUDIO_OUT_Periodic+0x24c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	425b      	negs	r3, r3
 8001e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf4      	blt.n	8001e8a <AUDIO_OUT_Periodic+0x13e>
				appDistErr = err;
 8001ea0:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <AUDIO_OUT_Periodic+0x258>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]
				if(err > samplesInBuffH/2 || err <-samplesInBuffH/2 ) //seems completely lost sync , force set frequency
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <AUDIO_OUT_Periodic+0x24c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0fda      	lsrs	r2, r3, #31
 8001eac:	4413      	add	r3, r2
 8001eae:	105b      	asrs	r3, r3, #1
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	dc09      	bgt.n	8001ecc <AUDIO_OUT_Periodic+0x180>
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <AUDIO_OUT_Periodic+0x24c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	0fda      	lsrs	r2, r3, #31
 8001ec0:	4413      	add	r3, r2
 8001ec2:	105b      	asrs	r3, r3, #1
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	da2b      	bge.n	8001f24 <AUDIO_OUT_Periodic+0x1d8>
				{
					float outSpeed = (TIMER_CLOCK_FREQ*(float)outDmaSpeedScaled)/TIME_SCALE_FACT;
 8001ecc:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <AUDIO_OUT_Periodic+0x25c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001f88 <AUDIO_OUT_Periodic+0x23c>
 8001edc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001fac <AUDIO_OUT_Periodic+0x260>
 8001ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee8:	edc7 7a03 	vstr	s15, [r7, #12]
					sForcedSpeed = (int)(inputSpeed*TIME_SCALE_FACT/outSpeed);
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <AUDIO_OUT_Periodic+0x240>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001fac <AUDIO_OUT_Periodic+0x260>
 8001ef6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001efa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <AUDIO_OUT_Periodic+0x264>)
 8001f0c:	601a      	str	r2, [r3, #0]
					readSpeedXScaled = sForcedSpeed;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <AUDIO_OUT_Periodic+0x264>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <AUDIO_OUT_Periodic+0x268>)
 8001f16:	601a      	str	r2, [r3, #0]
					readPositionXScaled = samplesInBuffScaled/2;
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <AUDIO_OUT_Periodic+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <AUDIO_OUT_Periodic+0x270>)
 8001f20:	6013      	str	r3, [r2, #0]
				{
 8001f22:	e012      	b.n	8001f4a <AUDIO_OUT_Periodic+0x1fe>
				}
				else
				{
					//ok - only phase tune
					readSpeedXScaled -= dC + err/256;// + 8*err/samplesInBuff ;//- ((err>0)?1:(err<0)?-1:0);
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <AUDIO_OUT_Periodic+0x268>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da00      	bge.n	8001f30 <AUDIO_OUT_Periodic+0x1e4>
 8001f2e:	33ff      	adds	r3, #255	; 0xff
 8001f30:	121b      	asrs	r3, r3, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	440b      	add	r3, r1
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <AUDIO_OUT_Periodic+0x268>)
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e004      	b.n	8001f4a <AUDIO_OUT_Periodic+0x1fe>
				}
        	}
		}
        else
        {
        	readPositionXScaled = samplesInBuffScaled/2;
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <AUDIO_OUT_Periodic+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <AUDIO_OUT_Periodic+0x270>)
 8001f48:	6013      	str	r3, [r2, #0]
        }
		prevPos =  appDistance;
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <AUDIO_OUT_Periodic+0x254>)
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	6013      	str	r3, [r2, #0]
		UsbSamplesAvail = samplesInBuff*((int)((float)FREQ/USBD_AUDIO_FREQ+0.5f))*2;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <AUDIO_OUT_Periodic+0x238>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <AUDIO_OUT_Periodic+0x250>)
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e000      	b.n	8001f66 <AUDIO_OUT_Periodic+0x21a>
	if(!usb_SndBuffer) return ;
 8001f64:	bf00      	nop
	}

}
 8001f66:	3730      	adds	r7, #48	; 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000960 	.word	0x20000960
 8001f70:	20000978 	.word	0x20000978
 8001f74:	40000400 	.word	0x40000400
 8001f78:	200009a0 	.word	0x200009a0
 8001f7c:	200009b4 	.word	0x200009b4
 8001f80:	200009a8 	.word	0x200009a8
 8001f84:	20000970 	.word	0x20000970
 8001f88:	48c35000 	.word	0x48c35000
 8001f8c:	200009a4 	.word	0x200009a4
 8001f90:	20000990 	.word	0x20000990
 8001f94:	20000994 	.word	0x20000994
 8001f98:	20000974 	.word	0x20000974
 8001f9c:	20000984 	.word	0x20000984
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	200009b8 	.word	0x200009b8
 8001fa8:	20000998 	.word	0x20000998
 8001fac:	48800000 	.word	0x48800000
 8001fb0:	2000099c 	.word	0x2000099c
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	2000097c 	.word	0x2000097c
 8001fbc:	20000980 	.word	0x20000980

08001fc0 <cleanAudioBuffer>:
		AUDIO_OUT_ChangeBuffer_Counter++;
		//fl = 1;
		//HAL_I2S_Transmit_DMA(&hi2s2, pBuffer,Size);
}
void cleanAudioBuffer()
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
	{
		VoiceBuff0[k] = MAX_VOL/2;
		VoiceBuff1[k] = MAX_VOL/2;
	}
#else
	for(int k=0;k<N_SIZE;k++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e010      	b.n	8001fee <cleanAudioBuffer+0x2e>
	{
		VoiceBuff0[k] = 0;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <cleanAudioBuffer+0x44>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
		VoiceBuff1[k] = 0;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <cleanAudioBuffer+0x48>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	801a      	strh	r2, [r3, #0]
	for(int k=0;k<N_SIZE;k++)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	ddeb      	ble.n	8001fcc <cleanAudioBuffer+0xc>
	}
#endif
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <checkTime>:
struct sigmaDeltaStorage2_SCALED static_R_channel2_SCALED;

int tfl_mean[3];
int pnt_mean = 0;
void checkTime()
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	uint16_t prevTime;
	uint16_t  tfl;
	prevTime = lastDmaAccessTime;
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <checkTime+0x84>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	807b      	strh	r3, [r7, #2]
	lastDmaAccessTime = TIM3->CNT;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <checkTime+0x88>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	b29a      	uxth	r2, r3
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <checkTime+0x84>)
 8002020:	801a      	strh	r2, [r3, #0]
	//lastDmaPos  = readPositionXScaled>>TIME_BIT_SCALE_FACT;
	//tfl = lastDmaAccessTime -prevTime;
	//outDmaSpeedScaled =  TIME_SCALE_FACT*N_SIZE/(tfl);

	lastDmaPos  = readPositionXScaled>>TIME_BIT_SCALE_FACT;
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <checkTime+0x8c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	461a      	mov	r2, r3
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <checkTime+0x90>)
 800202c:	601a      	str	r2, [r3, #0]
	tfl      = lastDmaAccessTime -prevTime;
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <checkTime+0x84>)
 8002030:	881a      	ldrh	r2, [r3, #0]
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	803b      	strh	r3, [r7, #0]

	tfl_mean[pnt_mean] = tfl;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <checkTime+0x94>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	883a      	ldrh	r2, [r7, #0]
 800203e:	4919      	ldr	r1, [pc, #100]	; (80020a4 <checkTime+0x98>)
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pnt_mean++;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <checkTime+0x94>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <checkTime+0x94>)
 800204c:	6013      	str	r3, [r2, #0]
	if(pnt_mean>2) pnt_mean =0;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <checkTime+0x94>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b02      	cmp	r3, #2
 8002054:	dd02      	ble.n	800205c <checkTime+0x50>
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <checkTime+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

    int mean = median3(tfl_mean[0],tfl_mean[1],tfl_mean[2]);
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <checkTime+0x98>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <checkTime+0x98>)
 8002062:	6851      	ldr	r1, [r2, #4]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <checkTime+0x98>)
 8002066:	6892      	ldr	r2, [r2, #8]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fe47 	bl	8001cfc <median3>
 800206e:	6078      	str	r0, [r7, #4]
    if (!mean) mean = 1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <checkTime+0x6e>
 8002076:	2301      	movs	r3, #1
 8002078:	607b      	str	r3, [r7, #4]

#ifdef USE_SPDIF
	outDmaSpeedScaled =  TIME_SCALE_FACT*N_SIZE/4*DBL_SAMPL/(mean);
#else
	outDmaSpeedScaled =  TIME_SCALE_FACT*N_SIZE*DBL_SAMPL/(mean);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <checkTime+0x9c>)
 8002086:	6013      	str	r3, [r2, #0]
#endif
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000990 	.word	0x20000990
 8002094:	40000400 	.word	0x40000400
 8002098:	20000980 	.word	0x20000980
 800209c:	20000994 	.word	0x20000994
 80020a0:	200009c8 	.word	0x200009c8
 80020a4:	200009bc 	.word	0x200009bc
 80020a8:	20000998 	.word	0x20000998

080020ac <readDataTim>:
void readDataTim(int offset)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	}
#endif
#endif
#else //integer sigma
#if (ORDER==1)
	VoiceBuff0[0] = 0;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <readDataTim+0x2c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	801a      	strh	r2, [r3, #0]
	VoiceBuff1[0] = 0;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <readDataTim+0x30>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	801a      	strh	r2, [r3, #0]
	struct LR tt =getNextSampleLR(/*k+ASBUF_SIZE/4*/);
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fcd1 	bl	8001a70 <getNextSampleLR>
		VoiceBuff0[k+offset] =sigma_delta2_SCALED(&static_L_channel2_SCALED,(MAX_VOL*(tt.L+(1<<USB_DATA_BITS_H)))>>(USB_DATA_BITS-SIGMA_BITS));
		VoiceBuff1[k+offset] =sigma_delta2_SCALED(&static_R_channel2_SCALED,(MAX_VOL*(tt.R+(1<<USB_DATA_BITS_H)))>>(USB_DATA_BITS-SIGMA_BITS));
	}
#endif
#endif
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <TIM1_TC1>:
void TIM1_TC1()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0

    checkTime();
 80020e4:	f7ff ff92 	bl	800200c <checkTime>
    else
    {
    	UsbSamplesAvail = 0;
    }
    */
	TransferComplete_CallBack_FS_Counter++;
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <TIM1_TC1+0x1c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a03      	ldr	r2, [pc, #12]	; (80020fc <TIM1_TC1+0x1c>)
 80020f0:	6013      	str	r3, [r2, #0]
	readDataTim(N_SIZE/2);
 80020f2:	2080      	movs	r0, #128	; 0x80
 80020f4:	f7ff ffda 	bl	80020ac <readDataTim>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000968 	.word	0x20000968

08002100 <TIM1_HT1>:
void TIM1_HT1()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	HalfTransfer_CallBack_FS_Counter++;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <TIM1_HT1+0x34>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <TIM1_HT1+0x34>)
 800210c:	6013      	str	r3, [r2, #0]
    if(UsbSamplesAvail > N_SIZE/2)
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <TIM1_HT1+0x38>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b80      	cmp	r3, #128	; 0x80
 8002114:	dd05      	ble.n	8002122 <TIM1_HT1+0x22>
    {
    	UsbSamplesAvail -= N_SIZE/2;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <TIM1_HT1+0x38>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3b80      	subs	r3, #128	; 0x80
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <TIM1_HT1+0x38>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e002      	b.n	8002128 <TIM1_HT1+0x28>
    }
    else
    {
    	UsbSamplesAvail = 0;
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <TIM1_HT1+0x38>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    }
    readDataTim(0);
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ffbf 	bl	80020ac <readDataTim>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000096c 	.word	0x2000096c
 8002138:	20000984 	.word	0x20000984

0800213c <HAL_I2S_TxCpltCallback>:
uint32_t parity(uint32_t val)
{
	return __builtin_parity(val);
}
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    checkTime();
 8002144:	f7ff ff62 	bl	800200c <checkTime>
	int FACTOR= 1;
 8002148:	2301      	movs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
#ifdef USE_SPDIF
	FACTOR= 4;
#endif
    if(UsbSamplesAvail > N_SIZE/2/FACTOR)
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	fb92 f2f3 	sdiv	r2, r2, r3
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_I2S_TxCpltCallback+0x50>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	da0a      	bge.n	8002172 <HAL_I2S_TxCpltCallback+0x36>
    {
    	UsbSamplesAvail -= N_SIZE/2/FACTOR;
 800215c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	fb92 f2f3 	sdiv	r2, r2, r3
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_I2S_TxCpltCallback+0x50>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_I2S_TxCpltCallback+0x50>)
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	e002      	b.n	8002178 <HAL_I2S_TxCpltCallback+0x3c>
    }
    else
    {
    	UsbSamplesAvail = 0;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_I2S_TxCpltCallback+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    }



	TransferComplete_CallBack_FS_Counter++;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_I2S_TxCpltCallback+0x54>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_I2S_TxCpltCallback+0x54>)
 8002180:	6013      	str	r3, [r2, #0]
			bbuf[k*8+7] = nm3;
		}
	}
#endif

}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000984 	.word	0x20000984
 8002190:	20000968 	.word	0x20000968

08002194 <HAL_I2S_ErrorCallback>:
	//HalfTransfer_CallBack_FS();
}


void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	printf("HAL_I2S_ErrorCallback !!!!!!!!!!!!!!!\n");
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <HAL_I2S_ErrorCallback+0x18>)
 800219e:	f00a fd85 	bl	800ccac <puts>
  //BSP_AUDIO_OUT_Error_CallBack();
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	0800ee9c 	.word	0x0800ee9c

080021b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b6:	f001 f89d 	bl	80032f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ba:	f000 f897 	bl	80022ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021be:	f000 fbc7 	bl	8002950 <MX_GPIO_Init>
  MX_DMA_Init();
 80021c2:	f000 fb6f 	bl	80028a4 <MX_DMA_Init>
  MX_I2S2_Init();
 80021c6:	f000 f8fd 	bl	80023c4 <MX_I2S2_Init>
  MX_SPI3_Init();
 80021ca:	f000 f929 	bl	8002420 <MX_SPI3_Init>
  MX_TIM1_Init();
 80021ce:	f000 f95d 	bl	800248c <MX_TIM1_Init>
  MX_TIM3_Init();
 80021d2:	f000 faef 	bl	80027b4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80021d6:	f009 fb8f 	bl	800b8f8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80021da:	f000 fa97 	bl	800270c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80021de:	f000 fb37 	bl	8002850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //0 1 2 3 0

  printf("\nStart program\n");
 80021e2:	4831      	ldr	r0, [pc, #196]	; (80022a8 <main+0xf8>)
 80021e4:	f00a fd62 	bl	800ccac <puts>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80021e8:	213c      	movs	r1, #60	; 0x3c
 80021ea:	4830      	ldr	r0, [pc, #192]	; (80022ac <main+0xfc>)
 80021ec:	f004 fd78 	bl	8006ce0 <HAL_TIM_Encoder_Start>
  cleanAudioBuffer();
 80021f0:	f7ff fee6 	bl	8001fc0 <cleanAudioBuffer>
  TIM3->PSC  = (int)(SYS_CLK_MHZ*1000000.0f/TIMER_CLOCK_FREQ)-1;
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <main+0x100>)
 80021f6:	22d1      	movs	r2, #209	; 0xd1
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_Base_Start(&htim3);
 80021fa:	482e      	ldr	r0, [pc, #184]	; (80022b4 <main+0x104>)
 80021fc:	f004 fc70 	bl	8006ae0 <HAL_TIM_Base_Start>
  HAL_StatusTypeDef stat;

#ifdef  USE_PWM
  LL_TIM_DisableAllOutputs(TIM1);
 8002200:	482d      	ldr	r0, [pc, #180]	; (80022b8 <main+0x108>)
 8002202:	f7ff f822 	bl	800124a <LL_TIM_DisableAllOutputs>
  init_timers();
 8002206:	f7ff fb61 	bl	80018cc <init_timers>
  HAL_Delay(100);
 800220a:	2064      	movs	r0, #100	; 0x64
 800220c:	f001 f8e4 	bl	80033d8 <HAL_Delay>
  LL_TIM_EnableAllOutputs(TIM1);
 8002210:	4829      	ldr	r0, [pc, #164]	; (80022b8 <main+0x108>)
 8002212:	f7ff f80a 	bl	800122a <LL_TIM_EnableAllOutputs>
#ifdef  USE_SPDIF
  makePTable();
  stat = HAL_I2S_Transmit_DMA(&hi2s2, baudio_buffer,ASBUF_SIZE);
  HAL_Delay(100);
#endif
  printf("Start Speed %x\n",readSpeedXScaled);
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <main+0x10c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	4828      	ldr	r0, [pc, #160]	; (80022c0 <main+0x110>)
 800221e:	f00a fcbf 	bl	800cba0 <iprintf>
  printf("Freq  = %f,sSpeed= %x %04d %04d %04d speed=%x\n",SYS_CLK_MHZ*1000000.0/(MAX_VOL),sForcedSpeed,HalfTransfer_CallBack_FS_Counter,TransferComplete_CallBack_FS_Counter,AUDIO_PeriodicTC_FS_Counter,readSpeedXScaled);
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <main+0x114>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <main+0x118>)
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	4928      	ldr	r1, [pc, #160]	; (80022cc <main+0x11c>)
 800222c:	6809      	ldr	r1, [r1, #0]
 800222e:	4828      	ldr	r0, [pc, #160]	; (80022d0 <main+0x120>)
 8002230:	6800      	ldr	r0, [r0, #0]
 8002232:	4c22      	ldr	r4, [pc, #136]	; (80022bc <main+0x10c>)
 8002234:	6824      	ldr	r4, [r4, #0]
 8002236:	9404      	str	r4, [sp, #16]
 8002238:	9003      	str	r0, [sp, #12]
 800223a:	9102      	str	r1, [sp, #8]
 800223c:	9201      	str	r2, [sp, #4]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	a317      	add	r3, pc, #92	; (adr r3, 80022a0 <main+0xf0>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	4823      	ldr	r0, [pc, #140]	; (80022d4 <main+0x124>)
 8002248:	f00a fcaa 	bl	800cba0 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int timcnt =0;
  int ko = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
  printf("freq = %d hz \n",frequency);
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <main+0x128>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4821      	ldr	r0, [pc, #132]	; (80022dc <main+0x12c>)
 8002258:	f00a fca2 	bl	800cba0 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick()/204!=ko)
 800225c:	f001 f8b0 	bl	80033c0 <HAL_GetTick>
 8002260:	4603      	mov	r3, r0
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <main+0x130>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	09da      	lsrs	r2, r3, #7
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d0f5      	beq.n	800225c <main+0xac>
	  {
		  ko = HAL_GetTick()/204;
 8002270:	f001 f8a6 	bl	80033c0 <HAL_GetTick>
 8002274:	4603      	mov	r3, r0
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <main+0x130>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	09db      	lsrs	r3, r3, #7
 800227e:	607b      	str	r3, [r7, #4]
		  // printf("%04d %04d %04d %04d %04d\n",HalfTransfer_CallBack_FS_Counter,TransferComplete_CallBack_FS_Counter,AUDIO_PeriodicTC_FS_Counter,AUDIO_OUT_Play_Counter,AUDIO_OUT_ChangeBuffer_Counter);
		  //printf("MAX_VOL = %d INSpeed=%0.01f Hz outSpeed=%0.01f Hz %x Delta %d SMPInH %d elaps = %d mS,ForcedSpeed = %x  %04d PLLspeed = %x %01d %07d s=%d \n",MAX_VOL,inputSpeed,(TIMER_CLOCK_FREQ*(float)outDmaSpeedScaled)/TIME_SCALE_FACT,outDmaSpeedScaled,appDistErr,samplesInBuffH,elapsed_time_ticks,sForcedSpeed,AUDIO_PeriodicTC_FS_Counter,readSpeedXScaled,HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin),TIM2->CNT,UsbSamplesAvail);
		  uint32_t out = frequency;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <main+0x128>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	603b      	str	r3, [r7, #0]
		  printf("freq = %d Hz \n",out/100);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <main+0x134>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	4619      	mov	r1, r3
 8002292:	4815      	ldr	r0, [pc, #84]	; (80022e8 <main+0x138>)
 8002294:	f00a fc84 	bl	800cba0 <iprintf>
	  if(HAL_GetTick()/204!=ko)
 8002298:	e7e0      	b.n	800225c <main+0xac>
 800229a:	bf00      	nop
 800229c:	f3af 8000 	nop.w
 80022a0:	2cddb0d3 	.word	0x2cddb0d3
 80022a4:	41119e4f 	.word	0x41119e4f
 80022a8:	0800eec4 	.word	0x0800eec4
 80022ac:	2000088c 	.word	0x2000088c
 80022b0:	40000400 	.word	0x40000400
 80022b4:	200008d4 	.word	0x200008d4
 80022b8:	40010000 	.word	0x40010000
 80022bc:	20000008 	.word	0x20000008
 80022c0:	0800eed4 	.word	0x0800eed4
 80022c4:	2000099c 	.word	0x2000099c
 80022c8:	2000096c 	.word	0x2000096c
 80022cc:	20000968 	.word	0x20000968
 80022d0:	20000960 	.word	0x20000960
 80022d4:	0800eee4 	.word	0x0800eee4
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	0800ef14 	.word	0x0800ef14
 80022e0:	a0a0a0a1 	.word	0xa0a0a0a1
 80022e4:	51eb851f 	.word	0x51eb851f
 80022e8:	0800ef24 	.word	0x0800ef24

080022ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	; 0x50
 80022f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	2230      	movs	r2, #48	; 0x30
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 ffde 	bl	800c2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <SystemClock_Config+0xd0>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <SystemClock_Config+0xd0>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <SystemClock_Config+0xd0>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <SystemClock_Config+0xd4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002338:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <SystemClock_Config+0xd4>)
 800233a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <SystemClock_Config+0xd4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800234c:	2301      	movs	r3, #1
 800234e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002356:	2302      	movs	r3, #2
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800235a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002360:	2308      	movs	r3, #8
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002364:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800236a:	2304      	movs	r3, #4
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800236e:	2307      	movs	r3, #7
 8002370:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fcf6 	bl	8005d68 <HAL_RCC_OscConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002382:	f000 fb77 	bl	8002a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002386:	230f      	movs	r3, #15
 8002388:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238a:	2302      	movs	r3, #2
 800238c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2102      	movs	r1, #2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 ff58 	bl	8006258 <HAL_RCC_ClockConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023ae:	f000 fb61 	bl	8002a74 <Error_Handler>
  }
}
 80023b2:	bf00      	nop
 80023b4:	3750      	adds	r7, #80	; 0x50
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000

080023c4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_I2S2_Init+0x50>)
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <MX_I2S2_Init+0x54>)
 80023cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_I2S2_Init+0x50>)
 80023d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_I2S2_Init+0x50>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <MX_I2S2_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_I2S2_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_192K;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MX_I2S2_Init+0x50>)
 80023ea:	4a0c      	ldr	r2, [pc, #48]	; (800241c <MX_I2S2_Init+0x58>)
 80023ec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_I2S2_Init+0x50>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_I2S2_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_I2S2_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_I2S2_Init+0x50>)
 8002402:	f001 fda7 	bl	8003f54 <HAL_I2S_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800240c:	f000 fb32 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000072c 	.word	0x2000072c
 8002418:	40003800 	.word	0x40003800
 800241c:	0002ee00 	.word	0x0002ee00

08002420 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_SPI3_Init+0x64>)
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <MX_SPI3_Init+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <MX_SPI3_Init+0x64>)
 800242c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002430:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_SPI3_Init+0x64>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_SPI3_Init+0x64>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_SPI3_Init+0x64>)
 8002440:	2202      	movs	r2, #2
 8002442:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_SPI3_Init+0x64>)
 8002446:	2201      	movs	r2, #1
 8002448:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_SPI3_Init+0x64>)
 800244c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002450:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_SPI3_Init+0x64>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <MX_SPI3_Init+0x64>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_SPI3_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <MX_SPI3_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_SPI3_Init+0x64>)
 800246c:	220a      	movs	r2, #10
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <MX_SPI3_Init+0x64>)
 8002472:	f004 fa5d 	bl	8006930 <HAL_SPI_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800247c:	f000 fafa 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200007d4 	.word	0x200007d4
 8002488:	40003c00 	.word	0x40003c00

0800248c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b09a      	sub	sp, #104	; 0x68
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024a6:	2220      	movs	r2, #32
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f009 ff06 	bl	800c2bc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7fe ff22 	bl	800131c <LL_APB2_GRP1_EnableClock>

  /* TIM1 DMA Init */

  /* TIM1_CH1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_6);
 80024d8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80024dc:	2101      	movs	r1, #1
 80024de:	4887      	ldr	r0, [pc, #540]	; (80026fc <MX_TIM1_Init+0x270>)
 80024e0:	f7ff f88c 	bl	80015fc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	2101      	movs	r1, #1
 80024e8:	4884      	ldr	r0, [pc, #528]	; (80026fc <MX_TIM1_Init+0x270>)
 80024ea:	f7fe ff4f 	bl	800138c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_HIGH);
 80024ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f2:	2101      	movs	r1, #1
 80024f4:	4881      	ldr	r0, [pc, #516]	; (80026fc <MX_TIM1_Init+0x270>)
 80024f6:	f7ff f839 	bl	800156c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 80024fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fe:	2101      	movs	r1, #1
 8002500:	487e      	ldr	r0, [pc, #504]	; (80026fc <MX_TIM1_Init+0x270>)
 8002502:	f7fe ff7f 	bl	8001404 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8002506:	2200      	movs	r2, #0
 8002508:	2101      	movs	r1, #1
 800250a:	487c      	ldr	r0, [pc, #496]	; (80026fc <MX_TIM1_Init+0x270>)
 800250c:	f7fe ff9e 	bl	800144c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8002510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002514:	2101      	movs	r1, #1
 8002516:	4879      	ldr	r0, [pc, #484]	; (80026fc <MX_TIM1_Init+0x270>)
 8002518:	f7fe ffbc 	bl	8001494 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_HALFWORD);
 800251c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002520:	2101      	movs	r1, #1
 8002522:	4876      	ldr	r0, [pc, #472]	; (80026fc <MX_TIM1_Init+0x270>)
 8002524:	f7fe ffda 	bl	80014dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252c:	2101      	movs	r1, #1
 800252e:	4873      	ldr	r0, [pc, #460]	; (80026fc <MX_TIM1_Init+0x270>)
 8002530:	f7fe fff8 	bl	8001524 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_1);
 8002534:	2101      	movs	r1, #1
 8002536:	4871      	ldr	r0, [pc, #452]	; (80026fc <MX_TIM1_Init+0x270>)
 8002538:	f7ff f8cc 	bl	80016d4 <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_1, LL_DMA_FIFOTHRESHOLD_FULL);
 800253c:	2203      	movs	r2, #3
 800253e:	2101      	movs	r1, #1
 8002540:	486e      	ldr	r0, [pc, #440]	; (80026fc <MX_TIM1_Init+0x270>)
 8002542:	f7ff f8e7 	bl	8001714 <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_1, LL_DMA_MBURST_INC8);
 8002546:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254a:	2101      	movs	r1, #1
 800254c:	486b      	ldr	r0, [pc, #428]	; (80026fc <MX_TIM1_Init+0x270>)
 800254e:	f7ff f879 	bl	8001644 <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_1, LL_DMA_PBURST_SINGLE);
 8002552:	2200      	movs	r2, #0
 8002554:	2101      	movs	r1, #1
 8002556:	4869      	ldr	r0, [pc, #420]	; (80026fc <MX_TIM1_Init+0x270>)
 8002558:	f7ff f898 	bl	800168c <LL_DMA_SetPeriphBurstxfer>

  /* TIM1_CH2 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_6);
 800255c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002560:	2102      	movs	r1, #2
 8002562:	4866      	ldr	r0, [pc, #408]	; (80026fc <MX_TIM1_Init+0x270>)
 8002564:	f7ff f84a 	bl	80015fc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	2102      	movs	r1, #2
 800256c:	4863      	ldr	r0, [pc, #396]	; (80026fc <MX_TIM1_Init+0x270>)
 800256e:	f7fe ff0d 	bl	800138c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 8002572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002576:	2102      	movs	r1, #2
 8002578:	4860      	ldr	r0, [pc, #384]	; (80026fc <MX_TIM1_Init+0x270>)
 800257a:	f7fe fff7 	bl	800156c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800257e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002582:	2102      	movs	r1, #2
 8002584:	485d      	ldr	r0, [pc, #372]	; (80026fc <MX_TIM1_Init+0x270>)
 8002586:	f7fe ff3d 	bl	8001404 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 800258a:	2200      	movs	r2, #0
 800258c:	2102      	movs	r1, #2
 800258e:	485b      	ldr	r0, [pc, #364]	; (80026fc <MX_TIM1_Init+0x270>)
 8002590:	f7fe ff5c 	bl	800144c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	2102      	movs	r1, #2
 800259a:	4858      	ldr	r0, [pc, #352]	; (80026fc <MX_TIM1_Init+0x270>)
 800259c:	f7fe ff7a 	bl	8001494 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_HALFWORD);
 80025a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a4:	2102      	movs	r1, #2
 80025a6:	4855      	ldr	r0, [pc, #340]	; (80026fc <MX_TIM1_Init+0x270>)
 80025a8:	f7fe ff98 	bl	80014dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_HALFWORD);
 80025ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b0:	2102      	movs	r1, #2
 80025b2:	4852      	ldr	r0, [pc, #328]	; (80026fc <MX_TIM1_Init+0x270>)
 80025b4:	f7fe ffb6 	bl	8001524 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_2);
 80025b8:	2102      	movs	r1, #2
 80025ba:	4850      	ldr	r0, [pc, #320]	; (80026fc <MX_TIM1_Init+0x270>)
 80025bc:	f7ff f88a 	bl	80016d4 <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_2, LL_DMA_FIFOTHRESHOLD_FULL);
 80025c0:	2203      	movs	r2, #3
 80025c2:	2102      	movs	r1, #2
 80025c4:	484d      	ldr	r0, [pc, #308]	; (80026fc <MX_TIM1_Init+0x270>)
 80025c6:	f7ff f8a5 	bl	8001714 <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_2, LL_DMA_MBURST_INC8);
 80025ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ce:	2102      	movs	r1, #2
 80025d0:	484a      	ldr	r0, [pc, #296]	; (80026fc <MX_TIM1_Init+0x270>)
 80025d2:	f7ff f837 	bl	8001644 <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_2, LL_DMA_PBURST_SINGLE);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2102      	movs	r1, #2
 80025da:	4848      	ldr	r0, [pc, #288]	; (80026fc <MX_TIM1_Init+0x270>)
 80025dc:	f7ff f856 	bl	800168c <LL_DMA_SetPeriphBurstxfer>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80025e6:	2300      	movs	r3, #0
 80025e8:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 80025ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80025f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025fc:	4619      	mov	r1, r3
 80025fe:	4840      	ldr	r0, [pc, #256]	; (8002700 <MX_TIM1_Init+0x274>)
 8002600:	f005 fc1e 	bl	8007e40 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002604:	483e      	ldr	r0, [pc, #248]	; (8002700 <MX_TIM1_Init+0x274>)
 8002606:	f7fe fd42 	bl	800108e <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800260a:	2101      	movs	r1, #1
 800260c:	483c      	ldr	r0, [pc, #240]	; (8002700 <MX_TIM1_Init+0x274>)
 800260e:	f7fe fda5 	bl	800115c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002612:	2360      	movs	r3, #96	; 0x60
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002622:	2300      	movs	r3, #0
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002626:	2300      	movs	r3, #0
 8002628:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002632:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002636:	461a      	mov	r2, r3
 8002638:	2101      	movs	r1, #1
 800263a:	4831      	ldr	r0, [pc, #196]	; (8002700 <MX_TIM1_Init+0x274>)
 800263c:	f005 fc7a 	bl	8007f34 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002640:	2101      	movs	r1, #1
 8002642:	482f      	ldr	r0, [pc, #188]	; (8002700 <MX_TIM1_Init+0x274>)
 8002644:	f7fe fd44 	bl	80010d0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8002648:	2110      	movs	r1, #16
 800264a:	482d      	ldr	r0, [pc, #180]	; (8002700 <MX_TIM1_Init+0x274>)
 800264c:	f7fe fd86 	bl	800115c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002650:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002654:	461a      	mov	r2, r3
 8002656:	2110      	movs	r1, #16
 8002658:	4829      	ldr	r0, [pc, #164]	; (8002700 <MX_TIM1_Init+0x274>)
 800265a:	f005 fc6b 	bl	8007f34 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 800265e:	2110      	movs	r1, #16
 8002660:	4827      	ldr	r0, [pc, #156]	; (8002700 <MX_TIM1_Init+0x274>)
 8002662:	f7fe fd35 	bl	80010d0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002666:	2100      	movs	r1, #0
 8002668:	4825      	ldr	r0, [pc, #148]	; (8002700 <MX_TIM1_Init+0x274>)
 800266a:	f7fe fdbb 	bl	80011e4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800266e:	4824      	ldr	r0, [pc, #144]	; (8002700 <MX_TIM1_Init+0x274>)
 8002670:	f7fe fdcb 	bl	800120a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800268a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4819      	ldr	r0, [pc, #100]	; (8002700 <MX_TIM1_Init+0x274>)
 800269c:	f005 fc8b 	bl	8007fb6 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026a0:	2002      	movs	r0, #2
 80026a2:	f7fe fe23 	bl	80012ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f7fe fe20 	bl	80012ec <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM1_CH2N
  PB13   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_13;
 80026ac:	f242 0301 	movw	r3, #8193	; 0x2001
 80026b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026b2:	2302      	movs	r3, #2
 80026b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026b6:	2302      	movs	r3, #2
 80026b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <MX_TIM1_Init+0x278>)
 80026cc:	f005 fad3 	bl	8007c76 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80026d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026d6:	2302      	movs	r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026da:	2302      	movs	r3, #2
 80026dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80026de:	2301      	movs	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <MX_TIM1_Init+0x27c>)
 80026f0:	f005 fac1 	bl	8007c76 <LL_GPIO_Init>

}
 80026f4:	bf00      	nop
 80026f6:	3768      	adds	r7, #104	; 0x68
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40026400 	.word	0x40026400
 8002700:	40010000 	.word	0x40010000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020000 	.word	0x40020000

0800270c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f009 fdce 	bl	800c2bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800272a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800272e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800273e:	f04f 32ff 	mov.w	r2, #4294967295
 8002742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002750:	2303      	movs	r3, #3
 8002752:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002758:	2301      	movs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002770:	230a      	movs	r3, #10
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800277c:	f004 fa0a 	bl	8006b94 <HAL_TIM_Encoder_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002786:	f000 f975 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002798:	f004 fd38 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80027a2:	f000 f967 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	3730      	adds	r7, #48	; 0x30
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000088c 	.word	0x2000088c

080027b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	463b      	mov	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <MX_TIM3_Init+0x94>)
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <MX_TIM3_Init+0x98>)
 80027d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840/4-1;
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MX_TIM3_Init+0x94>)
 80027d8:	22d1      	movs	r2, #209	; 0xd1
 80027da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_TIM3_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <MX_TIM3_Init+0x94>)
 80027e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <MX_TIM3_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_TIM3_Init+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027f6:	4814      	ldr	r0, [pc, #80]	; (8002848 <MX_TIM3_Init+0x94>)
 80027f8:	f004 f923 	bl	8006a42 <HAL_TIM_Base_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002802:	f000 f937 	bl	8002a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4619      	mov	r1, r3
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <MX_TIM3_Init+0x94>)
 8002814:	f004 faf2 	bl	8006dfc <HAL_TIM_ConfigClockSource>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800281e:	f000 f929 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <MX_TIM3_Init+0x94>)
 8002830:	f004 fcec 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800283a:	f000 f91b 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200008d4 	.word	0x200008d4
 800284c:	40000400 	.word	0x40000400

08002850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <MX_USART2_UART_Init+0x50>)
 8002858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <MX_USART2_UART_Init+0x4c>)
 800285c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_USART2_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_USART2_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002888:	f004 fd2e 	bl	80072e8 <HAL_UART_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002892:	f000 f8ef 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000091c 	.word	0x2000091c
 80028a0:	40004400 	.word	0x40004400

080028a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <MX_DMA_Init+0xa8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a26      	ldr	r2, [pc, #152]	; (800294c <MX_DMA_Init+0xa8>)
 80028b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <MX_DMA_Init+0xa8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <MX_DMA_Init+0xa8>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a1f      	ldr	r2, [pc, #124]	; (800294c <MX_DMA_Init+0xa8>)
 80028d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MX_DMA_Init+0xa8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	200f      	movs	r0, #15
 80028e8:	f000 fe75 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028ec:	200f      	movs	r0, #15
 80028ee:	f000 fe8e 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	2010      	movs	r0, #16
 80028f8:	f000 fe6d 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028fc:	2010      	movs	r0, #16
 80028fe:	f000 fe86 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002902:	f7fe fb2b 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 8002906:	4603      	mov	r3, r0
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fb7b 	bl	8001008 <NVIC_EncodePriority>
 8002912:	4603      	mov	r3, r0
 8002914:	4619      	mov	r1, r3
 8002916:	2039      	movs	r0, #57	; 0x39
 8002918:	f7fe fb4c 	bl	8000fb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800291c:	2039      	movs	r0, #57	; 0x39
 800291e:	f7fe fb2b 	bl	8000f78 <__NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002922:	f7fe fb1b 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 8002926:	4603      	mov	r3, r0
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fb6b 	bl	8001008 <NVIC_EncodePriority>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	203a      	movs	r0, #58	; 0x3a
 8002938:	f7fe fb3c 	bl	8000fb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800293c:	203a      	movs	r0, #58	; 0x3a
 800293e:	f7fe fb1b 	bl	8000f78 <__NVIC_EnableIRQ>

}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <MX_GPIO_Init+0x114>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a3d      	ldr	r2, [pc, #244]	; (8002a64 <MX_GPIO_Init+0x114>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <MX_GPIO_Init+0x114>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <MX_GPIO_Init+0x114>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <MX_GPIO_Init+0x114>)
 800298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <MX_GPIO_Init+0x114>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <MX_GPIO_Init+0x114>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <MX_GPIO_Init+0x114>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <MX_GPIO_Init+0x114>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <MX_GPIO_Init+0x114>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <MX_GPIO_Init+0x114>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <MX_GPIO_Init+0x114>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DUMMY_OUT_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80029dc:	4822      	ldr	r0, [pc, #136]	; (8002a68 <MX_GPIO_Init+0x118>)
 80029de:	f001 fa9f 	bl	8003f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUTE_OUT_GPIO_Port, MUTE_OUT_Pin, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2104      	movs	r1, #4
 80029e6:	4821      	ldr	r0, [pc, #132]	; (8002a6c <MX_GPIO_Init+0x11c>)
 80029e8:	f001 fa9a 	bl	8003f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80029ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	481b      	ldr	r0, [pc, #108]	; (8002a70 <MX_GPIO_Init+0x120>)
 8002a02:	f001 f909 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DUMMY_OUT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DUMMY_OUT_Pin;
 8002a06:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4812      	ldr	r0, [pc, #72]	; (8002a68 <MX_GPIO_Init+0x118>)
 8002a20:	f001 f8fa 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_OUT_Pin */
  GPIO_InitStruct.Pin = MUTE_OUT_Pin;
 8002a24:	2304      	movs	r3, #4
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MUTE_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480c      	ldr	r0, [pc, #48]	; (8002a6c <MX_GPIO_Init+0x11c>)
 8002a3c:	f001 f8ec 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEYB14_Pin */
  GPIO_InitStruct.Pin = KEYB14_Pin;
 8002a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYB14_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_GPIO_Init+0x11c>)
 8002a56:	f001 f8df 	bl	8003c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800

08002a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <Error_Handler+0x8>
	...

08002a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_MspInit+0x4c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_MspInit+0x4c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_MspInit+0x4c>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_MspInit+0x4c>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <HAL_I2S_MspInit+0x12c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d177      	bne.n	8002bf2 <HAL_I2S_MspInit+0x122>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002b02:	2301      	movs	r3, #1
 8002b04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002b06:	23c0      	movs	r3, #192	; 0xc0
 8002b08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fdc0 	bl	8006698 <HAL_RCCEx_PeriphCLKConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8002b1e:	f7ff ffa9 	bl	8002a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_I2S_MspInit+0x130>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a35      	ldr	r2, [pc, #212]	; (8002c00 <HAL_I2S_MspInit+0x130>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_I2S_MspInit+0x130>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_I2S_MspInit+0x130>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_I2S_MspInit+0x130>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_I2S_MspInit+0x130>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8002b5a:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4823      	ldr	r0, [pc, #140]	; (8002c04 <HAL_I2S_MspInit+0x134>)
 8002b78:	f001 f84e 	bl	8003c18 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_I2S_MspInit+0x13c>)
 8002b80:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002baa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bba:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC8;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002bd6:	480c      	ldr	r0, [pc, #48]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bd8:	f000 fd34 	bl	8003644 <HAL_DMA_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8002be2:	f7ff ff47 	bl	8002a74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
 8002bec:	4a06      	ldr	r2, [pc, #24]	; (8002c08 <HAL_I2S_MspInit+0x138>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3738      	adds	r7, #56	; 0x38
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40003800 	.word	0x40003800
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020400 	.word	0x40020400
 8002c08:	20000774 	.word	0x20000774
 8002c0c:	40026070 	.word	0x40026070

08002c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2f      	ldr	r2, [pc, #188]	; (8002cec <HAL_SPI_MspInit+0xdc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d158      	bne.n	8002ce4 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_SPI_MspInit+0xe0>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <HAL_SPI_MspInit+0xe0>)
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_SPI_MspInit+0xe0>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_SPI_MspInit+0xe0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <HAL_SPI_MspInit+0xe0>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_SPI_MspInit+0xe0>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c6a:	2338      	movs	r3, #56	; 0x38
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	481b      	ldr	r0, [pc, #108]	; (8002cf4 <HAL_SPI_MspInit+0xe4>)
 8002c86:	f000 ffc7 	bl	8003c18 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_SPI_MspInit+0xec>)
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cca:	f000 fcbb 	bl	8003644 <HAL_DMA_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002cd4:	f7ff fece 	bl	8002a74 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002cdc:	649a      	str	r2, [r3, #72]	; 0x48
 8002cde:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <HAL_SPI_MspInit+0xe8>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40003c00 	.word	0x40003c00
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	2000082c 	.word	0x2000082c
 8002cfc:	40026088 	.word	0x40026088

08002d00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d12b      	bne.n	8002d7a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a0f      	ldr	r2, [pc, #60]	; (8002d84 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4804      	ldr	r0, [pc, #16]	; (8002d88 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d76:	f000 ff4f 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10d      	bne.n	8002dba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_TIM_Base_MspInit+0x40>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_TIM_Base_MspInit+0x40>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_TIM_Base_MspInit+0x40>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_UART_MspInit+0x84>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d12b      	bne.n	8002e4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	4619      	mov	r1, r3
 8002e44:	4805      	ldr	r0, [pc, #20]	; (8002e5c <HAL_UART_MspInit+0x8c>)
 8002e46:	f000 fee7 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e4a:	bf00      	nop
 8002e4c:	3728      	adds	r7, #40	; 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40004400 	.word	0x40004400
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40020000 	.word	0x40020000

08002e60 <LL_DMA_IsActiveFlag_HT1>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF1)==(DMA_LISR_HTIF1));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_DMA_IsActiveFlag_HT2>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF2)==(DMA_LISR_HTIF2));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_DMA_IsActiveFlag_TC1>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_DMA_IsActiveFlag_TC2>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_DMA_IsActiveFlag_TE1>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF1)==(DMA_LISR_TEIF1));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_DMA_IsActiveFlag_TE2>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF2)==(DMA_LISR_TEIF2));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_DMA_ClearFlag_HT1>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_DMA_ClearFlag_HT2>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_DMA_ClearFlag_TC1>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f96:	609a      	str	r2, [r3, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_DMA_ClearFlag_TC2>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_DMA_ClearFlag_TE1>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_DMA_ClearFlag_TE2>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <NMI_Handler+0x4>

08002ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <HardFault_Handler+0x4>

08003004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003008:	e7fe      	b.n	8003008 <MemManage_Handler+0x4>

0800300a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300e:	e7fe      	b.n	800300e <BusFault_Handler+0x4>

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <UsageFault_Handler+0x4>

08003016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003044:	f000 f9a8 	bl	8003398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <DMA1_Stream4_IRQHandler+0x10>)
 8003052:	f000 fba5 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000774 	.word	0x20000774

08003060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <DMA1_Stream5_IRQHandler+0x10>)
 8003066:	f000 fb9b 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000082c 	.word	0x2000082c

08003074 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2) == 1)
 8003078:	4811      	ldr	r0, [pc, #68]	; (80030c0 <DMA2_Stream1_IRQHandler+0x4c>)
 800307a:	f7ff ff19 	bl	8002eb0 <LL_DMA_IsActiveFlag_TC1>
 800307e:	4603      	mov	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d104      	bne.n	800308e <DMA2_Stream1_IRQHandler+0x1a>
	{
		LL_DMA_ClearFlag_TC1(DMA2);
 8003084:	480e      	ldr	r0, [pc, #56]	; (80030c0 <DMA2_Stream1_IRQHandler+0x4c>)
 8003086:	f7ff ff7f 	bl	8002f88 <LL_DMA_ClearFlag_TC1>
		TIM1_TC1();
 800308a:	f7ff f829 	bl	80020e0 <TIM1_TC1>
	}
	if(LL_DMA_IsActiveFlag_HT1(DMA2) == 1)
 800308e:	480c      	ldr	r0, [pc, #48]	; (80030c0 <DMA2_Stream1_IRQHandler+0x4c>)
 8003090:	f7ff fee6 	bl	8002e60 <LL_DMA_IsActiveFlag_HT1>
 8003094:	4603      	mov	r3, r0
 8003096:	2b01      	cmp	r3, #1
 8003098:	d104      	bne.n	80030a4 <DMA2_Stream1_IRQHandler+0x30>
	{
		LL_DMA_ClearFlag_HT1(DMA2);
 800309a:	4809      	ldr	r0, [pc, #36]	; (80030c0 <DMA2_Stream1_IRQHandler+0x4c>)
 800309c:	f7ff ff58 	bl	8002f50 <LL_DMA_ClearFlag_HT1>
		TIM1_HT1();
 80030a0:	f7ff f82e 	bl	8002100 <TIM1_HT1>
	}
	if(LL_DMA_IsActiveFlag_TE1(DMA2) == 1)
 80030a4:	4806      	ldr	r0, [pc, #24]	; (80030c0 <DMA2_Stream1_IRQHandler+0x4c>)
 80030a6:	f7ff ff2b 	bl	8002f00 <LL_DMA_IsActiveFlag_TE1>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d104      	bne.n	80030ba <DMA2_Stream1_IRQHandler+0x46>
	{
		LL_DMA_ClearFlag_TE1(DMA2);
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <DMA2_Stream1_IRQHandler+0x4c>)
 80030b2:	f7ff ff85 	bl	8002fc0 <LL_DMA_ClearFlag_TE1>
		TIM1_TE1();
 80030b6:	f7fe fbed 	bl	8001894 <TIM1_TE1>
  /* USER CODE END DMA2_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40026400 	.word	0x40026400

080030c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA2) == 1)
 80030c8:	4811      	ldr	r0, [pc, #68]	; (8003110 <DMA2_Stream2_IRQHandler+0x4c>)
 80030ca:	f7ff ff05 	bl	8002ed8 <LL_DMA_IsActiveFlag_TC2>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d104      	bne.n	80030de <DMA2_Stream2_IRQHandler+0x1a>
	{
		LL_DMA_ClearFlag_TC2(DMA2);
 80030d4:	480e      	ldr	r0, [pc, #56]	; (8003110 <DMA2_Stream2_IRQHandler+0x4c>)
 80030d6:	f7ff ff65 	bl	8002fa4 <LL_DMA_ClearFlag_TC2>
		TIM1_TC2();
 80030da:	f7fe fbe2 	bl	80018a2 <TIM1_TC2>
	}
	if(LL_DMA_IsActiveFlag_HT2(DMA2) == 1)
 80030de:	480c      	ldr	r0, [pc, #48]	; (8003110 <DMA2_Stream2_IRQHandler+0x4c>)
 80030e0:	f7ff fed2 	bl	8002e88 <LL_DMA_IsActiveFlag_HT2>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d104      	bne.n	80030f4 <DMA2_Stream2_IRQHandler+0x30>
	{
		LL_DMA_ClearFlag_HT2(DMA2);
 80030ea:	4809      	ldr	r0, [pc, #36]	; (8003110 <DMA2_Stream2_IRQHandler+0x4c>)
 80030ec:	f7ff ff3e 	bl	8002f6c <LL_DMA_ClearFlag_HT2>
		TIM1_HT2();
 80030f0:	f7fe fbde 	bl	80018b0 <TIM1_HT2>
	}
	if(LL_DMA_IsActiveFlag_TE2(DMA2) == 1)
 80030f4:	4806      	ldr	r0, [pc, #24]	; (8003110 <DMA2_Stream2_IRQHandler+0x4c>)
 80030f6:	f7ff ff17 	bl	8002f28 <LL_DMA_IsActiveFlag_TE2>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d104      	bne.n	800310a <DMA2_Stream2_IRQHandler+0x46>
	{
		LL_DMA_ClearFlag_TE2(DMA2);
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <DMA2_Stream2_IRQHandler+0x4c>)
 8003102:	f7ff ff6b 	bl	8002fdc <LL_DMA_ClearFlag_TE2>
		TIM1_TE2();
 8003106:	f7fe fbda 	bl	80018be <TIM1_TE2>
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40026400 	.word	0x40026400

08003114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <OTG_FS_IRQHandler+0x10>)
 800311a:	f001 fcf7 	bl	8004b0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000eb4 	.word	0x20000eb4

08003128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	return 1;
 800312c:	2301      	movs	r3, #1
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <_kill>:

int _kill(int pid, int sig)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003142:	f009 f891 	bl	800c268 <__errno>
 8003146:	4603      	mov	r3, r0
 8003148:	2216      	movs	r2, #22
 800314a:	601a      	str	r2, [r3, #0]
	return -1;
 800314c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_exit>:

void _exit (int status)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003160:	f04f 31ff 	mov.w	r1, #4294967295
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ffe7 	bl	8003138 <_kill>
	while (1) {}		/* Make sure we hang here */
 800316a:	e7fe      	b.n	800316a <_exit+0x12>

0800316c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	e00a      	b.n	8003194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800317e:	f3af 8000 	nop.w
 8003182:	4601      	mov	r1, r0
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	60ba      	str	r2, [r7, #8]
 800318a:	b2ca      	uxtb	r2, r1
 800318c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	dbf0      	blt.n	800317e <_read+0x12>
	}

return len;
 800319c:	687b      	ldr	r3, [r7, #4]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
	return -1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ce:	605a      	str	r2, [r3, #4]
	return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <_isatty>:

int _isatty(int file)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
	return 1;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
	return 0;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <_sbrk+0x5c>)
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <_sbrk+0x60>)
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <_sbrk+0x64>)
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <_sbrk+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003240:	f009 f812 	bl	800c268 <__errno>
 8003244:	4603      	mov	r3, r0
 8003246:	220c      	movs	r2, #12
 8003248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	e009      	b.n	8003264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <_sbrk+0x64>)
 8003260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20018000 	.word	0x20018000
 8003270:	00000400 	.word	0x00000400
 8003274:	200009cc 	.word	0x200009cc
 8003278:	20005028 	.word	0x20005028

0800327c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <SystemInit+0x20>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <SystemInit+0x20>)
 8003288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800328c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032a6:	490e      	ldr	r1, [pc, #56]	; (80032e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032a8:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ac:	e002      	b.n	80032b4 <LoopCopyDataInit>

080032ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b2:	3304      	adds	r3, #4

080032b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b8:	d3f9      	bcc.n	80032ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032bc:	4c0b      	ldr	r4, [pc, #44]	; (80032ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c0:	e001      	b.n	80032c6 <LoopFillZerobss>

080032c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c4:	3204      	adds	r2, #4

080032c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c8:	d3fb      	bcc.n	80032c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032ca:	f7ff ffd7 	bl	800327c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ce:	f008 ffd1 	bl	800c274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d2:	f7fe ff6d 	bl	80021b0 <main>
  bx  lr    
 80032d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80032dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e0:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80032e4:	0800f39c 	.word	0x0800f39c
  ldr r2, =_sbss
 80032e8:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80032ec:	20005024 	.word	0x20005024

080032f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC_IRQHandler>
	...

080032f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_Init+0x40>)
 80032fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_Init+0x40>)
 800330a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_Init+0x40>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_Init+0x40>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f000 f94f 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003322:	200f      	movs	r0, #15
 8003324:	f000 f808 	bl	8003338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003328:	f7ff fbaa 	bl	8002a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x54>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_InitTick+0x58>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f967 	bl	800362a <HAL_SYSTICK_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00e      	b.n	8003384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d80a      	bhi.n	8003382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f000 f92f 	bl	80035d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <HAL_InitTick+0x5c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000014 	.word	0x20000014
 8003390:	2000001c 	.word	0x2000001c
 8003394:	20000018 	.word	0x20000018

08003398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x20>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x24>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_IncTick+0x24>)
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	2000001c 	.word	0x2000001c
 80033bc:	200009d0 	.word	0x200009d0

080033c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return uwTick;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_GetTick+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	200009d0 	.word	0x200009d0

080033d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff ffee 	bl	80033c0 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d005      	beq.n	80033fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_Delay+0x44>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fe:	bf00      	nop
 8003400:	f7ff ffde 	bl	80033c0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	d8f7      	bhi.n	8003400 <HAL_Delay+0x28>
  {
  }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2000001c 	.word	0x2000001c

08003420 <__NVIC_SetPriorityGrouping>:
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff feb6 	bl	80033c0 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e099      	b.n	8003794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003680:	e00f      	b.n	80036a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003682:	f7ff fe9d 	bl	80033c0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d908      	bls.n	80036a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e078      	b.n	8003794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e8      	bne.n	8003682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_DMA_Init+0x158>)
 80036bc:	4013      	ands	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4313      	orrs	r3, r2
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b04      	cmp	r3, #4
 8003734:	d117      	bne.n	8003766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f9e9 	bl	8003b20 <DMA_CheckFifoParam>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003762:	2301      	movs	r3, #1
 8003764:	e016      	b.n	8003794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9a0 	bl	8003ab4 <DMA_CalcBaseAndBitshift>
 8003774:	4603      	mov	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	223f      	movs	r2, #63	; 0x3f
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	f010803f 	.word	0xf010803f

080037a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ac:	4b8e      	ldr	r3, [pc, #568]	; (80039e8 <HAL_DMA_IRQHandler+0x248>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a8e      	ldr	r2, [pc, #568]	; (80039ec <HAL_DMA_IRQHandler+0x24c>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	2208      	movs	r2, #8
 80037cc:	409a      	lsls	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01a      	beq.n	800380c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2208      	movs	r2, #8
 80037fa:	409a      	lsls	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f043 0201 	orr.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	2201      	movs	r2, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	2201      	movs	r2, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	2204      	movs	r2, #4
 8003848:	409a      	lsls	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	2204      	movs	r2, #4
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2210      	movs	r2, #16
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d043      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d03c      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2210      	movs	r2, #16
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d024      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e01f      	b.n	8003910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
 80038e0:	e016      	b.n	8003910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0208 	bic.w	r2, r2, #8
 80038fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2220      	movs	r2, #32
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 808f 	beq.w	8003a40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8087 	beq.w	8003a40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	2220      	movs	r2, #32
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b05      	cmp	r3, #5
 8003948:	d136      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0216 	bic.w	r2, r2, #22
 8003958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_DMA_IRQHandler+0x1da>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0208 	bic.w	r2, r2, #8
 8003988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	223f      	movs	r2, #63	; 0x3f
 8003990:	409a      	lsls	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d07e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
        }
        return;
 80039b6:	e079      	b.n	8003aac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01d      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d031      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e02c      	b.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
 80039e6:	bf00      	nop
 80039e8:	20000014 	.word	0x20000014
 80039ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d023      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
 8003a00:	e01e      	b.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10f      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0210 	bic.w	r2, r2, #16
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d032      	beq.n	8003aae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2205      	movs	r2, #5
 8003a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d307      	bcc.n	8003a88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f2      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x2cc>
 8003a86:	e000      	b.n	8003a8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_IRQHandler+0x30e>
        return;
 8003aac:	bf00      	nop
    }
  }
}
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3b10      	subs	r3, #16
 8003ac4:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <DMA_CalcBaseAndBitshift+0x64>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ace:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <DMA_CalcBaseAndBitshift+0x68>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d909      	bls.n	8003af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	; 0x58
 8003af4:	e007      	b.n	8003b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	aaaaaaab 	.word	0xaaaaaaab
 8003b1c:	0800efac 	.word	0x0800efac

08003b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11f      	bne.n	8003b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d856      	bhi.n	8003bee <DMA_CheckFifoParam+0xce>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <DMA_CheckFifoParam+0x28>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b6b 	.word	0x08003b6b
 8003b50:	08003b59 	.word	0x08003b59
 8003b54:	08003bef 	.word	0x08003bef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d046      	beq.n	8003bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b68:	e043      	b.n	8003bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b72:	d140      	bne.n	8003bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b78:	e03d      	b.n	8003bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	d121      	bne.n	8003bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d837      	bhi.n	8003bfa <DMA_CheckFifoParam+0xda>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <DMA_CheckFifoParam+0x70>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003ba7 	.word	0x08003ba7
 8003b98:	08003ba1 	.word	0x08003ba1
 8003b9c:	08003bb9 	.word	0x08003bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e030      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d025      	beq.n	8003bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb6:	e022      	b.n	8003bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc0:	d11f      	bne.n	8003c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bc6:	e01c      	b.n	8003c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d903      	bls.n	8003bd6 <DMA_CheckFifoParam+0xb6>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d003      	beq.n	8003bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd4:	e018      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bda:	e015      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      break;
 8003bec:	e00b      	b.n	8003c06 <DMA_CheckFifoParam+0xe6>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e00a      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e008      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e006      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
    }
  } 
  
  return status; 
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop

08003c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e159      	b.n	8003ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c34:	2201      	movs	r2, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	f040 8148 	bne.w	8003ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d005      	beq.n	8003c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d130      	bne.n	8003ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2203      	movs	r2, #3
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 0201 	and.w	r2, r3, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d017      	beq.n	8003d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d123      	bne.n	8003d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	08da      	lsrs	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3208      	adds	r2, #8
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a2 	beq.w	8003ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	4b57      	ldr	r3, [pc, #348]	; (8003f00 <HAL_GPIO_Init+0x2e8>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	4a56      	ldr	r2, [pc, #344]	; (8003f00 <HAL_GPIO_Init+0x2e8>)
 8003da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b54      	ldr	r3, [pc, #336]	; (8003f00 <HAL_GPIO_Init+0x2e8>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dba:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_GPIO_Init+0x2ec>)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a49      	ldr	r2, [pc, #292]	; (8003f08 <HAL_GPIO_Init+0x2f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d019      	beq.n	8003e1a <HAL_GPIO_Init+0x202>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a48      	ldr	r2, [pc, #288]	; (8003f0c <HAL_GPIO_Init+0x2f4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <HAL_GPIO_Init+0x1fe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a47      	ldr	r2, [pc, #284]	; (8003f10 <HAL_GPIO_Init+0x2f8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00d      	beq.n	8003e12 <HAL_GPIO_Init+0x1fa>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <HAL_GPIO_Init+0x2fc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <HAL_GPIO_Init+0x1f6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a45      	ldr	r2, [pc, #276]	; (8003f18 <HAL_GPIO_Init+0x300>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_GPIO_Init+0x1f2>
 8003e06:	2304      	movs	r3, #4
 8003e08:	e008      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e004      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e002      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f002 0203 	and.w	r2, r2, #3
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	4093      	lsls	r3, r2
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e2c:	4935      	ldr	r1, [pc, #212]	; (8003f04 <HAL_GPIO_Init+0x2ec>)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	3302      	adds	r3, #2
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3a:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e88:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb8:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003edc:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <HAL_GPIO_Init+0x304>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	f67f aea2 	bls.w	8003c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40020c00 	.word	0x40020c00
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40013c00 	.word	0x40013c00

08003f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f30:	787b      	ldrb	r3, [r7, #1]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f3c:	e003      	b.n	8003f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	041a      	lsls	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	619a      	str	r2, [r3, #24]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e128      	b.n	80041b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a90      	ldr	r2, [pc, #576]	; (80041c0 <HAL_I2S_Init+0x26c>)
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe fda5 	bl	8002ad0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f9c:	f023 030f 	bic.w	r3, r3, #15
 8003fa0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d060      	beq.n	8004074 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fba:	2310      	movs	r3, #16
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e001      	b.n	8003fc4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d802      	bhi.n	8003fd2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f002 fc4e 	bl	8006874 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fd8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe2:	d125      	bne.n	8004030 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	3305      	adds	r3, #5
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e01f      	b.n	800404e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	fbb2 f2f3 	udiv	r2, r2, r3
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	3305      	adds	r3, #5
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e00e      	b.n	800404e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	fbb2 f2f3 	udiv	r2, r2, r3
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	3305      	adds	r3, #5
 800404c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4a5c      	ldr	r2, [pc, #368]	; (80041c4 <HAL_I2S_Init+0x270>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004074:	2302      	movs	r3, #2
 8004076:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d902      	bls.n	8004088 <HAL_I2S_Init+0x134>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2bff      	cmp	r3, #255	; 0xff
 8004086:	d907      	bls.n	8004098 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f043 0210 	orr.w	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e08f      	b.n	80041b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	ea42 0103 	orr.w	r1, r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040b6:	f023 030f 	bic.w	r3, r3, #15
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6851      	ldr	r1, [r2, #4]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6892      	ldr	r2, [r2, #8]
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68d2      	ldr	r2, [r2, #12]
 80040c8:	4311      	orrs	r1, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6992      	ldr	r2, [r2, #24]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d161      	bne.n	80041a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a38      	ldr	r2, [pc, #224]	; (80041c8 <HAL_I2S_Init+0x274>)
 80040e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a37      	ldr	r2, [pc, #220]	; (80041cc <HAL_I2S_Init+0x278>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_I2S_Init+0x1a4>
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_I2S_Init+0x27c>)
 80040f6:	e001      	b.n	80040fc <HAL_I2S_Init+0x1a8>
 80040f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	4932      	ldr	r1, [pc, #200]	; (80041cc <HAL_I2S_Init+0x278>)
 8004104:	428a      	cmp	r2, r1
 8004106:	d101      	bne.n	800410c <HAL_I2S_Init+0x1b8>
 8004108:	4a31      	ldr	r2, [pc, #196]	; (80041d0 <HAL_I2S_Init+0x27c>)
 800410a:	e001      	b.n	8004110 <HAL_I2S_Init+0x1bc>
 800410c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004110:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004114:	f023 030f 	bic.w	r3, r3, #15
 8004118:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <HAL_I2S_Init+0x278>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_I2S_Init+0x1d4>
 8004124:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_I2S_Init+0x27c>)
 8004126:	e001      	b.n	800412c <HAL_I2S_Init+0x1d8>
 8004128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800412c:	2202      	movs	r2, #2
 800412e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a25      	ldr	r2, [pc, #148]	; (80041cc <HAL_I2S_Init+0x278>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2S_Init+0x1ea>
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_I2S_Init+0x27c>)
 800413c:	e001      	b.n	8004142 <HAL_I2S_Init+0x1ee>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414e:	d003      	beq.n	8004158 <HAL_I2S_Init+0x204>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	e001      	b.n	8004164 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800416e:	4313      	orrs	r3, r2
 8004170:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004178:	4313      	orrs	r3, r2
 800417a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004182:	4313      	orrs	r3, r2
 8004184:	b29a      	uxth	r2, r3
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	4313      	orrs	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004190:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <HAL_I2S_Init+0x278>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_I2S_Init+0x24c>
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_I2S_Init+0x27c>)
 800419e:	e001      	b.n	80041a4 <HAL_I2S_Init+0x250>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a4:	897a      	ldrh	r2, [r7, #10]
 80041a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	080042a3 	.word	0x080042a3
 80041c4:	cccccccd 	.word	0xcccccccd
 80041c8:	080043b9 	.word	0x080043b9
 80041cc:	40003800 	.word	0x40003800
 80041d0:	40003400 	.word	0x40003400

080041d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10e      	bne.n	800423c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800422c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd ff80 	bl	800213c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	b292      	uxth	r2, r2
 8004258:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10e      	bne.n	800429a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800428a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff9d 	bl	80041d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d13a      	bne.n	8004334 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d109      	bne.n	80042dc <I2S_IRQHandler+0x3a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d102      	bne.n	80042dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffb4 	bl	8004244 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d126      	bne.n	8004334 <I2S_IRQHandler+0x92>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d11f      	bne.n	8004334 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004302:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f043 0202 	orr.w	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd ff30 	bl	8002194 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b03      	cmp	r3, #3
 800433e:	d136      	bne.n	80043ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d109      	bne.n	800435e <I2S_IRQHandler+0xbc>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d102      	bne.n	800435e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff45 	bl	80041e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d122      	bne.n	80043ae <I2S_IRQHandler+0x10c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b20      	cmp	r3, #32
 8004374:	d11b      	bne.n	80043ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004384:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fd fef3 	bl	8002194 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a92      	ldr	r2, [pc, #584]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043d2:	4b92      	ldr	r3, [pc, #584]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d4:	e001      	b.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80043d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a8b      	ldr	r2, [pc, #556]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043f0:	4b8a      	ldr	r3, [pc, #552]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f2:	e001      	b.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004404:	d004      	beq.n	8004410 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 8099 	bne.w	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d107      	bne.n	800442a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f925 	bl	8004674 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d107      	bne.n	8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9c8 	bl	80047d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d13a      	bne.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d035      	beq.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004462:	4b6e      	ldr	r3, [pc, #440]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004464:	e001      	b.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4969      	ldr	r1, [pc, #420]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004472:	428b      	cmp	r3, r1
 8004474:	d101      	bne.n	800447a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004476:	4b69      	ldr	r3, [pc, #420]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004478:	e001      	b.n	800447e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800447a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800447e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004482:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004492:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f043 0202 	orr.w	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd fe68 	bl	8002194 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	f040 80c3 	bne.w	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80bd 	beq.w	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a49      	ldr	r2, [pc, #292]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044f6:	4b49      	ldr	r3, [pc, #292]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044f8:	e001      	b.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4944      	ldr	r1, [pc, #272]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004506:	428b      	cmp	r3, r1
 8004508:	d101      	bne.n	800450e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800450a:	4b44      	ldr	r3, [pc, #272]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800450c:	e001      	b.n	8004512 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800450e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004512:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004516:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004518:	2300      	movs	r3, #0
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd fe2a 	bl	8002194 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004540:	e089      	b.n	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d107      	bne.n	800455c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8be 	bl	80046d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d107      	bne.n	8004576 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8fd 	bl	8004770 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d12f      	bne.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d02a      	beq.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004598:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045a6:	e001      	b.n	80045ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4919      	ldr	r1, [pc, #100]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b4:	428b      	cmp	r3, r1
 80045b6:	d101      	bne.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ba:	e001      	b.n	80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f043 0202 	orr.w	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fdda 	bl	8002194 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d136      	bne.n	8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d031      	beq.n	8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a07      	ldr	r2, [pc, #28]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004600:	e001      	b.n	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4902      	ldr	r1, [pc, #8]	; (8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800460e:	428b      	cmp	r3, r1
 8004610:	d106      	bne.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004612:	4b02      	ldr	r3, [pc, #8]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004614:	e006      	b.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004616:	bf00      	nop
 8004618:	40003800 	.word	0x40003800
 800461c:	40003400 	.word	0x40003400
 8004620:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004628:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004638:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd fda0 	bl	8002194 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004654:	e000      	b.n	8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004656:	bf00      	nop
}
 8004658:	bf00      	nop
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c99      	adds	r1, r3, #2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6251      	str	r1, [r2, #36]	; 0x24
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d113      	bne.n	80046ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ffc9 	bl	8004660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c99      	adds	r1, r3, #2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6251      	str	r1, [r2, #36]	; 0x24
 80046ea:	8819      	ldrh	r1, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <I2SEx_TxISR_I2SExt+0x90>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <I2SEx_TxISR_I2SExt+0x22>
 80046f6:	4b1d      	ldr	r3, [pc, #116]	; (800476c <I2SEx_TxISR_I2SExt+0x94>)
 80046f8:	e001      	b.n	80046fe <I2SEx_TxISR_I2SExt+0x26>
 80046fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046fe:	460a      	mov	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d121      	bne.n	800475e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <I2SEx_TxISR_I2SExt+0x90>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <I2SEx_TxISR_I2SExt+0x50>
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <I2SEx_TxISR_I2SExt+0x94>)
 8004726:	e001      	b.n	800472c <I2SEx_TxISR_I2SExt+0x54>
 8004728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	490d      	ldr	r1, [pc, #52]	; (8004768 <I2SEx_TxISR_I2SExt+0x90>)
 8004734:	428b      	cmp	r3, r1
 8004736:	d101      	bne.n	800473c <I2SEx_TxISR_I2SExt+0x64>
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <I2SEx_TxISR_I2SExt+0x94>)
 800473a:	e001      	b.n	8004740 <I2SEx_TxISR_I2SExt+0x68>
 800473c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004740:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004744:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff81 	bl	8004660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40003800 	.word	0x40003800
 800476c:	40003400 	.word	0x40003400

08004770 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68d8      	ldr	r0, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	1c99      	adds	r1, r3, #2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004788:	b282      	uxth	r2, r0
 800478a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d113      	bne.n	80047cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ff4a 	bl	8004660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <I2SEx_RxISR_I2SExt+0x90>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <I2SEx_RxISR_I2SExt+0x16>
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <I2SEx_RxISR_I2SExt+0x94>)
 80047e8:	e001      	b.n	80047ee <I2SEx_RxISR_I2SExt+0x1a>
 80047ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ee:	68d8      	ldr	r0, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	1c99      	adds	r1, r3, #2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047fa:	b282      	uxth	r2, r0
 80047fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d121      	bne.n	800485a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <I2SEx_RxISR_I2SExt+0x90>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <I2SEx_RxISR_I2SExt+0x50>
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <I2SEx_RxISR_I2SExt+0x94>)
 8004822:	e001      	b.n	8004828 <I2SEx_RxISR_I2SExt+0x54>
 8004824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	490d      	ldr	r1, [pc, #52]	; (8004864 <I2SEx_RxISR_I2SExt+0x90>)
 8004830:	428b      	cmp	r3, r1
 8004832:	d101      	bne.n	8004838 <I2SEx_RxISR_I2SExt+0x64>
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <I2SEx_RxISR_I2SExt+0x94>)
 8004836:	e001      	b.n	800483c <I2SEx_RxISR_I2SExt+0x68>
 8004838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004840:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff03 	bl	8004660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40003800 	.word	0x40003800
 8004868:	40003400 	.word	0x40003400

0800486c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486e:	b08f      	sub	sp, #60	; 0x3c
 8004870:	af0a      	add	r7, sp, #40	; 0x28
 8004872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e10f      	b.n	8004a9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f007 f9d1 	bl	800bc40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2203      	movs	r2, #3
 80048a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 fe64 	bl	800858a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	687e      	ldr	r6, [r7, #4]
 80048ca:	466d      	mov	r5, sp
 80048cc:	f106 0410 	add.w	r4, r6, #16
 80048d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80048e0:	1d33      	adds	r3, r6, #4
 80048e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e4:	6838      	ldr	r0, [r7, #0]
 80048e6:	f003 fd3b 	bl	8008360 <USB_CoreInit>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0d0      	b.n	8004a9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f003 fe52 	bl	80085ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
 800490c:	e04a      	b.n	80049a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	333d      	adds	r3, #61	; 0x3d
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	333c      	adds	r3, #60	; 0x3c
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004936:	7bfa      	ldrb	r2, [r7, #15]
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	b298      	uxth	r0, r3
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3344      	adds	r3, #68	; 0x44
 800494a:	4602      	mov	r2, r0
 800494c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	3340      	adds	r3, #64	; 0x40
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	3348      	adds	r3, #72	; 0x48
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	334c      	adds	r3, #76	; 0x4c
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3354      	adds	r3, #84	; 0x54
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	3301      	adds	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3af      	bcc.n	800490e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	e044      	b.n	8004a3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049b4:	7bfa      	ldrb	r2, [r7, #15]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a0c:	7bfa      	ldrb	r2, [r7, #15]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3b5      	bcc.n	80049b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	687e      	ldr	r6, [r7, #4]
 8004a50:	466d      	mov	r5, sp
 8004a52:	f106 0410 	add.w	r4, r6, #16
 8004a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a66:	1d33      	adds	r3, r6, #4
 8004a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a6a:	6838      	ldr	r0, [r7, #0]
 8004a6c:	f003 fdea 	bl	8008644 <USB_DevInit>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e00d      	b.n	8004a9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 ff39 	bl	800990e <USB_DevDisconnect>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_PCD_Start+0x1c>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e020      	b.n	8004b04 <HAL_PCD_Start+0x5e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d109      	bne.n	8004ae6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d005      	beq.n	8004ae6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 fd3c 	bl	8008568 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f004 fee9 	bl	80098cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b08d      	sub	sp, #52	; 0x34
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f004 ffa7 	bl	8009a76 <USB_GetMode>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 848a 	bne.w	8005444 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f004 ff0b 	bl	8009950 <USB_ReadInterrupts>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8480 	beq.w	8005442 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f004 fef8 	bl	8009950 <USB_ReadInterrupts>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d107      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f002 0202 	and.w	r2, r2, #2
 8004b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f004 fee6 	bl	8009950 <USB_ReadInterrupts>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d161      	bne.n	8004c52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0210 	bic.w	r2, r2, #16
 8004b9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	3304      	adds	r3, #4
 8004bbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	0c5b      	lsrs	r3, r3, #17
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d124      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d035      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	6a38      	ldr	r0, [r7, #32]
 8004bea:	f004 fd1d 	bl	8009628 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bfa:	441a      	add	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c0c:	441a      	add	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	621a      	str	r2, [r3, #32]
 8004c12:	e016      	b.n	8004c42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	0c5b      	lsrs	r3, r3, #17
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d110      	bne.n	8004c42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c26:	2208      	movs	r2, #8
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6a38      	ldr	r0, [r7, #32]
 8004c2c:	f004 fcfc 	bl	8009628 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0210 	orr.w	r2, r2, #16
 8004c50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f004 fe7a 	bl	8009950 <USB_ReadInterrupts>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c66:	f040 80a7 	bne.w	8004db8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 fe7f 	bl	8009976 <USB_ReadDevAllOutEpInterrupt>
 8004c78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004c7a:	e099      	b.n	8004db0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 808e 	beq.w	8004da4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f004 fea3 	bl	80099de <USB_ReadDevOutEPInterrupt>
 8004c98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fec3 	bl	8005a44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 ff99 	bl	8005c14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d030      	beq.n	8004d6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d109      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	78db      	ldrb	r3, [r3, #3]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d108      	bne.n	8004d58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f007 f87a 	bl	800be4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	461a      	mov	r2, r3
 8004d66:	2302      	movs	r3, #2
 8004d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	2320      	movs	r3, #32
 8004d84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	3301      	adds	r3, #1
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f47f af62 	bne.w	8004c7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fdc7 	bl	8009950 <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dcc:	f040 80db 	bne.w	8004f86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 fde8 	bl	80099aa <USB_ReadDevAllInEpInterrupt>
 8004dda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004de0:	e0cd      	b.n	8004f7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80c2 	beq.w	8004f72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f004 fe0e 	bl	8009a1a <USB_ReadDevInEPInterrupt>
 8004dfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d057      	beq.n	8004eba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	2201      	movs	r2, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69f9      	ldr	r1, [r7, #28]
 8004e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d132      	bne.n	8004eae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	334c      	adds	r3, #76	; 0x4c
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	4613      	mov	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4403      	add	r3, r0
 8004e68:	3348      	adds	r3, #72	; 0x48
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4419      	add	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4403      	add	r3, r0
 8004e7c:	334c      	adds	r3, #76	; 0x4c
 8004e7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d113      	bne.n	8004eae <HAL_PCD_IRQHandler+0x3a2>
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3354      	adds	r3, #84	; 0x54
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d108      	bne.n	8004eae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	f004 fe15 	bl	8009ad8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f006 ff44 	bl	800bd42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	461a      	mov	r2, r3
 8004eee:	2310      	movs	r3, #16
 8004ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2340      	movs	r3, #64	; 0x40
 8004f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d023      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1a:	6a38      	ldr	r0, [r7, #32]
 8004f1c:	f003 fcf6 	bl	800890c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3338      	adds	r3, #56	; 0x38
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3304      	adds	r3, #4
 8004f32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	78db      	ldrb	r3, [r3, #3]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d108      	bne.n	8004f4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f006 ff91 	bl	800be70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fcdb 	bl	8005928 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	3301      	adds	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f47f af2e 	bne.w	8004de2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 fce0 	bl	8009950 <USB_ReadInterrupts>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9a:	d122      	bne.n	8004fe2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d108      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fec3 	bl	8005d50 <HAL_PCDEx_LPM_Callback>
 8004fca:	e002      	b.n	8004fd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f006 ff2f 	bl	800be30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695a      	ldr	r2, [r3, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f004 fcb2 	bl	8009950 <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	d112      	bne.n	800501e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d102      	bne.n	800500e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f006 feeb 	bl	800bde4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800501c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f004 fc94 	bl	8009950 <USB_ReadInterrupts>
 8005028:	4603      	mov	r3, r0
 800502a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005032:	f040 80b7 	bne.w	80051a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2110      	movs	r1, #16
 8005050:	4618      	mov	r0, r3
 8005052:	f003 fc5b 	bl	800890c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005056:	2300      	movs	r3, #0
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505a:	e046      	b.n	80050ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	461a      	mov	r2, r3
 800506a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800506e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800508e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	461a      	mov	r2, r3
 800509e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	3301      	adds	r3, #1
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3b3      	bcc.n	800505c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005102:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005106:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b00      	cmp	r3, #0
 800510e:	d016      	beq.n	800513e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005120:	f043 030b 	orr.w	r3, r3, #11
 8005124:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005136:	f043 030b 	orr.w	r3, r3, #11
 800513a:	6453      	str	r3, [r2, #68]	; 0x44
 800513c:	e015      	b.n	800516a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005150:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005154:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005164:	f043 030b 	orr.w	r3, r3, #11
 8005168:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005178:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800517c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800518e:	461a      	mov	r2, r3
 8005190:	f004 fca2 	bl	8009ad8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80051a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fbd1 	bl	8009950 <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b8:	d124      	bne.n	8005204 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fc67 	bl	8009a92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f003 fc1c 	bl	8008a06 <USB_GetDevSpeed>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681c      	ldr	r4, [r3, #0]
 80051da:	f001 fa29 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 80051de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	4620      	mov	r0, r4
 80051ea:	f003 f91b 	bl	8008424 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f006 fdcf 	bl	800bd92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005202:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f004 fba1 	bl	8009950 <USB_ReadInterrupts>
 800520e:	4603      	mov	r3, r0
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10a      	bne.n	800522e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f006 fdac 	bl	800bd76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f002 0208 	and.w	r2, r2, #8
 800522c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f004 fb8c 	bl	8009950 <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d122      	bne.n	8005288 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800524e:	2301      	movs	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
 8005252:	e014      	b.n	800527e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d105      	bne.n	8005278 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	b2db      	uxtb	r3, r3
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fb27 	bl	80058c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	3301      	adds	r3, #1
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	429a      	cmp	r2, r3
 8005286:	d3e5      	bcc.n	8005254 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f004 fb5f 	bl	8009950 <USB_ReadInterrupts>
 8005292:	4603      	mov	r3, r0
 8005294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529c:	d13b      	bne.n	8005316 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800529e:	2301      	movs	r3, #1
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	e02b      	b.n	80052fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3340      	adds	r3, #64	; 0x40
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d115      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80052ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	da12      	bge.n	80052f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	333f      	adds	r3, #63	; 0x3f
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fae8 	bl	80058c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	429a      	cmp	r2, r3
 8005304:	d3ce      	bcc.n	80052a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f004 fb18 	bl	8009950 <USB_ReadInterrupts>
 8005320:	4603      	mov	r3, r0
 8005322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800532a:	d155      	bne.n	80053d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800532c:	2301      	movs	r3, #1
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	e045      	b.n	80053be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d12e      	bne.n	80053b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800535a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800535c:	2b00      	cmp	r3, #0
 800535e:	da2b      	bge.n	80053b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800536c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005370:	429a      	cmp	r2, r3
 8005372:	d121      	bne.n	80053b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053b4:	6053      	str	r3, [r2, #4]
            break;
 80053b6:	e007      	b.n	80053c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d3b4      	bcc.n	8005332 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80053d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f004 fab7 	bl	8009950 <USB_ReadInterrupts>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d10a      	bne.n	8005404 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f006 fd50 	bl	800be94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f004 faa1 	bl	8009950 <USB_ReadInterrupts>
 800540e:	4603      	mov	r3, r0
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d115      	bne.n	8005444 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f006 fd40 	bl	800beb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	e000      	b.n	8005444 <HAL_PCD_IRQHandler+0x938>
      return;
 8005442:	bf00      	nop
    }
  }
}
 8005444:	3734      	adds	r7, #52	; 0x34
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}

0800544a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_PCD_SetAddress+0x1a>
 8005460:	2302      	movs	r3, #2
 8005462:	e013      	b.n	800548c <HAL_PCD_SetAddress+0x42>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f004 f9ff 	bl	8009880 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	70fb      	strb	r3, [r7, #3]
 80054a6:	460b      	mov	r3, r1
 80054a8:	803b      	strh	r3, [r7, #0]
 80054aa:	4613      	mov	r3, r2
 80054ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da0f      	bge.n	80054da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	3338      	adds	r3, #56	; 0x38
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	3304      	adds	r3, #4
 80054d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	705a      	strb	r2, [r3, #1]
 80054d8:	e00f      	b.n	80054fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	3304      	adds	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005506:	883a      	ldrh	r2, [r7, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	78ba      	ldrb	r2, [r7, #2]
 8005510:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005524:	78bb      	ldrb	r3, [r7, #2]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d102      	bne.n	8005530 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_PCD_EP_Open+0xaa>
 800553a:	2302      	movs	r3, #2
 800553c:	e00e      	b.n	800555c <HAL_PCD_EP_Open+0xc8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	4618      	mov	r0, r3
 800554e:	f003 fa7f 	bl	8008a50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800555a:	7afb      	ldrb	r3, [r7, #11]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da0f      	bge.n	8005598 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	3338      	adds	r3, #56	; 0x38
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	3304      	adds	r3, #4
 800558e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	705a      	strb	r2, [r3, #1]
 8005596:	e00f      	b.n	80055b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 020f 	and.w	r2, r3, #15
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4413      	add	r3, r2
 80055ae:	3304      	adds	r3, #4
 80055b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_PCD_EP_Close+0x6e>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e00e      	b.n	80055f0 <HAL_PCD_EP_Close+0x8c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68f9      	ldr	r1, [r7, #12]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f003 fabd 	bl	8008b60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	460b      	mov	r3, r1
 8005606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005608:	7afb      	ldrb	r3, [r7, #11]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	3304      	adds	r3, #4
 8005620:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	b2da      	uxtb	r2, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d102      	bne.n	8005654 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	6979      	ldr	r1, [r7, #20]
 800566c:	f003 fd9c 	bl	80091a8 <USB_EP0StartXfer>
 8005670:	e008      	b.n	8005684 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	f003 fb4a 	bl	8008d18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80056b0:	681b      	ldr	r3, [r3, #0]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b086      	sub	sp, #24
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	460b      	mov	r3, r1
 80056cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	f003 020f 	and.w	r2, r3, #15
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	3338      	adds	r3, #56	; 0x38
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	3304      	adds	r3, #4
 80056e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2201      	movs	r2, #1
 80056fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	b2da      	uxtb	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d102      	bne.n	8005718 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005718:	7afb      	ldrb	r3, [r7, #11]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	f003 fd3a 	bl	80091a8 <USB_EP0StartXfer>
 8005734:	e008      	b.n	8005748 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	f003 fae8 	bl	8008d18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d901      	bls.n	8005770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e050      	b.n	8005812 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005774:	2b00      	cmp	r3, #0
 8005776:	da0f      	bge.n	8005798 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	f003 020f 	and.w	r2, r3, #15
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	3338      	adds	r3, #56	; 0x38
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	3304      	adds	r3, #4
 800578e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	705a      	strb	r2, [r3, #1]
 8005796:	e00d      	b.n	80057b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	3304      	adds	r3, #4
 80057ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_PCD_EP_SetStall+0x82>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e01e      	b.n	8005812 <HAL_PCD_EP_SetStall+0xc0>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68f9      	ldr	r1, [r7, #12]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f003 ff78 	bl	80096d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	b2d9      	uxtb	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005802:	461a      	mov	r2, r3
 8005804:	f004 f968 	bl	8009ad8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d901      	bls.n	8005838 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e042      	b.n	80058be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800583c:	2b00      	cmp	r3, #0
 800583e:	da0f      	bge.n	8005860 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3338      	adds	r3, #56	; 0x38
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	705a      	strb	r2, [r3, #1]
 800585e:	e00f      	b.n	8005880 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_PCD_EP_ClrStall+0x86>
 800589c:	2302      	movs	r3, #2
 800589e:	e00e      	b.n	80058be <HAL_PCD_EP_ClrStall+0xa4>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f003 ff80 	bl	80097b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80058d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da0c      	bge.n	80058f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	3338      	adds	r3, #56	; 0x38
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	3304      	adds	r3, #4
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e00c      	b.n	800590e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f003 020f 	and.w	r2, r3, #15
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	4413      	add	r3, r2
 800590a:	3304      	adds	r3, #4
 800590c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	4618      	mov	r0, r3
 8005916:	f003 fd9f 	bl	8009458 <USB_EPStopXfer>
 800591a:	4603      	mov	r3, r0
 800591c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800591e:	7afb      	ldrb	r3, [r7, #11]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af02      	add	r7, sp, #8
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	3338      	adds	r3, #56	; 0x38
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4413      	add	r3, r2
 800594c:	3304      	adds	r3, #4
 800594e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	429a      	cmp	r2, r3
 800595a:	d901      	bls.n	8005960 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e06c      	b.n	8005a3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	429a      	cmp	r2, r3
 8005974:	d902      	bls.n	800597c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3303      	adds	r3, #3
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005984:	e02b      	b.n	80059de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	429a      	cmp	r2, r3
 800599a:	d902      	bls.n	80059a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3303      	adds	r3, #3
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6919      	ldr	r1, [r3, #16]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	4603      	mov	r3, r0
 80059c0:	6978      	ldr	r0, [r7, #20]
 80059c2:	f003 fdf3 	bl	80095ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	441a      	add	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	441a      	add	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d809      	bhi.n	8005a08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d203      	bcs.n	8005a08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1be      	bne.n	8005986 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d811      	bhi.n	8005a38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a34:	4013      	ands	r3, r2
 8005a36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	333c      	adds	r3, #60	; 0x3c
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d17b      	bne.n	8005b72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4a61      	ldr	r2, [pc, #388]	; (8005c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	f240 80b9 	bls.w	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80b3 	beq.w	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aac:	6093      	str	r3, [r2, #8]
 8005aae:	e0a7      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2320      	movs	r3, #32
 8005aca:	6093      	str	r3, [r2, #8]
 8005acc:	e098      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 8093 	bne.w	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4a4b      	ldr	r2, [pc, #300]	; (8005c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d90f      	bls.n	8005b02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	461a      	mov	r2, r3
 8005afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	e07e      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	0159      	lsls	r1, r3, #5
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	440b      	add	r3, r1
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d114      	bne.n	8005b64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2101      	movs	r1, #1
 8005b50:	f003 ffc2 	bl	8009ad8 <USB_EP0_OutStart>
 8005b54:	e006      	b.n	8005b64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	441a      	add	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f006 f8ce 	bl	800bd0c <HAL_PCD_DataOutStageCallback>
 8005b70:	e046      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d124      	bne.n	8005bc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	6093      	str	r3, [r2, #8]
 8005b98:	e032      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2320      	movs	r3, #32
 8005bb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f006 f8a5 	bl	800bd0c <HAL_PCD_DataOutStageCallback>
 8005bc2:	e01d      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d114      	bne.n	8005bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bec:	461a      	mov	r2, r3
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f003 ff72 	bl	8009ad8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f006 f886 	bl	800bd0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	4f54300a 	.word	0x4f54300a
 8005c10:	4f54310a 	.word	0x4f54310a

08005c14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	333c      	adds	r3, #60	; 0x3c
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d90e      	bls.n	8005c68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	461a      	mov	r2, r3
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f006 f83d 	bl	800bce8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d90c      	bls.n	8005c90 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d108      	bne.n	8005c90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	f003 ff24 	bl	8009ad8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	4f54300a 	.word	0x4f54300a

08005ca0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
 8005cac:	4613      	mov	r3, r2
 8005cae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005cbe:	883b      	ldrh	r3, [r7, #0]
 8005cc0:	0419      	lsls	r1, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ccc:	e028      	b.n	8005d20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]
 8005ce0:	e00d      	b.n	8005cfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	3340      	adds	r3, #64	; 0x40
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	7bfa      	ldrb	r2, [r7, #15]
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3ec      	bcc.n	8005ce2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d08:	883b      	ldrh	r3, [r7, #0]
 8005d0a:	0418      	lsls	r0, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	4302      	orrs	r2, r0
 8005d18:	3340      	adds	r3, #64	; 0x40
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	887a      	ldrh	r2, [r7, #2]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e267      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d075      	beq.n	8005e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d86:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00c      	beq.n	8005dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d92:	4b85      	ldr	r3, [pc, #532]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d112      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9e:	4b82      	ldr	r3, [pc, #520]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dac:	4b7e      	ldr	r3, [pc, #504]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05b      	beq.n	8005e70 <HAL_RCC_OscConfig+0x108>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d157      	bne.n	8005e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e242      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d106      	bne.n	8005ddc <HAL_RCC_OscConfig+0x74>
 8005dce:	4b76      	ldr	r3, [pc, #472]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a75      	ldr	r2, [pc, #468]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e01d      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x98>
 8005de6:	4b70      	ldr	r3, [pc, #448]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6f      	ldr	r2, [pc, #444]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	4b6d      	ldr	r3, [pc, #436]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6c      	ldr	r2, [pc, #432]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005e00:	4b69      	ldr	r3, [pc, #420]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a68      	ldr	r2, [pc, #416]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b66      	ldr	r3, [pc, #408]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a65      	ldr	r2, [pc, #404]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fd face 	bl	80033c0 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fd faca 	bl	80033c0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	; 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e207      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0xc0>
 8005e46:	e014      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd faba 	bl	80033c0 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd fab6 	bl	80033c0 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1f3      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e62:	4b51      	ldr	r3, [pc, #324]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0xe8>
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d063      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8a:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d11c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e96:	4b44      	ldr	r3, [pc, #272]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d116      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x152>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d001      	beq.n	8005eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e1c7      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4937      	ldr	r1, [pc, #220]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ece:	e03a      	b.n	8005f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed8:	4b34      	ldr	r3, [pc, #208]	; (8005fac <HAL_RCC_OscConfig+0x244>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ede:	f7fd fa6f 	bl	80033c0 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee6:	f7fd fa6b 	bl	80033c0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e1a8      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f04:	4b28      	ldr	r3, [pc, #160]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4925      	ldr	r1, [pc, #148]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
 8005f18:	e015      	b.n	8005f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1a:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCC_OscConfig+0x244>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f20:	f7fd fa4e 	bl	80033c0 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f28:	f7fd fa4a 	bl	80033c0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e187      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d036      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <HAL_RCC_OscConfig+0x248>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fd fa2e 	bl	80033c0 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f68:	f7fd fa2a 	bl	80033c0 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e167      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x200>
 8005f86:	e01b      	b.n	8005fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_RCC_OscConfig+0x248>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8e:	f7fd fa17 	bl	80033c0 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f94:	e00e      	b.n	8005fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f96:	f7fd fa13 	bl	80033c0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d907      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e150      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	42470000 	.word	0x42470000
 8005fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb4:	4b88      	ldr	r3, [pc, #544]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ea      	bne.n	8005f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8097 	beq.w	80060fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd2:	4b81      	ldr	r3, [pc, #516]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	4a7c      	ldr	r2, [pc, #496]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fec:	6413      	str	r3, [r2, #64]	; 0x40
 8005fee:	4b7a      	ldr	r3, [pc, #488]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffe:	4b77      	ldr	r3, [pc, #476]	; (80061dc <HAL_RCC_OscConfig+0x474>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d118      	bne.n	800603c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600a:	4b74      	ldr	r3, [pc, #464]	; (80061dc <HAL_RCC_OscConfig+0x474>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a73      	ldr	r2, [pc, #460]	; (80061dc <HAL_RCC_OscConfig+0x474>)
 8006010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006016:	f7fd f9d3 	bl	80033c0 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601e:	f7fd f9cf 	bl	80033c0 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e10c      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006030:	4b6a      	ldr	r3, [pc, #424]	; (80061dc <HAL_RCC_OscConfig+0x474>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <HAL_RCC_OscConfig+0x2ea>
 8006044:	4b64      	ldr	r3, [pc, #400]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	4a63      	ldr	r2, [pc, #396]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6713      	str	r3, [r2, #112]	; 0x70
 8006050:	e01c      	b.n	800608c <HAL_RCC_OscConfig+0x324>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b05      	cmp	r3, #5
 8006058:	d10c      	bne.n	8006074 <HAL_RCC_OscConfig+0x30c>
 800605a:	4b5f      	ldr	r3, [pc, #380]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	4a5e      	ldr	r2, [pc, #376]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006060:	f043 0304 	orr.w	r3, r3, #4
 8006064:	6713      	str	r3, [r2, #112]	; 0x70
 8006066:	4b5c      	ldr	r3, [pc, #368]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	4a5b      	ldr	r2, [pc, #364]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	6713      	str	r3, [r2, #112]	; 0x70
 8006072:	e00b      	b.n	800608c <HAL_RCC_OscConfig+0x324>
 8006074:	4b58      	ldr	r3, [pc, #352]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	4a57      	ldr	r2, [pc, #348]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	; 0x70
 8006080:	4b55      	ldr	r3, [pc, #340]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a54      	ldr	r2, [pc, #336]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fd f994 	bl	80033c0 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fd f990 	bl	80033c0 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0cb      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	4b49      	ldr	r3, [pc, #292]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0ee      	beq.n	800609c <HAL_RCC_OscConfig+0x334>
 80060be:	e014      	b.n	80060ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fd f97e 	bl	80033c0 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f7fd f97a 	bl	80033c0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e0b5      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060de:	4b3e      	ldr	r3, [pc, #248]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ee      	bne.n	80060c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d105      	bne.n	80060fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f0:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	4a38      	ldr	r2, [pc, #224]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a1 	beq.w	8006248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006106:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b08      	cmp	r3, #8
 8006110:	d05c      	beq.n	80061cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d141      	bne.n	800619e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <HAL_RCC_OscConfig+0x478>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fd f94e 	bl	80033c0 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006128:	f7fd f94a 	bl	80033c0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e087      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613a:	4b27      	ldr	r3, [pc, #156]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	019b      	lsls	r3, r3, #6
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	3b01      	subs	r3, #1
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	491b      	ldr	r1, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006170:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <HAL_RCC_OscConfig+0x478>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006176:	f7fd f923 	bl	80033c0 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800617e:	f7fd f91f 	bl	80033c0 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e05c      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x416>
 800619c:	e054      	b.n	8006248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <HAL_RCC_OscConfig+0x478>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fd f90c 	bl	80033c0 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fd f908 	bl	80033c0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e045      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <HAL_RCC_OscConfig+0x470>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x444>
 80061ca:	e03d      	b.n	8006248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e038      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40007000 	.word	0x40007000
 80061e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <HAL_RCC_OscConfig+0x4ec>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d028      	beq.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d121      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d11a      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800621a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800621c:	4293      	cmp	r3, r2
 800621e:	d111      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d107      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800

08006258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0cc      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4b68      	ldr	r3, [pc, #416]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d90c      	bls.n	8006294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b65      	ldr	r3, [pc, #404]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b63      	ldr	r3, [pc, #396]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0b8      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d020      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062ac:	4b59      	ldr	r3, [pc, #356]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a58      	ldr	r2, [pc, #352]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c4:	4b53      	ldr	r3, [pc, #332]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a52      	ldr	r2, [pc, #328]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d0:	4b50      	ldr	r3, [pc, #320]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	494d      	ldr	r1, [pc, #308]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d044      	beq.n	8006378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d107      	bne.n	8006306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	4b47      	ldr	r3, [pc, #284]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d119      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e07f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d003      	beq.n	8006316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006312:	2b03      	cmp	r3, #3
 8006314:	d107      	bne.n	8006326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e06f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006326:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e067      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006336:	4b37      	ldr	r3, [pc, #220]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4934      	ldr	r1, [pc, #208]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	4313      	orrs	r3, r2
 8006346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006348:	f7fd f83a 	bl	80033c0 <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	e00a      	b.n	8006366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006350:	f7fd f836 	bl	80033c0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	; 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e04f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 020c 	and.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	429a      	cmp	r2, r3
 8006376:	d1eb      	bne.n	8006350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d20c      	bcs.n	80063a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b22      	ldr	r3, [pc, #136]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e032      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ac:	4b19      	ldr	r3, [pc, #100]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4916      	ldr	r1, [pc, #88]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ca:	4b12      	ldr	r3, [pc, #72]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	490e      	ldr	r1, [pc, #56]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063de:	f000 f821 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	490a      	ldr	r1, [pc, #40]	; (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 80063f0:	5ccb      	ldrb	r3, [r1, r3]
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_RCC_ClockConfig+0x1c8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fc ff9a 	bl	8003338 <HAL_InitTick>

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40023c00 	.word	0x40023c00
 8006414:	40023800 	.word	0x40023800
 8006418:	0800ef94 	.word	0x0800ef94
 800641c:	20000014 	.word	0x20000014
 8006420:	20000018 	.word	0x20000018

08006424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b094      	sub	sp, #80	; 0x50
 800642a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	647b      	str	r3, [r7, #68]	; 0x44
 8006430:	2300      	movs	r3, #0
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	2300      	movs	r3, #0
 8006436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
 8006444:	2b08      	cmp	r3, #8
 8006446:	d00d      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x40>
 8006448:	2b08      	cmp	r3, #8
 800644a:	f200 80e1 	bhi.w	8006610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x34>
 8006452:	2b04      	cmp	r3, #4
 8006454:	d003      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x3a>
 8006456:	e0db      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006458:	4b73      	ldr	r3, [pc, #460]	; (8006628 <HAL_RCC_GetSysClockFreq+0x204>)
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800645c:	e0db      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800645e:	4b73      	ldr	r3, [pc, #460]	; (800662c <HAL_RCC_GetSysClockFreq+0x208>)
 8006460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006462:	e0d8      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006464:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800646c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800646e:	4b6d      	ldr	r3, [pc, #436]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d063      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647a:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	099b      	lsrs	r3, r3, #6
 8006480:	2200      	movs	r2, #0
 8006482:	63bb      	str	r3, [r7, #56]	; 0x38
 8006484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	633b      	str	r3, [r7, #48]	; 0x30
 800648e:	2300      	movs	r3, #0
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
 8006492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	f04f 0000 	mov.w	r0, #0
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	0159      	lsls	r1, r3, #5
 80064a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a8:	0150      	lsls	r0, r2, #5
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4621      	mov	r1, r4
 80064b0:	1a51      	subs	r1, r2, r1
 80064b2:	6139      	str	r1, [r7, #16]
 80064b4:	4629      	mov	r1, r5
 80064b6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c8:	4659      	mov	r1, fp
 80064ca:	018b      	lsls	r3, r1, #6
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064d2:	4651      	mov	r1, sl
 80064d4:	018a      	lsls	r2, r1, #6
 80064d6:	4651      	mov	r1, sl
 80064d8:	ebb2 0801 	subs.w	r8, r2, r1
 80064dc:	4659      	mov	r1, fp
 80064de:	eb63 0901 	sbc.w	r9, r3, r1
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064f6:	4690      	mov	r8, r2
 80064f8:	4699      	mov	r9, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	eb18 0303 	adds.w	r3, r8, r3
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	462b      	mov	r3, r5
 8006504:	eb49 0303 	adc.w	r3, r9, r3
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006516:	4629      	mov	r1, r5
 8006518:	024b      	lsls	r3, r1, #9
 800651a:	4621      	mov	r1, r4
 800651c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006520:	4621      	mov	r1, r4
 8006522:	024a      	lsls	r2, r1, #9
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652a:	2200      	movs	r2, #0
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
 800652e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006534:	f7fa fb90 	bl	8000c58 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	e058      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b38      	ldr	r3, [pc, #224]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	4618      	mov	r0, r3
 800654c:	4611      	mov	r1, r2
 800654e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	2300      	movs	r3, #0
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	f04f 0000 	mov.w	r0, #0
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	0159      	lsls	r1, r3, #5
 800656a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800656e:	0150      	lsls	r0, r2, #5
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4641      	mov	r1, r8
 8006576:	ebb2 0a01 	subs.w	sl, r2, r1
 800657a:	4649      	mov	r1, r9
 800657c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800658c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006594:	ebb2 040a 	subs.w	r4, r2, sl
 8006598:	eb63 050b 	sbc.w	r5, r3, fp
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	00eb      	lsls	r3, r5, #3
 80065a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065aa:	00e2      	lsls	r2, r4, #3
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	4643      	mov	r3, r8
 80065b2:	18e3      	adds	r3, r4, r3
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	464b      	mov	r3, r9
 80065b8:	eb45 0303 	adc.w	r3, r5, r3
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065de:	2200      	movs	r2, #0
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e8:	f7fa fb36 	bl	8000c58 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4613      	mov	r3, r2
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	3301      	adds	r3, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800660e:	e002      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <HAL_RCC_GetSysClockFreq+0x204>)
 8006612:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006618:	4618      	mov	r0, r3
 800661a:	3750      	adds	r7, #80	; 0x50
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400
 800662c:	007a1200 	.word	0x007a1200

08006630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000014 	.word	0x20000014

08006648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a9b      	lsrs	r3, r3, #10
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	; (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800efa4 	.word	0x0800efa4

08006670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006674:	f7ff ffdc 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0b5b      	lsrs	r3, r3, #13
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	; (8006694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800efa4 	.word	0x0800efa4

08006698 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d035      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066c0:	4b67      	ldr	r3, [pc, #412]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066c6:	f7fc fe7b 	bl	80033c0 <HAL_GetTick>
 80066ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066cc:	e008      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ce:	f7fc fe77 	bl	80033c0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e0ba      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e0:	4b60      	ldr	r3, [pc, #384]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f0      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	019a      	lsls	r2, r3, #6
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	071b      	lsls	r3, r3, #28
 80066f8:	495a      	ldr	r1, [pc, #360]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006700:	4b57      	ldr	r3, [pc, #348]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006706:	f7fc fe5b 	bl	80033c0 <HAL_GetTick>
 800670a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800670e:	f7fc fe57 	bl	80033c0 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e09a      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006720:	4b50      	ldr	r3, [pc, #320]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8083 	beq.w	8006840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	4b49      	ldr	r3, [pc, #292]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	4a48      	ldr	r2, [pc, #288]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006748:	6413      	str	r3, [r2, #64]	; 0x40
 800674a:	4b46      	ldr	r3, [pc, #280]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006756:	4b44      	ldr	r3, [pc, #272]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a43      	ldr	r2, [pc, #268]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006760:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006762:	f7fc fe2d 	bl	80033c0 <HAL_GetTick>
 8006766:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006768:	e008      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800676a:	f7fc fe29 	bl	80033c0 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e06c      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800677c:	4b3a      	ldr	r3, [pc, #232]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006788:	4b36      	ldr	r3, [pc, #216]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006790:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02f      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d028      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067a6:	4b2f      	ldr	r3, [pc, #188]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067b0:	4b2e      	ldr	r3, [pc, #184]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067b6:	4b2d      	ldr	r3, [pc, #180]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067bc:	4a29      	ldr	r2, [pc, #164]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067c2:	4b28      	ldr	r3, [pc, #160]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d114      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067ce:	f7fc fdf7 	bl	80033c0 <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d4:	e00a      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067d6:	f7fc fdf3 	bl	80033c0 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e034      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ec:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ee      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006804:	d10d      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006806:	4b17      	ldr	r3, [pc, #92]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681a:	4912      	ldr	r1, [pc, #72]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800681c:	4313      	orrs	r3, r2
 800681e:	608b      	str	r3, [r1, #8]
 8006820:	e005      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	4a0f      	ldr	r2, [pc, #60]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006828:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800682c:	6093      	str	r3, [r2, #8]
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683a:	490a      	ldr	r1, [pc, #40]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800683c:	4313      	orrs	r3, r2
 800683e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7c1a      	ldrb	r2, [r3, #16]
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006852:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	42470068 	.word	0x42470068
 8006864:	40023800 	.word	0x40023800
 8006868:	40007000 	.word	0x40007000
 800686c:	42470e40 	.word	0x42470e40
 8006870:	424711e0 	.word	0x424711e0

08006874 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d13e      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006892:	4b23      	ldr	r3, [pc, #140]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d12f      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80068a8:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068aa:	617b      	str	r3, [r7, #20]
          break;
 80068ac:	e02f      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068ae:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ba:	d108      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068bc:	4b18      	ldr	r3, [pc, #96]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	e007      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d6:	4a15      	ldr	r2, [pc, #84]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e4:	099b      	lsrs	r3, r3, #6
 80068e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f8:	0f1b      	lsrs	r3, r3, #28
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	fbb2 f3f3 	udiv	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]
          break;
 8006906:	e002      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
          break;
 800690c:	bf00      	nop
        }
      }
      break;
 800690e:	bf00      	nop
    }
  }
  return frequency;
 8006910:	697b      	ldr	r3, [r7, #20]
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40023800 	.word	0x40023800
 8006924:	00bb8000 	.word	0x00bb8000
 8006928:	007a1200 	.word	0x007a1200
 800692c:	00f42400 	.word	0x00f42400

08006930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e07b      	b.n	8006a3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d108      	bne.n	800695c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006952:	d009      	beq.n	8006968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	61da      	str	r2, [r3, #28]
 800695a:	e005      	b.n	8006968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fc f944 	bl	8002c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800699e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ec:	ea42 0103 	orr.w	r1, r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	f003 0104 	and.w	r1, r3, #4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	f003 0210 	and.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e041      	b.n	8006ad8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d106      	bne.n	8006a6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fc f98f 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2202      	movs	r2, #2
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f000 fa83 	bl	8006f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d001      	beq.n	8006af8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e03c      	b.n	8006b72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <HAL_TIM_Base_Start+0xa0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d018      	beq.n	8006b3c <HAL_TIM_Base_Start+0x5c>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b12:	d013      	beq.n	8006b3c <HAL_TIM_Base_Start+0x5c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <HAL_TIM_Base_Start+0xa4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00e      	beq.n	8006b3c <HAL_TIM_Base_Start+0x5c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <HAL_TIM_Base_Start+0xa8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_TIM_Base_Start+0x5c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <HAL_TIM_Base_Start+0xac>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_Base_Start+0x5c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <HAL_TIM_Base_Start+0xb0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d111      	bne.n	8006b60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b06      	cmp	r3, #6
 8006b4c:	d010      	beq.n	8006b70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	e007      	b.n	8006b70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40014000 	.word	0x40014000

08006b94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e097      	b.n	8006cd8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fc f89f 	bl	8002d00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f000 f9cf 	bl	8006f8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	4313      	orrs	r3, r2
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c34:	f023 030c 	bic.w	r3, r3, #12
 8006c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	4313      	orrs	r3, r2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	011a      	lsls	r2, r3, #4
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	031b      	lsls	r3, r3, #12
 8006c64:	4313      	orrs	r3, r2
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4313      	orrs	r3, r2
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cf8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d110      	bne.n	8006d32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d102      	bne.n	8006d1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d16:	7b7b      	ldrb	r3, [r7, #13]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d001      	beq.n	8006d20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e069      	b.n	8006df4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d30:	e031      	b.n	8006d96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d110      	bne.n	8006d5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d102      	bne.n	8006d44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d3e:	7b3b      	ldrb	r3, [r7, #12]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d001      	beq.n	8006d48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e055      	b.n	8006df4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d58:	e01d      	b.n	8006d96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d108      	bne.n	8006d72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d105      	bne.n	8006d72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d66:	7b7b      	ldrb	r3, [r7, #13]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d102      	bne.n	8006d72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d6c:	7b3b      	ldrb	r3, [r7, #12]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d001      	beq.n	8006d76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e03e      	b.n	8006df4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_TIM_Encoder_Start+0xc4>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d008      	beq.n	8006db4 <HAL_TIM_Encoder_Start+0xd4>
 8006da2:	e00f      	b.n	8006dc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2201      	movs	r2, #1
 8006daa:	2100      	movs	r1, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fa07 	bl	80071c0 <TIM_CCxChannelCmd>
      break;
 8006db2:	e016      	b.n	8006de2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2201      	movs	r2, #1
 8006dba:	2104      	movs	r1, #4
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f9ff 	bl	80071c0 <TIM_CCxChannelCmd>
      break;
 8006dc2:	e00e      	b.n	8006de2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 f9f7 	bl	80071c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2104      	movs	r1, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f9f0 	bl	80071c0 <TIM_CCxChannelCmd>
      break;
 8006de0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIM_ConfigClockSource+0x1c>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0b4      	b.n	8006f82 <HAL_TIM_ConfigClockSource+0x186>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e50:	d03e      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	f200 8087 	bhi.w	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5e:	f000 8086 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x172>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d87f      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b70      	cmp	r3, #112	; 0x70
 8006e6a:	d01a      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8006e6c:	2b70      	cmp	r3, #112	; 0x70
 8006e6e:	d87b      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b60      	cmp	r3, #96	; 0x60
 8006e72:	d050      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x11a>
 8006e74:	2b60      	cmp	r3, #96	; 0x60
 8006e76:	d877      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b50      	cmp	r3, #80	; 0x50
 8006e7a:	d03c      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e7c:	2b50      	cmp	r3, #80	; 0x50
 8006e7e:	d873      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d058      	beq.n	8006f36 <HAL_TIM_ConfigClockSource+0x13a>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d86f      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e88:	2b30      	cmp	r3, #48	; 0x30
 8006e8a:	d064      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d86b      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d060      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d867      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05c      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d05a      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	e062      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6899      	ldr	r1, [r3, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f000 f965 	bl	8007180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	609a      	str	r2, [r3, #8]
      break;
 8006ece:	e04f      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6899      	ldr	r1, [r3, #8]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f000 f94e 	bl	8007180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef2:	609a      	str	r2, [r3, #8]
      break;
 8006ef4:	e03c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f000 f8c2 	bl	800708c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2150      	movs	r1, #80	; 0x50
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f91b 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006f14:	e02c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f000 f8e1 	bl	80070ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2160      	movs	r1, #96	; 0x60
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f90b 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006f34:	e01c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6859      	ldr	r1, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f000 f8a2 	bl	800708c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f8fb 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006f54:	e00c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f000 f8f2 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006f66:	e003      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e000      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a34      	ldr	r2, [pc, #208]	; (8007070 <TIM_Base_SetConfig+0xe4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006faa:	d00b      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a31      	ldr	r2, [pc, #196]	; (8007074 <TIM_Base_SetConfig+0xe8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a30      	ldr	r2, [pc, #192]	; (8007078 <TIM_Base_SetConfig+0xec>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_Base_SetConfig+0x38>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0xf0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <TIM_Base_SetConfig+0xe4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01b      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe4:	d017      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	; (8007074 <TIM_Base_SetConfig+0xe8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <TIM_Base_SetConfig+0xec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00f      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a20      	ldr	r2, [pc, #128]	; (800707c <TIM_Base_SetConfig+0xf0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <TIM_Base_SetConfig+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <TIM_Base_SetConfig+0xf8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_Base_SetConfig+0x8a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <TIM_Base_SetConfig+0xfc>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d108      	bne.n	8007028 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <TIM_Base_SetConfig+0xe4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40014000 	.word	0x40014000
 8007084:	40014400 	.word	0x40014400
 8007088:	40014800 	.word	0x40014800

0800708c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0201 	bic.w	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f023 030a 	bic.w	r3, r3, #10
 80070c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	621a      	str	r2, [r3, #32]
}
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b087      	sub	sp, #28
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f023 0210 	bic.w	r2, r3, #16
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	031b      	lsls	r3, r3, #12
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	f043 0307 	orr.w	r3, r3, #7
 800716c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800719a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	021a      	lsls	r2, r3, #8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	609a      	str	r2, [r3, #8]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2201      	movs	r2, #1
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	401a      	ands	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1a      	ldr	r2, [r3, #32]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 031f 	and.w	r3, r3, #31
 80071f2:	6879      	ldr	r1, [r7, #4]
 80071f4:	fa01 f303 	lsl.w	r3, r1, r3
 80071f8:	431a      	orrs	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e050      	b.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007270:	d013      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a16      	ldr	r2, [pc, #88]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10c      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40014000 	.word	0x40014000

080072e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e03f      	b.n	800737a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fb fd5e 	bl	8002dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2224      	movs	r2, #36	; 0x24
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800732a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f929 	bl	8007584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b08a      	sub	sp, #40	; 0x28
 8007386:	af02      	add	r7, sp, #8
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d17c      	bne.n	800749c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_UART_Transmit+0x2c>
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e075      	b.n	800749e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_UART_Transmit+0x3e>
 80073bc:	2302      	movs	r3, #2
 80073be:	e06e      	b.n	800749e <HAL_UART_Transmit+0x11c>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2221      	movs	r2, #33	; 0x21
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073d6:	f7fb fff3 	bl	80033c0 <HAL_GetTick>
 80073da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f0:	d108      	bne.n	8007404 <HAL_UART_Transmit+0x82>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d104      	bne.n	8007404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e003      	b.n	800740c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007414:	e02a      	b.n	800746c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f840 	bl	80074a6 <UART_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e036      	b.n	800749e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3302      	adds	r3, #2
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e007      	b.n	800745e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1cf      	bne.n	8007416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	2140      	movs	r1, #64	; 0x40
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f810 	bl	80074a6 <UART_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e006      	b.n	800749e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	e000      	b.n	800749e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800749c:	2302      	movs	r3, #2
  }
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b090      	sub	sp, #64	; 0x40
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b6:	e050      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d04c      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80074c6:	f7fb ff7b 	bl	80033c0 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d241      	bcs.n	800755a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330c      	adds	r3, #12
 80074f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074f6:	637a      	str	r2, [r7, #52]	; 0x34
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e5      	bne.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	613b      	str	r3, [r7, #16]
   return(result);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	63bb      	str	r3, [r7, #56]	; 0x38
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752a:	623a      	str	r2, [r7, #32]
 800752c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	69f9      	ldr	r1, [r7, #28]
 8007530:	6a3a      	ldr	r2, [r7, #32]
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	61bb      	str	r3, [r7, #24]
   return(result);
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e00f      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4013      	ands	r3, r2
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	bf0c      	ite	eq
 800756a:	2301      	moveq	r3, #1
 800756c:	2300      	movne	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	429a      	cmp	r2, r3
 8007576:	d09f      	beq.n	80074b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3740      	adds	r7, #64	; 0x40
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b0c0      	sub	sp, #256	; 0x100
 800758a:	af00      	add	r7, sp, #0
 800758c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a0:	68d9      	ldr	r1, [r3, #12]
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	ea40 0301 	orr.w	r3, r0, r1
 80075ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075dc:	f021 010c 	bic.w	r1, r1, #12
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075ea:	430b      	orrs	r3, r1
 80075ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fe:	6999      	ldr	r1, [r3, #24]
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	ea40 0301 	orr.w	r3, r0, r1
 800760a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b8f      	ldr	r3, [pc, #572]	; (8007850 <UART_SetConfig+0x2cc>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d005      	beq.n	8007624 <UART_SetConfig+0xa0>
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b8d      	ldr	r3, [pc, #564]	; (8007854 <UART_SetConfig+0x2d0>)
 8007620:	429a      	cmp	r2, r3
 8007622:	d104      	bne.n	800762e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007624:	f7ff f824 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 8007628:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800762c:	e003      	b.n	8007636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800762e:	f7ff f80b 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8007632:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007640:	f040 810c 	bne.w	800785c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007648:	2200      	movs	r2, #0
 800764a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800764e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007656:	4622      	mov	r2, r4
 8007658:	462b      	mov	r3, r5
 800765a:	1891      	adds	r1, r2, r2
 800765c:	65b9      	str	r1, [r7, #88]	; 0x58
 800765e:	415b      	adcs	r3, r3
 8007660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007666:	4621      	mov	r1, r4
 8007668:	eb12 0801 	adds.w	r8, r2, r1
 800766c:	4629      	mov	r1, r5
 800766e:	eb43 0901 	adc.w	r9, r3, r1
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800767e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007686:	4690      	mov	r8, r2
 8007688:	4699      	mov	r9, r3
 800768a:	4623      	mov	r3, r4
 800768c:	eb18 0303 	adds.w	r3, r8, r3
 8007690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007694:	462b      	mov	r3, r5
 8007696:	eb49 0303 	adc.w	r3, r9, r3
 800769a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076b2:	460b      	mov	r3, r1
 80076b4:	18db      	adds	r3, r3, r3
 80076b6:	653b      	str	r3, [r7, #80]	; 0x50
 80076b8:	4613      	mov	r3, r2
 80076ba:	eb42 0303 	adc.w	r3, r2, r3
 80076be:	657b      	str	r3, [r7, #84]	; 0x54
 80076c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076c8:	f7f9 fac6 	bl	8000c58 <__aeabi_uldivmod>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4b61      	ldr	r3, [pc, #388]	; (8007858 <UART_SetConfig+0x2d4>)
 80076d2:	fba3 2302 	umull	r2, r3, r3, r2
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	011c      	lsls	r4, r3, #4
 80076da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076ec:	4642      	mov	r2, r8
 80076ee:	464b      	mov	r3, r9
 80076f0:	1891      	adds	r1, r2, r2
 80076f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80076f4:	415b      	adcs	r3, r3
 80076f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076fc:	4641      	mov	r1, r8
 80076fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007702:	4649      	mov	r1, r9
 8007704:	eb43 0b01 	adc.w	fp, r3, r1
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800771c:	4692      	mov	sl, r2
 800771e:	469b      	mov	fp, r3
 8007720:	4643      	mov	r3, r8
 8007722:	eb1a 0303 	adds.w	r3, sl, r3
 8007726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800772a:	464b      	mov	r3, r9
 800772c:	eb4b 0303 	adc.w	r3, fp, r3
 8007730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007740:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007748:	460b      	mov	r3, r1
 800774a:	18db      	adds	r3, r3, r3
 800774c:	643b      	str	r3, [r7, #64]	; 0x40
 800774e:	4613      	mov	r3, r2
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	647b      	str	r3, [r7, #68]	; 0x44
 8007756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800775a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800775e:	f7f9 fa7b 	bl	8000c58 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4611      	mov	r1, r2
 8007768:	4b3b      	ldr	r3, [pc, #236]	; (8007858 <UART_SetConfig+0x2d4>)
 800776a:	fba3 2301 	umull	r2, r3, r3, r1
 800776e:	095b      	lsrs	r3, r3, #5
 8007770:	2264      	movs	r2, #100	; 0x64
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	1acb      	subs	r3, r1, r3
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800777e:	4b36      	ldr	r3, [pc, #216]	; (8007858 <UART_SetConfig+0x2d4>)
 8007780:	fba3 2302 	umull	r2, r3, r3, r2
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800778c:	441c      	add	r4, r3
 800778e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007792:	2200      	movs	r2, #0
 8007794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007798:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800779c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	1891      	adds	r1, r2, r2
 80077a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80077a8:	415b      	adcs	r3, r3
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077b0:	4641      	mov	r1, r8
 80077b2:	1851      	adds	r1, r2, r1
 80077b4:	6339      	str	r1, [r7, #48]	; 0x30
 80077b6:	4649      	mov	r1, r9
 80077b8:	414b      	adcs	r3, r1
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077c8:	4659      	mov	r1, fp
 80077ca:	00cb      	lsls	r3, r1, #3
 80077cc:	4651      	mov	r1, sl
 80077ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077d2:	4651      	mov	r1, sl
 80077d4:	00ca      	lsls	r2, r1, #3
 80077d6:	4610      	mov	r0, r2
 80077d8:	4619      	mov	r1, r3
 80077da:	4603      	mov	r3, r0
 80077dc:	4642      	mov	r2, r8
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077e4:	464b      	mov	r3, r9
 80077e6:	460a      	mov	r2, r1
 80077e8:	eb42 0303 	adc.w	r3, r2, r3
 80077ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007804:	460b      	mov	r3, r1
 8007806:	18db      	adds	r3, r3, r3
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
 800780a:	4613      	mov	r3, r2
 800780c:	eb42 0303 	adc.w	r3, r2, r3
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800781a:	f7f9 fa1d 	bl	8000c58 <__aeabi_uldivmod>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <UART_SetConfig+0x2d4>)
 8007824:	fba3 1302 	umull	r1, r3, r3, r2
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	2164      	movs	r1, #100	; 0x64
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	3332      	adds	r3, #50	; 0x32
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <UART_SetConfig+0x2d4>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	f003 0207 	and.w	r2, r3, #7
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4422      	add	r2, r4
 800784a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800784c:	e105      	b.n	8007a5a <UART_SetConfig+0x4d6>
 800784e:	bf00      	nop
 8007850:	40011000 	.word	0x40011000
 8007854:	40011400 	.word	0x40011400
 8007858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800785c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007860:	2200      	movs	r2, #0
 8007862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007866:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800786a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800786e:	4642      	mov	r2, r8
 8007870:	464b      	mov	r3, r9
 8007872:	1891      	adds	r1, r2, r2
 8007874:	6239      	str	r1, [r7, #32]
 8007876:	415b      	adcs	r3, r3
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
 800787a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800787e:	4641      	mov	r1, r8
 8007880:	1854      	adds	r4, r2, r1
 8007882:	4649      	mov	r1, r9
 8007884:	eb43 0501 	adc.w	r5, r3, r1
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	00eb      	lsls	r3, r5, #3
 8007892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007896:	00e2      	lsls	r2, r4, #3
 8007898:	4614      	mov	r4, r2
 800789a:	461d      	mov	r5, r3
 800789c:	4643      	mov	r3, r8
 800789e:	18e3      	adds	r3, r4, r3
 80078a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078a4:	464b      	mov	r3, r9
 80078a6:	eb45 0303 	adc.w	r3, r5, r3
 80078aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078ca:	4629      	mov	r1, r5
 80078cc:	008b      	lsls	r3, r1, #2
 80078ce:	4621      	mov	r1, r4
 80078d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078d4:	4621      	mov	r1, r4
 80078d6:	008a      	lsls	r2, r1, #2
 80078d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078dc:	f7f9 f9bc 	bl	8000c58 <__aeabi_uldivmod>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4b60      	ldr	r3, [pc, #384]	; (8007a68 <UART_SetConfig+0x4e4>)
 80078e6:	fba3 2302 	umull	r2, r3, r3, r2
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	011c      	lsls	r4, r3, #4
 80078ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	1891      	adds	r1, r2, r2
 8007906:	61b9      	str	r1, [r7, #24]
 8007908:	415b      	adcs	r3, r3
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007910:	4641      	mov	r1, r8
 8007912:	1851      	adds	r1, r2, r1
 8007914:	6139      	str	r1, [r7, #16]
 8007916:	4649      	mov	r1, r9
 8007918:	414b      	adcs	r3, r1
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007928:	4659      	mov	r1, fp
 800792a:	00cb      	lsls	r3, r1, #3
 800792c:	4651      	mov	r1, sl
 800792e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007932:	4651      	mov	r1, sl
 8007934:	00ca      	lsls	r2, r1, #3
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	4603      	mov	r3, r0
 800793c:	4642      	mov	r2, r8
 800793e:	189b      	adds	r3, r3, r2
 8007940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007944:	464b      	mov	r3, r9
 8007946:	460a      	mov	r2, r1
 8007948:	eb42 0303 	adc.w	r3, r2, r3
 800794c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	67bb      	str	r3, [r7, #120]	; 0x78
 800795a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	f04f 0300 	mov.w	r3, #0
 8007964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007968:	4649      	mov	r1, r9
 800796a:	008b      	lsls	r3, r1, #2
 800796c:	4641      	mov	r1, r8
 800796e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007972:	4641      	mov	r1, r8
 8007974:	008a      	lsls	r2, r1, #2
 8007976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800797a:	f7f9 f96d 	bl	8000c58 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4b39      	ldr	r3, [pc, #228]	; (8007a68 <UART_SetConfig+0x4e4>)
 8007984:	fba3 1302 	umull	r1, r3, r3, r2
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	2164      	movs	r1, #100	; 0x64
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	3332      	adds	r3, #50	; 0x32
 8007996:	4a34      	ldr	r2, [pc, #208]	; (8007a68 <UART_SetConfig+0x4e4>)
 8007998:	fba2 2303 	umull	r2, r3, r2, r3
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a2:	441c      	add	r4, r3
 80079a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a8:	2200      	movs	r2, #0
 80079aa:	673b      	str	r3, [r7, #112]	; 0x70
 80079ac:	677a      	str	r2, [r7, #116]	; 0x74
 80079ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079b2:	4642      	mov	r2, r8
 80079b4:	464b      	mov	r3, r9
 80079b6:	1891      	adds	r1, r2, r2
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	415b      	adcs	r3, r3
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079c2:	4641      	mov	r1, r8
 80079c4:	1851      	adds	r1, r2, r1
 80079c6:	6039      	str	r1, [r7, #0]
 80079c8:	4649      	mov	r1, r9
 80079ca:	414b      	adcs	r3, r1
 80079cc:	607b      	str	r3, [r7, #4]
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079da:	4659      	mov	r1, fp
 80079dc:	00cb      	lsls	r3, r1, #3
 80079de:	4651      	mov	r1, sl
 80079e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079e4:	4651      	mov	r1, sl
 80079e6:	00ca      	lsls	r2, r1, #3
 80079e8:	4610      	mov	r0, r2
 80079ea:	4619      	mov	r1, r3
 80079ec:	4603      	mov	r3, r0
 80079ee:	4642      	mov	r2, r8
 80079f0:	189b      	adds	r3, r3, r2
 80079f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079f4:	464b      	mov	r3, r9
 80079f6:	460a      	mov	r2, r1
 80079f8:	eb42 0303 	adc.w	r3, r2, r3
 80079fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	663b      	str	r3, [r7, #96]	; 0x60
 8007a08:	667a      	str	r2, [r7, #100]	; 0x64
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a16:	4649      	mov	r1, r9
 8007a18:	008b      	lsls	r3, r1, #2
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a20:	4641      	mov	r1, r8
 8007a22:	008a      	lsls	r2, r1, #2
 8007a24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a28:	f7f9 f916 	bl	8000c58 <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <UART_SetConfig+0x4e4>)
 8007a32:	fba3 1302 	umull	r1, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	2164      	movs	r1, #100	; 0x64
 8007a3a:	fb01 f303 	mul.w	r3, r1, r3
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	3332      	adds	r3, #50	; 0x32
 8007a44:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <UART_SetConfig+0x4e4>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4422      	add	r2, r4
 8007a58:	609a      	str	r2, [r3, #8]
}
 8007a5a:	bf00      	nop
 8007a5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a60:	46bd      	mov	sp, r7
 8007a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a66:	bf00      	nop
 8007a68:	51eb851f 	.word	0x51eb851f

08007a6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b089      	sub	sp, #36	; 0x24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	fa93 f3a3 	rbit	r3, r3
 8007a86:	613b      	str	r3, [r7, #16]
  return result;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	fab3 f383 	clz	r3, r3
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	2103      	movs	r1, #3
 8007a94:	fa01 f303 	lsl.w	r3, r1, r3
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	fa93 f3a3 	rbit	r3, r3
 8007aa6:	61bb      	str	r3, [r7, #24]
  return result;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	fab3 f383 	clz	r3, r3
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	3724      	adds	r7, #36	; 0x24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	43db      	mvns	r3, r3
 8007ade:	401a      	ands	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	605a      	str	r2, [r3, #4]
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b089      	sub	sp, #36	; 0x24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	fa93 f3a3 	rbit	r3, r3
 8007b14:	613b      	str	r3, [r7, #16]
  return result;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	fab3 f383 	clz	r3, r3
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	2103      	movs	r1, #3
 8007b22:	fa01 f303 	lsl.w	r3, r1, r3
 8007b26:	43db      	mvns	r3, r3
 8007b28:	401a      	ands	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	fa93 f3a3 	rbit	r3, r3
 8007b34:	61bb      	str	r3, [r7, #24]
  return result;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	fab3 f383 	clz	r3, r3
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	fa01 f303 	lsl.w	r3, r1, r3
 8007b46:	431a      	orrs	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007b4c:	bf00      	nop
 8007b4e:	3724      	adds	r7, #36	; 0x24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b089      	sub	sp, #36	; 0x24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	fa93 f3a3 	rbit	r3, r3
 8007b72:	613b      	str	r3, [r7, #16]
  return result;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	fab3 f383 	clz	r3, r3
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	2103      	movs	r1, #3
 8007b80:	fa01 f303 	lsl.w	r3, r1, r3
 8007b84:	43db      	mvns	r3, r3
 8007b86:	401a      	ands	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	fa93 f3a3 	rbit	r3, r3
 8007b92:	61bb      	str	r3, [r7, #24]
  return result;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	fab3 f383 	clz	r3, r3
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	60da      	str	r2, [r3, #12]
}
 8007baa:	bf00      	nop
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b089      	sub	sp, #36	; 0x24
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	fa93 f3a3 	rbit	r3, r3
 8007bd0:	613b      	str	r3, [r7, #16]
  return result;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	fab3 f383 	clz	r3, r3
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	210f      	movs	r1, #15
 8007bde:	fa01 f303 	lsl.w	r3, r1, r3
 8007be2:	43db      	mvns	r3, r3
 8007be4:	401a      	ands	r2, r3
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	fa93 f3a3 	rbit	r3, r3
 8007bf0:	61bb      	str	r3, [r7, #24]
  return result;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	fab3 f383 	clz	r3, r3
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007c02:	431a      	orrs	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007c08:	bf00      	nop
 8007c0a:	3724      	adds	r7, #36	; 0x24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b089      	sub	sp, #36	; 0x24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	fa93 f3a3 	rbit	r3, r3
 8007c30:	613b      	str	r3, [r7, #16]
  return result;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	fab3 f383 	clz	r3, r3
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	210f      	movs	r1, #15
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	43db      	mvns	r3, r3
 8007c44:	401a      	ands	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	0a1b      	lsrs	r3, r3, #8
 8007c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	fa93 f3a3 	rbit	r3, r3
 8007c52:	61bb      	str	r3, [r7, #24]
  return result;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	fab3 f383 	clz	r3, r3
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	fa01 f303 	lsl.w	r3, r1, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007c6a:	bf00      	nop
 8007c6c:	3724      	adds	r7, #36	; 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b088      	sub	sp, #32
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	fa93 f3a3 	rbit	r3, r3
 8007c94:	613b      	str	r3, [r7, #16]
  return result;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	fab3 f383 	clz	r3, r3
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007ca0:	e050      	b.n	8007d44 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d042      	beq.n	8007d3e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d003      	beq.n	8007cc8 <LL_GPIO_Init+0x52>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d10d      	bne.n	8007ce4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	69b9      	ldr	r1, [r7, #24]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff ff12 	bl	8007afa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	69b9      	ldr	r1, [r7, #24]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff fef3 	bl	8007aca <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	69b9      	ldr	r1, [r7, #24]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff ff33 	bl	8007b58 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d11a      	bne.n	8007d30 <LL_GPIO_Init+0xba>
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	fa93 f3a3 	rbit	r3, r3
 8007d04:	60bb      	str	r3, [r7, #8]
  return result;
 8007d06:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007d08:	fab3 f383 	clz	r3, r3
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b07      	cmp	r3, #7
 8007d10:	d807      	bhi.n	8007d22 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	461a      	mov	r2, r3
 8007d18:	69b9      	ldr	r1, [r7, #24]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ff4b 	bl	8007bb6 <LL_GPIO_SetAFPin_0_7>
 8007d20:	e006      	b.n	8007d30 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	461a      	mov	r2, r3
 8007d28:	69b9      	ldr	r1, [r7, #24]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ff72 	bl	8007c14 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	461a      	mov	r2, r3
 8007d36:	69b9      	ldr	r1, [r7, #24]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fe97 	bl	8007a6c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	3301      	adds	r3, #1
 8007d42:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1a7      	bne.n	8007ca2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3720      	adds	r7, #32
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <LL_TIM_SetPrescaler>:
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <LL_TIM_SetAutoReload>:
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <LL_TIM_SetRepetitionCounter>:
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <LL_TIM_OC_SetCompareCH1>:
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <LL_TIM_OC_SetCompareCH2>:
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <LL_TIM_OC_SetCompareCH3>:
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <LL_TIM_OC_SetCompareCH4>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <LL_TIM_GenerateEvent_UPDATE>:
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	f043 0201 	orr.w	r2, r3, #1
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	615a      	str	r2, [r3, #20]
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a31      	ldr	r2, [pc, #196]	; (8007f18 <LL_TIM_Init+0xd8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00f      	beq.n	8007e78 <LL_TIM_Init+0x38>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5e:	d00b      	beq.n	8007e78 <LL_TIM_Init+0x38>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a2e      	ldr	r2, [pc, #184]	; (8007f1c <LL_TIM_Init+0xdc>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <LL_TIM_Init+0x38>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a2d      	ldr	r2, [pc, #180]	; (8007f20 <LL_TIM_Init+0xe0>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <LL_TIM_Init+0x38>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a2c      	ldr	r2, [pc, #176]	; (8007f24 <LL_TIM_Init+0xe4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d106      	bne.n	8007e86 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a23      	ldr	r2, [pc, #140]	; (8007f18 <LL_TIM_Init+0xd8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01b      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e94:	d017      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a20      	ldr	r2, [pc, #128]	; (8007f1c <LL_TIM_Init+0xdc>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <LL_TIM_Init+0xe0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00f      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <LL_TIM_Init+0xe4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00b      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <LL_TIM_Init+0xe8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d007      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <LL_TIM_Init+0xec>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d003      	beq.n	8007ec6 <LL_TIM_Init+0x86>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <LL_TIM_Init+0xf0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d106      	bne.n	8007ed4 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff ff49 	bl	8007d78 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff ff35 	bl	8007d5c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a08      	ldr	r2, [pc, #32]	; (8007f18 <LL_TIM_Init+0xd8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d105      	bne.n	8007f06 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff ff47 	bl	8007d94 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff ff8a 	bl	8007e20 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4a:	d027      	beq.n	8007f9c <LL_TIM_OC_Init+0x68>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f52:	d82a      	bhi.n	8007faa <LL_TIM_OC_Init+0x76>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f5a:	d018      	beq.n	8007f8e <LL_TIM_OC_Init+0x5a>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f62:	d822      	bhi.n	8007faa <LL_TIM_OC_Init+0x76>
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d003      	beq.n	8007f72 <LL_TIM_OC_Init+0x3e>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b10      	cmp	r3, #16
 8007f6e:	d007      	beq.n	8007f80 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007f70:	e01b      	b.n	8007faa <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f867 	bl	8008048 <OC1Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7e:	e015      	b.n	8007fac <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f8c6 	bl	8008114 <OC2Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8c:	e00e      	b.n	8007fac <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f929 	bl	80081e8 <OC3Config>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9a:	e007      	b.n	8007fac <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 f98c 	bl	80082bc <OC4Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	e000      	b.n	8007fac <LL_TIM_OC_Init+0x78>
      break;
 8007faa:	bf00      	nop
  }

  return result;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	7b12      	ldrb	r2, [r2, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	89d2      	ldrh	r2, [r2, #14]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f023 0201 	bic.w	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 0202 	bic.w	r2, r3, #2
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	4313      	orrs	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a1a      	ldr	r2, [pc, #104]	; (8008110 <OC1Config+0xc8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d11e      	bne.n	80080e8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0208 	bic.w	r2, r3, #8
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 0204 	bic.w	r2, r3, #4
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fe58 	bl	8007db0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40010000 	.word	0x40010000

08008114 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0210 	bic.w	r2, r3, #16
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f023 0220 	bic.w	r2, r3, #32
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f023 0210 	bic.w	r2, r3, #16
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a1b      	ldr	r2, [pc, #108]	; (80081e4 <OC2Config+0xd0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d11f      	bne.n	80081bc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	019b      	lsls	r3, r3, #6
 8008188:	4313      	orrs	r3, r2
 800818a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	019b      	lsls	r3, r3, #6
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4313      	orrs	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fdfc 	bl	8007dcc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40010000 	.word	0x40010000

080081e8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <OC3Config+0xd0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d11f      	bne.n	800828e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	029b      	lsls	r3, r3, #10
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4313      	orrs	r3, r2
 800827c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	015b      	lsls	r3, r3, #5
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fda1 	bl	8007de8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40010000 	.word	0x40010000

080082bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	031b      	lsls	r3, r3, #12
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	031b      	lsls	r3, r3, #12
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a0f      	ldr	r2, [pc, #60]	; (800835c <OC4Config+0xa0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d107      	bne.n	8008334 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	019b      	lsls	r3, r3, #6
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fd5c 	bl	8007e04 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40010000 	.word	0x40010000

08008360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008360:	b084      	sub	sp, #16
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	f107 001c 	add.w	r0, r7, #28
 800836e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	2b01      	cmp	r3, #1
 8008376:	d122      	bne.n	80083be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800838c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d105      	bne.n	80083b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fbee 	bl	8009b94 <USB_CoreReset>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	e01a      	b.n	80083f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 fbe2 	bl	8009b94 <USB_CoreReset>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80083d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38
 80083e6:	e005      	b.n	80083f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d10b      	bne.n	8008412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f043 0206 	orr.w	r2, r3, #6
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f043 0220 	orr.w	r2, r3, #32
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800841e:	b004      	add	sp, #16
 8008420:	4770      	bx	lr
	...

08008424 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d165      	bne.n	8008504 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4a41      	ldr	r2, [pc, #260]	; (8008540 <USB_SetTurnaroundTime+0x11c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d906      	bls.n	800844e <USB_SetTurnaroundTime+0x2a>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4a40      	ldr	r2, [pc, #256]	; (8008544 <USB_SetTurnaroundTime+0x120>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d202      	bcs.n	800844e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008448:	230f      	movs	r3, #15
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e062      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	4a3c      	ldr	r2, [pc, #240]	; (8008544 <USB_SetTurnaroundTime+0x120>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d306      	bcc.n	8008464 <USB_SetTurnaroundTime+0x40>
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4a3b      	ldr	r2, [pc, #236]	; (8008548 <USB_SetTurnaroundTime+0x124>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d202      	bcs.n	8008464 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800845e:	230e      	movs	r3, #14
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	e057      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4a38      	ldr	r2, [pc, #224]	; (8008548 <USB_SetTurnaroundTime+0x124>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d306      	bcc.n	800847a <USB_SetTurnaroundTime+0x56>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4a37      	ldr	r2, [pc, #220]	; (800854c <USB_SetTurnaroundTime+0x128>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d202      	bcs.n	800847a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008474:	230d      	movs	r3, #13
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e04c      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4a33      	ldr	r2, [pc, #204]	; (800854c <USB_SetTurnaroundTime+0x128>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d306      	bcc.n	8008490 <USB_SetTurnaroundTime+0x6c>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	4a32      	ldr	r2, [pc, #200]	; (8008550 <USB_SetTurnaroundTime+0x12c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d802      	bhi.n	8008490 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800848a:	230c      	movs	r3, #12
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	e041      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4a2f      	ldr	r2, [pc, #188]	; (8008550 <USB_SetTurnaroundTime+0x12c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d906      	bls.n	80084a6 <USB_SetTurnaroundTime+0x82>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4a2e      	ldr	r2, [pc, #184]	; (8008554 <USB_SetTurnaroundTime+0x130>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d802      	bhi.n	80084a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084a0:	230b      	movs	r3, #11
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e036      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4a2a      	ldr	r2, [pc, #168]	; (8008554 <USB_SetTurnaroundTime+0x130>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d906      	bls.n	80084bc <USB_SetTurnaroundTime+0x98>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4a29      	ldr	r2, [pc, #164]	; (8008558 <USB_SetTurnaroundTime+0x134>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d802      	bhi.n	80084bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80084b6:	230a      	movs	r3, #10
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	e02b      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4a26      	ldr	r2, [pc, #152]	; (8008558 <USB_SetTurnaroundTime+0x134>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d906      	bls.n	80084d2 <USB_SetTurnaroundTime+0xae>
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4a25      	ldr	r2, [pc, #148]	; (800855c <USB_SetTurnaroundTime+0x138>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d202      	bcs.n	80084d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80084cc:	2309      	movs	r3, #9
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e020      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4a21      	ldr	r2, [pc, #132]	; (800855c <USB_SetTurnaroundTime+0x138>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d306      	bcc.n	80084e8 <USB_SetTurnaroundTime+0xc4>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4a20      	ldr	r2, [pc, #128]	; (8008560 <USB_SetTurnaroundTime+0x13c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d802      	bhi.n	80084e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80084e2:	2308      	movs	r3, #8
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e015      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4a1d      	ldr	r2, [pc, #116]	; (8008560 <USB_SetTurnaroundTime+0x13c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d906      	bls.n	80084fe <USB_SetTurnaroundTime+0xda>
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <USB_SetTurnaroundTime+0x140>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d202      	bcs.n	80084fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80084f8:	2307      	movs	r3, #7
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e00a      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80084fe:	2306      	movs	r3, #6
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e007      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800850a:	2309      	movs	r3, #9
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	e001      	b.n	8008514 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008510:	2309      	movs	r3, #9
 8008512:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	029b      	lsls	r3, r3, #10
 8008528:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800852c:	431a      	orrs	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	00d8acbf 	.word	0x00d8acbf
 8008544:	00e4e1c0 	.word	0x00e4e1c0
 8008548:	00f42400 	.word	0x00f42400
 800854c:	01067380 	.word	0x01067380
 8008550:	011a499f 	.word	0x011a499f
 8008554:	01312cff 	.word	0x01312cff
 8008558:	014ca43f 	.word	0x014ca43f
 800855c:	016e3600 	.word	0x016e3600
 8008560:	01a6ab1f 	.word	0x01a6ab1f
 8008564:	01e84800 	.word	0x01e84800

08008568 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f043 0201 	orr.w	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f023 0201 	bic.w	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d115      	bne.n	80085fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085da:	2001      	movs	r0, #1
 80085dc:	f7fa fefc 	bl	80033d8 <HAL_Delay>
      ms++;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fa45 	bl	8009a76 <USB_GetMode>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d01e      	beq.n	8008630 <USB_SetCurrentMode+0x84>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b31      	cmp	r3, #49	; 0x31
 80085f6:	d9f0      	bls.n	80085da <USB_SetCurrentMode+0x2e>
 80085f8:	e01a      	b.n	8008630 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d115      	bne.n	800862c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800860c:	2001      	movs	r0, #1
 800860e:	f7fa fee3 	bl	80033d8 <HAL_Delay>
      ms++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fa2c 	bl	8009a76 <USB_GetMode>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <USB_SetCurrentMode+0x84>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b31      	cmp	r3, #49	; 0x31
 8008628:	d9f0      	bls.n	800860c <USB_SetCurrentMode+0x60>
 800862a:	e001      	b.n	8008630 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e005      	b.n	800863c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b32      	cmp	r3, #50	; 0x32
 8008634:	d101      	bne.n	800863a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e000      	b.n	800863c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008644:	b084      	sub	sp, #16
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	e009      	b.n	8008678 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3340      	adds	r3, #64	; 0x40
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	2200      	movs	r2, #0
 8008670:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	3301      	adds	r3, #1
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2b0e      	cmp	r3, #14
 800867c:	d9f2      	bls.n	8008664 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800867e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11c      	bne.n	80086be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008692:	f043 0302 	orr.w	r3, r3, #2
 8008696:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	639a      	str	r2, [r3, #56]	; 0x38
 80086bc:	e00b      	b.n	80086d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086dc:	461a      	mov	r2, r3
 80086de:	2300      	movs	r3, #0
 80086e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e8:	4619      	mov	r1, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f0:	461a      	mov	r2, r3
 80086f2:	680b      	ldr	r3, [r1, #0]
 80086f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d10c      	bne.n	8008716 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008702:	2100      	movs	r1, #0
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f965 	bl	80089d4 <USB_SetDevSpeed>
 800870a:	e008      	b.n	800871e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800870c:	2101      	movs	r1, #1
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f960 	bl	80089d4 <USB_SetDevSpeed>
 8008714:	e003      	b.n	800871e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008716:	2103      	movs	r1, #3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f95b 	bl	80089d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800871e:	2110      	movs	r1, #16
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f8f3 	bl	800890c <USB_FlushTxFifo>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f91f 	bl	8008974 <USB_FlushRxFifo>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	461a      	mov	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	461a      	mov	r2, r3
 8008754:	2300      	movs	r3, #0
 8008756:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	461a      	mov	r2, r3
 8008760:	2300      	movs	r3, #0
 8008762:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008764:	2300      	movs	r3, #0
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	e043      	b.n	80087f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800877c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008780:	d118      	bne.n	80087b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	461a      	mov	r2, r3
 8008796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	e013      	b.n	80087c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087aa:	461a      	mov	r2, r3
 80087ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e008      	b.n	80087c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	461a      	mov	r2, r3
 80087c2:	2300      	movs	r3, #0
 80087c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d2:	461a      	mov	r2, r3
 80087d4:	2300      	movs	r3, #0
 80087d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e4:	461a      	mov	r2, r3
 80087e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	3301      	adds	r3, #1
 80087f0:	613b      	str	r3, [r7, #16]
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d3b7      	bcc.n	800876a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087fa:	2300      	movs	r3, #0
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	e043      	b.n	8008888 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008816:	d118      	bne.n	800884a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882a:	461a      	mov	r2, r3
 800882c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e013      	b.n	800885c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008840:	461a      	mov	r2, r3
 8008842:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	e008      	b.n	800885c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008856:	461a      	mov	r2, r3
 8008858:	2300      	movs	r3, #0
 800885a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	461a      	mov	r2, r3
 800886a:	2300      	movs	r3, #0
 800886c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887a:	461a      	mov	r2, r3
 800887c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008880:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3301      	adds	r3, #1
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	429a      	cmp	r2, r3
 800888e:	d3b7      	bcc.n	8008800 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800889e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80088b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d105      	bne.n	80088c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	f043 0210 	orr.w	r2, r3, #16
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <USB_DevInit+0x2c4>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f043 0208 	orr.w	r2, r3, #8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d107      	bne.n	80088f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088f0:	f043 0304 	orr.w	r3, r3, #4
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008904:	b004      	add	sp, #16
 8008906:	4770      	bx	lr
 8008908:	803c3800 	.word	0x803c3800

0800890c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a13      	ldr	r2, [pc, #76]	; (8008970 <USB_FlushTxFifo+0x64>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d901      	bls.n	800892c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e01b      	b.n	8008964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	daf2      	bge.n	800891a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	019b      	lsls	r3, r3, #6
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4a08      	ldr	r2, [pc, #32]	; (8008970 <USB_FlushTxFifo+0x64>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d901      	bls.n	8008956 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e006      	b.n	8008964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b20      	cmp	r3, #32
 8008960:	d0f0      	beq.n	8008944 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	00030d40 	.word	0x00030d40

08008974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a11      	ldr	r2, [pc, #68]	; (80089d0 <USB_FlushRxFifo+0x5c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e018      	b.n	80089c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	daf2      	bge.n	8008980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2210      	movs	r2, #16
 80089a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3301      	adds	r3, #1
 80089a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4a08      	ldr	r2, [pc, #32]	; (80089d0 <USB_FlushRxFifo+0x5c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d901      	bls.n	80089b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e006      	b.n	80089c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d0f0      	beq.n	80089a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	00030d40 	.word	0x00030d40

080089d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f4:	4313      	orrs	r3, r2
 80089f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b087      	sub	sp, #28
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 0306 	and.w	r3, r3, #6
 8008a1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a26:	2300      	movs	r3, #0
 8008a28:	75fb      	strb	r3, [r7, #23]
 8008a2a:	e00a      	b.n	8008a42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d002      	beq.n	8008a38 <USB_GetDevSpeed+0x32>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b06      	cmp	r3, #6
 8008a36:	d102      	bne.n	8008a3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	75fb      	strb	r3, [r7, #23]
 8008a3c:	e001      	b.n	8008a42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a3e:	230f      	movs	r3, #15
 8008a40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d13a      	bne.n	8008ae2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	68f9      	ldr	r1, [r7, #12]
 8008a86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d155      	bne.n	8008b50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ac0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	059b      	lsls	r3, r3, #22
 8008ac6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	e036      	b.n	8008b50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae8:	69da      	ldr	r2, [r3, #28]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	2101      	movs	r1, #1
 8008af4:	fa01 f303 	lsl.w	r3, r1, r3
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d11a      	bne.n	8008b50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	791b      	ldrb	r3, [r3, #4]
 8008b34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b36:	430b      	orrs	r3, r1
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d161      	bne.n	8008c40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b92:	d11f      	bne.n	8008bd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	43db      	mvns	r3, r3
 8008bee:	68f9      	ldr	r1, [r7, #12]
 8008bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	f003 030f 	and.w	r3, r3, #15
 8008c08:	2101      	movs	r1, #1
 8008c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	43db      	mvns	r3, r3
 8008c12:	68f9      	ldr	r1, [r7, #12]
 8008c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c18:	4013      	ands	r3, r2
 8008c1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	0159      	lsls	r1, r3, #5
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	440b      	add	r3, r1
 8008c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c36:	4619      	mov	r1, r3
 8008c38:	4b35      	ldr	r3, [pc, #212]	; (8008d10 <USB_DeactivateEndpoint+0x1b0>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	600b      	str	r3, [r1, #0]
 8008c3e:	e060      	b.n	8008d02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c56:	d11f      	bne.n	8008c98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	0151      	lsls	r1, r2, #5
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	440a      	add	r2, r1
 8008c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	2101      	movs	r1, #1
 8008caa:	fa01 f303 	lsl.w	r3, r1, r3
 8008cae:	041b      	lsls	r3, r3, #16
 8008cb0:	43db      	mvns	r3, r3
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb8:	4013      	ands	r3, r2
 8008cba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	2101      	movs	r1, #1
 8008cce:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd2:	041b      	lsls	r3, r3, #16
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cdc:	4013      	ands	r3, r2
 8008cde:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	0159      	lsls	r1, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	440b      	add	r3, r1
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <USB_DeactivateEndpoint+0x1b4>)
 8008cfe:	4013      	ands	r3, r2
 8008d00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	ec337800 	.word	0xec337800
 8008d14:	eff37800 	.word	0xeff37800

08008d18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08a      	sub	sp, #40	; 0x28
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	785b      	ldrb	r3, [r3, #1]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	f040 815c 	bne.w	8008ff2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d132      	bne.n	8008da8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	015a      	lsls	r2, r3, #5
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	0151      	lsls	r1, r2, #5
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	440a      	add	r2, r1
 8008d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	69fa      	ldr	r2, [r7, #28]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da0:	0cdb      	lsrs	r3, r3, #19
 8008da2:	04db      	lsls	r3, r3, #19
 8008da4:	6113      	str	r3, [r2, #16]
 8008da6:	e074      	b.n	8008e92 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dc2:	0cdb      	lsrs	r3, r3, #19
 8008dc4:	04db      	lsls	r3, r3, #19
 8008dc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008de6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6999      	ldr	r1, [r3, #24]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	440b      	add	r3, r1
 8008e04:	1e59      	subs	r1, r3, #1
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e0e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008e10:	4b9d      	ldr	r3, [pc, #628]	; (8009088 <USB_EPStartXfer+0x370>)
 8008e12:	400b      	ands	r3, r1
 8008e14:	69b9      	ldr	r1, [r7, #24]
 8008e16:	0148      	lsls	r0, r1, #5
 8008e18:	69f9      	ldr	r1, [r7, #28]
 8008e1a:	4401      	add	r1, r0
 8008e1c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e20:	4313      	orrs	r3, r2
 8008e22:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	691a      	ldr	r2, [r3, #16]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e3a:	69b9      	ldr	r1, [r7, #24]
 8008e3c:	0148      	lsls	r0, r1, #5
 8008e3e:	69f9      	ldr	r1, [r7, #28]
 8008e40:	4401      	add	r1, r0
 8008e42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e46:	4313      	orrs	r3, r2
 8008e48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	791b      	ldrb	r3, [r3, #4]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d11f      	bne.n	8008e92 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008e70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d14b      	bne.n	8008f30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	461a      	mov	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d128      	bne.n	8008f0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d110      	bne.n	8008eee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	e00f      	b.n	8008f0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	e133      	b.n	8009198 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	791b      	ldrb	r3, [r3, #4]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d015      	beq.n	8008f84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 811b 	beq.w	8009198 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	2101      	movs	r1, #1
 8008f74:	fa01 f303 	lsl.w	r3, r1, r3
 8008f78:	69f9      	ldr	r1, [r7, #28]
 8008f7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	634b      	str	r3, [r1, #52]	; 0x34
 8008f82:	e109      	b.n	8009198 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d110      	bne.n	8008fb6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	e00f      	b.n	8008fd6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6919      	ldr	r1, [r3, #16]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	781a      	ldrb	r2, [r3, #0]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	b298      	uxth	r0, r3
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	4603      	mov	r3, r0
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 fade 	bl	80095ac <USB_WritePacket>
 8008ff0:	e0d2      	b.n	8009198 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	440a      	add	r2, r1
 8009008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800900c:	0cdb      	lsrs	r3, r3, #19
 800900e:	04db      	lsls	r3, r3, #19
 8009010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	440a      	add	r2, r1
 8009028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800902c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d126      	bne.n	800908c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009054:	69b9      	ldr	r1, [r7, #24]
 8009056:	0148      	lsls	r0, r1, #5
 8009058:	69f9      	ldr	r1, [r7, #28]
 800905a:	4401      	add	r1, r0
 800905c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009060:	4313      	orrs	r3, r2
 8009062:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	0151      	lsls	r1, r2, #5
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	440a      	add	r2, r1
 800907a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800907e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009082:	6113      	str	r3, [r2, #16]
 8009084:	e03a      	b.n	80090fc <USB_EPStartXfer+0x3e4>
 8009086:	bf00      	nop
 8009088:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	4413      	add	r3, r2
 8009096:	1e5a      	subs	r2, r3, #1
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	8afa      	ldrh	r2, [r7, #22]
 80090a8:	fb03 f202 	mul.w	r2, r3, r2
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	8afb      	ldrh	r3, [r7, #22]
 80090c0:	04d9      	lsls	r1, r3, #19
 80090c2:	4b38      	ldr	r3, [pc, #224]	; (80091a4 <USB_EPStartXfer+0x48c>)
 80090c4:	400b      	ands	r3, r1
 80090c6:	69b9      	ldr	r1, [r7, #24]
 80090c8:	0148      	lsls	r0, r1, #5
 80090ca:	69f9      	ldr	r1, [r7, #28]
 80090cc:	4401      	add	r1, r0
 80090ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090d2:	4313      	orrs	r3, r2
 80090d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ec:	69b9      	ldr	r1, [r7, #24]
 80090ee:	0148      	lsls	r0, r1, #5
 80090f0:	69f9      	ldr	r1, [r7, #28]
 80090f2:	4401      	add	r1, r0
 80090f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090f8:	4313      	orrs	r3, r2
 80090fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d10d      	bne.n	800911e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	6919      	ldr	r1, [r3, #16]
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	460a      	mov	r2, r1
 800911c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	791b      	ldrb	r3, [r3, #4]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d128      	bne.n	8009178 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009132:	2b00      	cmp	r3, #0
 8009134:	d110      	bne.n	8009158 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	0151      	lsls	r1, r2, #5
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	440a      	add	r2, r1
 800914c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	e00f      	b.n	8009178 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	440a      	add	r2, r1
 800916e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009176:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3720      	adds	r7, #32
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	1ff80000 	.word	0x1ff80000

080091a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	f040 80ce 	bne.w	8009366 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d132      	bne.n	8009238 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009230:	0cdb      	lsrs	r3, r3, #19
 8009232:	04db      	lsls	r3, r3, #19
 8009234:	6113      	str	r3, [r2, #16]
 8009236:	e04e      	b.n	80092d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	0cdb      	lsrs	r3, r3, #19
 8009254:	04db      	lsls	r3, r3, #19
 8009256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009272:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009276:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800927a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	699a      	ldr	r2, [r3, #24]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	429a      	cmp	r2, r3
 8009286:	d903      	bls.n	8009290 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	691a      	ldr	r2, [r3, #16]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c6:	6939      	ldr	r1, [r7, #16]
 80092c8:	0148      	lsls	r0, r1, #5
 80092ca:	6979      	ldr	r1, [r7, #20]
 80092cc:	4401      	add	r1, r0
 80092ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092d2:	4313      	orrs	r3, r2
 80092d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d11e      	bne.n	800931a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d009      	beq.n	80092f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	0151      	lsls	r1, r2, #5
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	440a      	add	r2, r1
 800930e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	e097      	b.n	800944a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	0151      	lsls	r1, r2, #5
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	440a      	add	r2, r1
 8009330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009338:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8083 	beq.w	800944a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	2101      	movs	r1, #1
 8009356:	fa01 f303 	lsl.w	r3, r1, r3
 800935a:	6979      	ldr	r1, [r7, #20]
 800935c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009360:	4313      	orrs	r3, r2
 8009362:	634b      	str	r3, [r1, #52]	; 0x34
 8009364:	e071      	b.n	800944a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009380:	0cdb      	lsrs	r3, r3, #19
 8009382:	04db      	lsls	r3, r3, #19
 8009384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	440a      	add	r2, r1
 800939c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f8:	6939      	ldr	r1, [r7, #16]
 80093fa:	0148      	lsls	r0, r1, #5
 80093fc:	6979      	ldr	r1, [r7, #20]
 80093fe:	4401      	add	r1, r0
 8009400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009404:	4313      	orrs	r3, r2
 8009406:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d10d      	bne.n	800942a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6919      	ldr	r1, [r3, #16]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009426:	460a      	mov	r2, r1
 8009428:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009448:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d14a      	bne.n	800950c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800948a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800948e:	f040 8086 	bne.w	800959e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	7812      	ldrb	r2, [r2, #0]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	7812      	ldrb	r2, [r2, #0]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d902      	bls.n	80094f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
          break;
 80094ee:	e056      	b.n	800959e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009508:	d0e7      	beq.n	80094da <USB_EPStopXfer+0x82>
 800950a:	e048      	b.n	800959e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009524:	d13b      	bne.n	800959e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	7812      	ldrb	r2, [r2, #0]
 800953a:	0151      	lsls	r1, r2, #5
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	440a      	add	r2, r1
 8009540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009548:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	7812      	ldrb	r2, [r2, #0]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800956c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f242 7210 	movw	r2, #10000	; 0x2710
 800957a:	4293      	cmp	r3, r2
 800957c:	d902      	bls.n	8009584 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
          break;
 8009582:	e00c      	b.n	800959e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800959c:	d0e7      	beq.n	800956e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	460b      	mov	r3, r1
 80095bc:	71fb      	strb	r3, [r7, #7]
 80095be:	4613      	mov	r3, r2
 80095c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80095ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d123      	bne.n	800961a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80095d2:	88bb      	ldrh	r3, [r7, #4]
 80095d4:	3303      	adds	r3, #3
 80095d6:	089b      	lsrs	r3, r3, #2
 80095d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80095da:	2300      	movs	r3, #0
 80095dc:	61bb      	str	r3, [r7, #24]
 80095de:	e018      	b.n	8009612 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	031a      	lsls	r2, r3, #12
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ec:	461a      	mov	r2, r3
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	3301      	adds	r3, #1
 80095f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	3301      	adds	r3, #1
 80095fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	3301      	adds	r3, #1
 8009604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	3301      	adds	r3, #1
 800960a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	3301      	adds	r3, #1
 8009610:	61bb      	str	r3, [r7, #24]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	429a      	cmp	r2, r3
 8009618:	d3e2      	bcc.n	80095e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3724      	adds	r7, #36	; 0x24
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009628:	b480      	push	{r7}
 800962a:	b08b      	sub	sp, #44	; 0x2c
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	089b      	lsrs	r3, r3, #2
 8009642:	b29b      	uxth	r3, r3
 8009644:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800964e:	2300      	movs	r3, #0
 8009650:	623b      	str	r3, [r7, #32]
 8009652:	e014      	b.n	800967e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	3301      	adds	r3, #1
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	3301      	adds	r3, #1
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	3301      	adds	r3, #1
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	3301      	adds	r3, #1
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	3301      	adds	r3, #1
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	6a3a      	ldr	r2, [r7, #32]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	429a      	cmp	r2, r3
 8009684:	d3e6      	bcc.n	8009654 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009686:	8bfb      	ldrh	r3, [r7, #30]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01e      	beq.n	80096ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009696:	461a      	mov	r2, r3
 8009698:	f107 0310 	add.w	r3, r7, #16
 800969c:	6812      	ldr	r2, [r2, #0]
 800969e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	701a      	strb	r2, [r3, #0]
      i++;
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	3301      	adds	r3, #1
 80096b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	3301      	adds	r3, #1
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80096be:	8bfb      	ldrh	r3, [r7, #30]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80096c4:	8bfb      	ldrh	r3, [r7, #30]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1ea      	bne.n	80096a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	372c      	adds	r7, #44	; 0x2c
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d12c      	bne.n	800974e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	db12      	blt.n	800972c <USB_EPSetStall+0x54>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00f      	beq.n	800972c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	0151      	lsls	r1, r2, #5
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	440a      	add	r2, r1
 8009722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800972a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	0151      	lsls	r1, r2, #5
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	440a      	add	r2, r1
 8009742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	e02b      	b.n	80097a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	db12      	blt.n	8009786 <USB_EPSetStall+0xae>
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00f      	beq.n	8009786 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	0151      	lsls	r1, r2, #5
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	440a      	add	r2, r1
 800977c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009780:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009784:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	0151      	lsls	r1, r2, #5
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	440a      	add	r2, r1
 800979c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	785b      	ldrb	r3, [r3, #1]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d128      	bne.n	8009822 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	0151      	lsls	r1, r2, #5
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	440a      	add	r2, r1
 80097e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	791b      	ldrb	r3, [r3, #4]
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d003      	beq.n	8009800 <USB_EPClearStall+0x4c>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	791b      	ldrb	r3, [r3, #4]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d138      	bne.n	8009872 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	0151      	lsls	r1, r2, #5
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	440a      	add	r2, r1
 8009816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800981a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	e027      	b.n	8009872 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	0151      	lsls	r1, r2, #5
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	440a      	add	r2, r1
 8009838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800983c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009840:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	791b      	ldrb	r3, [r3, #4]
 8009846:	2b03      	cmp	r3, #3
 8009848:	d003      	beq.n	8009852 <USB_EPClearStall+0x9e>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	791b      	ldrb	r3, [r3, #4]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d10f      	bne.n	8009872 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	0151      	lsls	r1, r2, #5
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	440a      	add	r2, r1
 8009868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800986c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009870:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800989e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80098b4:	68f9      	ldr	r1, [r7, #12]
 80098b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ba:	4313      	orrs	r3, r2
 80098bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098fa:	f023 0302 	bic.w	r3, r3, #2
 80098fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009928:	f023 0303 	bic.w	r3, r3, #3
 800992c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800993c:	f043 0302 	orr.w	r3, r3, #2
 8009940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4013      	ands	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009968:	68fb      	ldr	r3, [r7, #12]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	4013      	ands	r3, r2
 8009998:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	0c1b      	lsrs	r3, r3, #16
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b085      	sub	sp, #20
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	4013      	ands	r3, r2
 80099cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	b29b      	uxth	r3, r3
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b087      	sub	sp, #28
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4a:	01db      	lsls	r3, r3, #7
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4013      	ands	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a68:	68bb      	ldr	r3, [r7, #8]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	f003 0301 	and.w	r3, r3, #1
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009ab0:	f023 0307 	bic.w	r3, r3, #7
 8009ab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	333c      	adds	r3, #60	; 0x3c
 8009aee:	3304      	adds	r3, #4
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	4a26      	ldr	r2, [pc, #152]	; (8009b90 <USB_EP0_OutStart+0xb8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d90a      	bls.n	8009b12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b0c:	d101      	bne.n	8009b12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e037      	b.n	8009b82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b18:	461a      	mov	r2, r3
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b40:	f043 0318 	orr.w	r3, r3, #24
 8009b44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b5a:	7afb      	ldrb	r3, [r7, #11]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10f      	bne.n	8009b80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	4f54300a 	.word	0x4f54300a

08009b94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <USB_CoreReset+0x64>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d901      	bls.n	8009bb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e01b      	b.n	8009bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	daf2      	bge.n	8009ba0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f043 0201 	orr.w	r2, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a09      	ldr	r2, [pc, #36]	; (8009bf8 <USB_CoreReset+0x64>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d901      	bls.n	8009bdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e006      	b.n	8009bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d0f0      	beq.n	8009bca <USB_CoreReset+0x36>

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	00030d40 	.word	0x00030d40

08009bfc <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8009c08:	f643 4050 	movw	r0, #15440	; 0x3c50
 8009c0c:	f002 fae8 	bl	800c1e0 <USBD_static_malloc>
 8009c10:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d109      	bne.n	8009c2c <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	32b0      	adds	r2, #176	; 0xb0
 8009c22:	2100      	movs	r1, #0
 8009c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e07e      	b.n	8009d2a <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	32b0      	adds	r2, #176	; 0xb0
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32b0      	adds	r2, #176	; 0xb0
 8009c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7c1b      	ldrb	r3, [r3, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10e      	bne.n	8009c76 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8009c58:	4b36      	ldr	r3, [pc, #216]	; (8009d34 <USBD_AUDIO_Init+0x138>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 020f 	and.w	r2, r3, #15
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	440b      	add	r3, r1
 8009c6c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009c70:	2201      	movs	r2, #1
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	e00d      	b.n	8009c92 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8009c76:	4b2f      	ldr	r3, [pc, #188]	; (8009d34 <USBD_AUDIO_Init+0x138>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	f003 020f 	and.w	r2, r3, #15
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	440b      	add	r3, r1
 8009c8a:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009c8e:	2201      	movs	r2, #1
 8009c90:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8009c92:	4b28      	ldr	r3, [pc, #160]	; (8009d34 <USBD_AUDIO_Init+0x138>)
 8009c94:	7819      	ldrb	r1, [r3, #0]
 8009c96:	23c0      	movs	r3, #192	; 0xc0
 8009c98:	2201      	movs	r2, #1
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f002 f97d 	bl	800bf9a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8009ca0:	4b24      	ldr	r3, [pc, #144]	; (8009d34 <USBD_AUDIO_Init+0x138>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 020f 	and.w	r2, r3, #15
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	440b      	add	r3, r1
 8009cb4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cb8:	2201      	movs	r2, #1
 8009cba:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009cc8:	2203      	movs	r2, #3
 8009cca:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	33b0      	adds	r3, #176	; 0xb0
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2200      	movs	r2, #0
 8009d06:	2146      	movs	r1, #70	; 0x46
 8009d08:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8009d0c:	4798      	blx	r3
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e008      	b.n	8009d2a <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8009d18:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <USBD_AUDIO_Init+0x138>)
 8009d1a:	7819      	ldrb	r1, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	1d1a      	adds	r2, r3, #4
 8009d20:	23c0      	movs	r3, #192	; 0xc0
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f002 fa28 	bl	800c178 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200000d2 	.word	0x200000d2

08009d38 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8009d44:	4b28      	ldr	r3, [pc, #160]	; (8009de8 <USBD_AUDIO_DeInit+0xb0>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f002 f94b 	bl	800bfe6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <USBD_AUDIO_DeInit+0xb0>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 020f 	and.w	r2, r3, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	440b      	add	r3, r1
 8009d64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d68:	2200      	movs	r2, #0
 8009d6a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8009d6c:	4b1e      	ldr	r3, [pc, #120]	; (8009de8 <USBD_AUDIO_DeInit+0xb0>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	f003 020f 	and.w	r2, r3, #15
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	440b      	add	r3, r1
 8009d80:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009d84:	2200      	movs	r2, #0
 8009d86:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32b0      	adds	r2, #176	; 0xb0
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d020      	beq.n	8009ddc <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	33b0      	adds	r3, #176	; 0xb0
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2000      	movs	r0, #0
 8009dae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32b0      	adds	r2, #176	; 0xb0
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 fa1c 	bl	800c1fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32b0      	adds	r2, #176	; 0xb0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200000d2 	.word	0x200000d2

08009dec <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	32b0      	adds	r2, #176	; 0xb0
 8009e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0c:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e0c1      	b.n	8009f9c <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01a      	beq.n	8009e5a <USBD_AUDIO_Setup+0x6e>
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	f040 80b1 	bne.w	8009f8c <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d006      	beq.n	8009e40 <USBD_AUDIO_Setup+0x54>
 8009e32:	2b81      	cmp	r3, #129	; 0x81
 8009e34:	d109      	bne.n	8009e4a <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f9d7 	bl	800a1ec <AUDIO_REQ_GetCurrent>
          break;
 8009e3e:	e00b      	b.n	8009e58 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f9fe 	bl	800a244 <AUDIO_REQ_SetCurrent>
          break;
 8009e48:	e006      	b.n	8009e58 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 fc62 	bl	800b716 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e52:	2303      	movs	r3, #3
 8009e54:	75fb      	strb	r3, [r7, #23]
          break;
 8009e56:	bf00      	nop
      }
      break;
 8009e58:	e09f      	b.n	8009f9a <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b0b      	cmp	r3, #11
 8009e60:	f200 8089 	bhi.w	8009f76 <USBD_AUDIO_Setup+0x18a>
 8009e64:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <USBD_AUDIO_Setup+0x80>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009e9d 	.word	0x08009e9d
 8009e70:	08009f85 	.word	0x08009f85
 8009e74:	08009f77 	.word	0x08009f77
 8009e78:	08009f77 	.word	0x08009f77
 8009e7c:	08009f77 	.word	0x08009f77
 8009e80:	08009f77 	.word	0x08009f77
 8009e84:	08009ec7 	.word	0x08009ec7
 8009e88:	08009f77 	.word	0x08009f77
 8009e8c:	08009f77 	.word	0x08009f77
 8009e90:	08009f77 	.word	0x08009f77
 8009e94:	08009f0f 	.word	0x08009f0f
 8009e98:	08009f37 	.word	0x08009f37
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d107      	bne.n	8009eb8 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ea8:	f107 0308 	add.w	r3, r7, #8
 8009eac:	2202      	movs	r2, #2
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 fca1 	bl	800b7f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eb6:	e068      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 fc2b 	bl	800b716 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec4:	e061      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	885b      	ldrh	r3, [r3, #2]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b21      	cmp	r3, #33	; 0x21
 8009ed0:	d15a      	bne.n	8009f88 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fa21 	bl	800a320 <USBD_AUDIO_GetAudioHeaderDesc>
 8009ede:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00c      	beq.n	8009f00 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88db      	ldrh	r3, [r3, #6]
 8009eea:	2b09      	cmp	r3, #9
 8009eec:	bf28      	it	cs
 8009eee:	2309      	movcs	r3, #9
 8009ef0:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	68f9      	ldr	r1, [r7, #12]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 fc7d 	bl	800b7f8 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8009efe:	e043      	b.n	8009f88 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fc07 	bl	800b716 <USBD_CtlError>
              ret = USBD_FAIL;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f0c:	e03c      	b.n	8009f88 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d106      	bne.n	8009f28 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 fc69 	bl	800b7f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f26:	e030      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fbf3 	bl	800b716 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	75fb      	strb	r3, [r7, #23]
          break;
 8009f34:	e029      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d112      	bne.n	8009f68 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	885b      	ldrh	r3, [r3, #2]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d806      	bhi.n	8009f5a <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	885b      	ldrh	r3, [r3, #2]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f58:	e017      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 fbda 	bl	800b716 <USBD_CtlError>
              ret = USBD_FAIL;
 8009f62:	2303      	movs	r3, #3
 8009f64:	75fb      	strb	r3, [r7, #23]
          break;
 8009f66:	e010      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 fbd3 	bl	800b716 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f70:	2303      	movs	r3, #3
 8009f72:	75fb      	strb	r3, [r7, #23]
          break;
 8009f74:	e009      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 fbcc 	bl	800b716 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	75fb      	strb	r3, [r7, #23]
          break;
 8009f82:	e002      	b.n	8009f8a <USBD_AUDIO_Setup+0x19e>
          break;
 8009f84:	bf00      	nop
 8009f86:	e008      	b.n	8009f9a <USBD_AUDIO_Setup+0x1ae>
          break;
 8009f88:	bf00      	nop
      }
      break;
 8009f8a:	e006      	b.n	8009f9a <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 fbc1 	bl	800b716 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	75fb      	strb	r3, [r7, #23]
      break;
 8009f98:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	226d      	movs	r2, #109	; 0x6d
 8009fb0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8009fb2:	4b03      	ldr	r3, [pc, #12]	; (8009fc0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20000058 	.word	0x20000058

08009fc4 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	32b0      	adds	r2, #176	; 0xb0
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e02a      	b.n	800a056 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a006:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d122      	bne.n	800a054 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a014:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d11b      	bne.n	800a054 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	33b0      	adds	r3, #176	; 0xb0
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800a034:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 800a038:	4610      	mov	r0, r2
 800a03a:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	32b0      	adds	r2, #176	; 0xb0
 800a0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0da:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e07c      	b.n	800a1e0 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800a0e6:	4b40      	ldr	r3, [pc, #256]	; (800a1e8 <USBD_AUDIO_DataOut+0x128>)
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d176      	bne.n	800a1de <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f002 f860 	bl	800c1ba <USBD_LL_GetRxDataSize>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	33b0      	adds	r3, #176	; 0xb0
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800a116:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800a11a:	4611      	mov	r1, r2
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	440a      	add	r2, r1
 800a120:	1d10      	adds	r0, r2, #4
 800a122:	8979      	ldrh	r1, [r7, #10]
 800a124:	2201      	movs	r2, #1
 800a126:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a12e:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800a132:	897b      	ldrh	r3, [r7, #10]
 800a134:	4413      	add	r3, r2
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a13e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a148:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800a14c:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800a150:	d121      	bne.n	800a196 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a158:	2200      	movs	r2, #0
 800a15a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a164:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d114      	bne.n	800a196 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	33b0      	adds	r3, #176	; 0xb0
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	1d10      	adds	r0, r2, #4
 800a182:	2201      	movs	r2, #1
 800a184:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800a188:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a19c:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10d      	bne.n	800a1c0 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a1aa:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800a1ae:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800a1b2:	d105      	bne.n	800a1c0 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a1c0:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <USBD_AUDIO_DataOut+0x128>)
 800a1c2:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a1ca:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800a1ce:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	1d1a      	adds	r2, r3, #4
 800a1d6:	23c0      	movs	r3, #192	; 0xc0
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 ffcd 	bl	800c178 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	200000d2 	.word	0x200000d2

0800a1ec <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	32b0      	adds	r2, #176	; 0xb0
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d017      	beq.n	800a23c <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800a212:	330b      	adds	r3, #11
 800a214:	2240      	movs	r2, #64	; 0x40
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f002 f84f 	bl	800c2bc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800a224:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	88d2      	ldrh	r2, [r2, #6]
 800a22a:	2a40      	cmp	r2, #64	; 0x40
 800a22c:	bf28      	it	cs
 800a22e:	2240      	movcs	r2, #64	; 0x40
 800a230:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 fadf 	bl	800b7f8 <USBD_CtlSendData>
 800a23a:	e000      	b.n	800a23e <AUDIO_REQ_GetCurrent+0x52>
    return;
 800a23c:	bf00      	nop
}
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	32b0      	adds	r2, #176	; 0xb0
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d02f      	beq.n	800a2c4 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	88db      	ldrh	r3, [r3, #6]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d02c      	beq.n	800a2c6 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	88db      	ldrh	r3, [r3, #6]
 800a27c:	2b3f      	cmp	r3, #63	; 0x3f
 800a27e:	d803      	bhi.n	800a288 <AUDIO_REQ_SetCurrent+0x44>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	88db      	ldrh	r3, [r3, #6]
 800a284:	b2da      	uxtb	r2, r3
 800a286:	e000      	b.n	800a28a <AUDIO_REQ_SetCurrent+0x46>
 800a288:	2240      	movs	r2, #64	; 0x40
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a290:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	889b      	ldrh	r3, [r3, #4]
 800a298:	0a1b      	lsrs	r3, r3, #8
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a2a4:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800a2ae:	330b      	adds	r3, #11
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800a2b6:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 fac7 	bl	800b850 <USBD_CtlPrepareRx>
 800a2c2:	e000      	b.n	800a2c6 <AUDIO_REQ_SetCurrent+0x82>
    return;
 800a2c4:	bf00      	nop
  }
}
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	220a      	movs	r2, #10
 800a2d8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a2da:	4b03      	ldr	r3, [pc, #12]	; (800a2e8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	200000c8 	.word	0x200000c8

0800a2ec <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e009      	b.n	800a314 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	33b0      	adds	r3, #176	; 0xb0
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800a330:	2300      	movs	r3, #0
 800a332:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	885b      	ldrh	r3, [r3, #2]
 800a338:	b29a      	uxth	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	429a      	cmp	r2, r3
 800a342:	d91c      	bls.n	800a37e <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a34c:	e011      	b.n	800a372 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a34e:	f107 030a 	add.w	r3, r7, #10
 800a352:	4619      	mov	r1, r3
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	f000 fbe0 	bl	800ab1a <USBD_GetNextDesc>
 800a35a:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	2b24      	cmp	r3, #36	; 0x24
 800a362:	d106      	bne.n	800a372 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d102      	bne.n	800a372 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	613b      	str	r3, [r7, #16]
        break;
 800a370:	e005      	b.n	800a37e <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	885b      	ldrh	r3, [r3, #2]
 800a376:	b29a      	uxth	r2, r3
 800a378:	897b      	ldrh	r3, [r7, #10]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d8e7      	bhi.n	800a34e <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800a37e:	693b      	ldr	r3, [r7, #16]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e01f      	b.n	800a3e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	79fa      	ldrb	r2, [r7, #7]
 800a3d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f001 fd79 	bl	800becc <USBD_LL_Init>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e025      	b.n	800a44c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32ae      	adds	r2, #174	; 0xae
 800a412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00f      	beq.n	800a43c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	32ae      	adds	r2, #174	; 0xae
 800a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	f107 020e 	add.w	r2, r7, #14
 800a430:	4610      	mov	r0, r2
 800a432:	4798      	blx	r3
 800a434:	4602      	mov	r2, r0
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 fd81 	bl	800bf64 <USBD_LL_Start>
 800a462:	4603      	mov	r3, r0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d009      	beq.n	800a4b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	78fa      	ldrb	r2, [r7, #3]
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	78fa      	ldrb	r2, [r7, #3]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f001 f8ce 	bl	800b6a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a514:	461a      	mov	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	2b02      	cmp	r3, #2
 800a528:	d01a      	beq.n	800a560 <USBD_LL_SetupStage+0x72>
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d822      	bhi.n	800a574 <USBD_LL_SetupStage+0x86>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <USBD_LL_SetupStage+0x4a>
 800a532:	2b01      	cmp	r3, #1
 800a534:	d00a      	beq.n	800a54c <USBD_LL_SetupStage+0x5e>
 800a536:	e01d      	b.n	800a574 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fb25 	bl	800ab90 <USBD_StdDevReq>
 800a546:	4603      	mov	r3, r0
 800a548:	73fb      	strb	r3, [r7, #15]
      break;
 800a54a:	e020      	b.n	800a58e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fb8d 	bl	800ac74 <USBD_StdItfReq>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73fb      	strb	r3, [r7, #15]
      break;
 800a55e:	e016      	b.n	800a58e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fbef 	bl	800ad4c <USBD_StdEPReq>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]
      break;
 800a572:	e00c      	b.n	800a58e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a57a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fd4e 	bl	800c024 <USBD_LL_StallEP>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]
      break;
 800a58c:	bf00      	nop
  }

  return ret;
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a5aa:	7afb      	ldrb	r3, [r7, #11]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d16e      	bne.n	800a68e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a5b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	f040 8098 	bne.w	800a6f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d913      	bls.n	800a5f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	1ad2      	subs	r2, r2, r3
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	bf28      	it	cs
 800a5ea:	4613      	movcs	r3, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f001 f94a 	bl	800b88a <USBD_CtlContinueRx>
 800a5f6:	e07d      	b.n	800a6f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5fe:	f003 031f 	and.w	r3, r3, #31
 800a602:	2b02      	cmp	r3, #2
 800a604:	d014      	beq.n	800a630 <USBD_LL_DataOutStage+0x98>
 800a606:	2b02      	cmp	r3, #2
 800a608:	d81d      	bhi.n	800a646 <USBD_LL_DataOutStage+0xae>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <USBD_LL_DataOutStage+0x7c>
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d003      	beq.n	800a61a <USBD_LL_DataOutStage+0x82>
 800a612:	e018      	b.n	800a646 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	75bb      	strb	r3, [r7, #22]
            break;
 800a618:	e018      	b.n	800a64c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a620:	b2db      	uxtb	r3, r3
 800a622:	4619      	mov	r1, r3
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 fa5e 	bl	800aae6 <USBD_CoreFindIF>
 800a62a:	4603      	mov	r3, r0
 800a62c:	75bb      	strb	r3, [r7, #22]
            break;
 800a62e:	e00d      	b.n	800a64c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a636:	b2db      	uxtb	r3, r3
 800a638:	4619      	mov	r1, r3
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 fa60 	bl	800ab00 <USBD_CoreFindEP>
 800a640:	4603      	mov	r3, r0
 800a642:	75bb      	strb	r3, [r7, #22]
            break;
 800a644:	e002      	b.n	800a64c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	75bb      	strb	r3, [r7, #22]
            break;
 800a64a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a64c:	7dbb      	ldrb	r3, [r7, #22]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d119      	bne.n	800a686 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d113      	bne.n	800a686 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a65e:	7dba      	ldrb	r2, [r7, #22]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	32ae      	adds	r2, #174	; 0xae
 800a664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a66e:	7dba      	ldrb	r2, [r7, #22]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a676:	7dba      	ldrb	r2, [r7, #22]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	32ae      	adds	r2, #174	; 0xae
 800a67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f001 f910 	bl	800b8ac <USBD_CtlSendStatus>
 800a68c:	e032      	b.n	800a6f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a68e:	7afb      	ldrb	r3, [r7, #11]
 800a690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a694:	b2db      	uxtb	r3, r3
 800a696:	4619      	mov	r1, r3
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 fa31 	bl	800ab00 <USBD_CoreFindEP>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6a2:	7dbb      	ldrb	r3, [r7, #22]
 800a6a4:	2bff      	cmp	r3, #255	; 0xff
 800a6a6:	d025      	beq.n	800a6f4 <USBD_LL_DataOutStage+0x15c>
 800a6a8:	7dbb      	ldrb	r3, [r7, #22]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d122      	bne.n	800a6f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d117      	bne.n	800a6ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a6ba:	7dba      	ldrb	r2, [r7, #22]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	32ae      	adds	r2, #174	; 0xae
 800a6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00f      	beq.n	800a6ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a6ca:	7dba      	ldrb	r2, [r7, #22]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a6d2:	7dba      	ldrb	r2, [r7, #22]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	32ae      	adds	r2, #174	; 0xae
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	7afa      	ldrb	r2, [r7, #11]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	4798      	blx	r3
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	e000      	b.n	800a6f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b086      	sub	sp, #24
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	460b      	mov	r3, r1
 800a708:	607a      	str	r2, [r7, #4]
 800a70a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a70c:	7afb      	ldrb	r3, [r7, #11]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d16f      	bne.n	800a7f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3314      	adds	r3, #20
 800a716:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d15a      	bne.n	800a7d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d914      	bls.n	800a758 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	1ad2      	subs	r2, r2, r3
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	461a      	mov	r2, r3
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f001 f872 	bl	800b82e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a74a:	2300      	movs	r3, #0
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f001 fd11 	bl	800c178 <USBD_LL_PrepareReceive>
 800a756:	e03f      	b.n	800a7d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	68da      	ldr	r2, [r3, #12]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	429a      	cmp	r2, r3
 800a762:	d11c      	bne.n	800a79e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d316      	bcc.n	800a79e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d20f      	bcs.n	800a79e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a77e:	2200      	movs	r2, #0
 800a780:	2100      	movs	r1, #0
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f001 f853 	bl	800b82e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a790:	2300      	movs	r3, #0
 800a792:	2200      	movs	r2, #0
 800a794:	2100      	movs	r1, #0
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f001 fcee 	bl	800c178 <USBD_LL_PrepareReceive>
 800a79c:	e01c      	b.n	800a7d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d10f      	bne.n	800a7ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ca:	2180      	movs	r1, #128	; 0x80
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f001 fc29 	bl	800c024 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f001 f87d 	bl	800b8d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d03a      	beq.n	800a858 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7ff fe42 	bl	800a46c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7f0:	e032      	b.n	800a858 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a7f2:	7afb      	ldrb	r3, [r7, #11]
 800a7f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f97f 	bl	800ab00 <USBD_CoreFindEP>
 800a802:	4603      	mov	r3, r0
 800a804:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	2bff      	cmp	r3, #255	; 0xff
 800a80a:	d025      	beq.n	800a858 <USBD_LL_DataInStage+0x15a>
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d122      	bne.n	800a858 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d11c      	bne.n	800a858 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a81e:	7dfa      	ldrb	r2, [r7, #23]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	32ae      	adds	r2, #174	; 0xae
 800a824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d014      	beq.n	800a858 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a82e:	7dfa      	ldrb	r2, [r7, #23]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a836:	7dfa      	ldrb	r2, [r7, #23]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	32ae      	adds	r2, #174	; 0xae
 800a83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	7afa      	ldrb	r2, [r7, #11]
 800a844:	4611      	mov	r1, r2
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a84e:	7dbb      	ldrb	r3, [r7, #22]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a854:	7dbb      	ldrb	r3, [r7, #22]
 800a856:	e000      	b.n	800a85a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d014      	beq.n	800a8c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00e      	beq.n	800a8c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6852      	ldr	r2, [r2, #4]
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	4798      	blx	r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 fb63 	bl	800bf9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2240      	movs	r2, #64	; 0x40
 800a8e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8e4:	2340      	movs	r3, #64	; 0x40
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2180      	movs	r1, #128	; 0x80
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 fb55 	bl	800bf9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2240      	movs	r2, #64	; 0x40
 800a8fa:	621a      	str	r2, [r3, #32]

  return ret;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a934:	b2da      	uxtb	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2204      	movs	r2, #4
 800a940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a952:	b480      	push	{r7}
 800a954:	b083      	sub	sp, #12
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b04      	cmp	r3, #4
 800a964:	d106      	bne.n	800a974 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b03      	cmp	r3, #3
 800a994:	d110      	bne.n	800a9b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a6:	69db      	ldr	r3, [r3, #28]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d005      	beq.n	800a9b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	32ae      	adds	r2, #174	; 0xae
 800a9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e01c      	b.n	800aa1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d115      	bne.n	800aa1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	32ae      	adds	r2, #174	; 0xae
 800a9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00b      	beq.n	800aa1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32ae      	adds	r2, #174	; 0xae
 800aa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	4611      	mov	r1, r2
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	32ae      	adds	r2, #174	; 0xae
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e01c      	b.n	800aa82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d115      	bne.n	800aa80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32ae      	adds	r2, #174	; 0xae
 800aa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	32ae      	adds	r2, #174	; 0xae
 800aa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	78fa      	ldrb	r2, [r7, #3]
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b083      	sub	sp, #12
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00e      	beq.n	800aadc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	6852      	ldr	r2, [r2, #4]
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	4611      	mov	r1, r2
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aaf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	881a      	ldrh	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	4413      	add	r3, r2
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4413      	add	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab46:	68fb      	ldr	r3, [r7, #12]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab72:	8a3b      	ldrh	r3, [r7, #16]
 800ab74:	021b      	lsls	r3, r3, #8
 800ab76:	b21a      	sxth	r2, r3
 800ab78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	b21b      	sxth	r3, r3
 800ab80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab82:	89fb      	ldrh	r3, [r7, #14]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	371c      	adds	r7, #28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aba6:	2b40      	cmp	r3, #64	; 0x40
 800aba8:	d005      	beq.n	800abb6 <USBD_StdDevReq+0x26>
 800abaa:	2b40      	cmp	r3, #64	; 0x40
 800abac:	d857      	bhi.n	800ac5e <USBD_StdDevReq+0xce>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00f      	beq.n	800abd2 <USBD_StdDevReq+0x42>
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	d153      	bne.n	800ac5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	32ae      	adds	r2, #174	; 0xae
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]
      break;
 800abd0:	e04a      	b.n	800ac68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	785b      	ldrb	r3, [r3, #1]
 800abd6:	2b09      	cmp	r3, #9
 800abd8:	d83b      	bhi.n	800ac52 <USBD_StdDevReq+0xc2>
 800abda:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <USBD_StdDevReq+0x50>)
 800abdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800ac49 	.word	0x0800ac49
 800abe8:	0800ac53 	.word	0x0800ac53
 800abec:	0800ac3f 	.word	0x0800ac3f
 800abf0:	0800ac53 	.word	0x0800ac53
 800abf4:	0800ac13 	.word	0x0800ac13
 800abf8:	0800ac09 	.word	0x0800ac09
 800abfc:	0800ac53 	.word	0x0800ac53
 800ac00:	0800ac2b 	.word	0x0800ac2b
 800ac04:	0800ac1d 	.word	0x0800ac1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa3c 	bl	800b088 <USBD_GetDescriptor>
          break;
 800ac10:	e024      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fba1 	bl	800b35c <USBD_SetAddress>
          break;
 800ac1a:	e01f      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fbe0 	bl	800b3e4 <USBD_SetConfig>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
          break;
 800ac28:	e018      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fc83 	bl	800b538 <USBD_GetConfig>
          break;
 800ac32:	e013      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fcb4 	bl	800b5a4 <USBD_GetStatus>
          break;
 800ac3c:	e00e      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fce3 	bl	800b60c <USBD_SetFeature>
          break;
 800ac46:	e009      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fd07 	bl	800b65e <USBD_ClrFeature>
          break;
 800ac50:	e004      	b.n	800ac5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fd5e 	bl	800b716 <USBD_CtlError>
          break;
 800ac5a:	bf00      	nop
      }
      break;
 800ac5c:	e004      	b.n	800ac68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fd58 	bl	800b716 <USBD_CtlError>
      break;
 800ac66:	bf00      	nop
  }

  return ret;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop

0800ac74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac8a:	2b40      	cmp	r3, #64	; 0x40
 800ac8c:	d005      	beq.n	800ac9a <USBD_StdItfReq+0x26>
 800ac8e:	2b40      	cmp	r3, #64	; 0x40
 800ac90:	d852      	bhi.n	800ad38 <USBD_StdItfReq+0xc4>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <USBD_StdItfReq+0x26>
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d14e      	bne.n	800ad38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	3b01      	subs	r3, #1
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d840      	bhi.n	800ad2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	889b      	ldrh	r3, [r3, #4]
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d836      	bhi.n	800ad20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	889b      	ldrh	r3, [r3, #4]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ff13 	bl	800aae6 <USBD_CoreFindIF>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2bff      	cmp	r3, #255	; 0xff
 800acc8:	d01d      	beq.n	800ad06 <USBD_StdItfReq+0x92>
 800acca:	7bbb      	ldrb	r3, [r7, #14]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d11a      	bne.n	800ad06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800acd0:	7bba      	ldrb	r2, [r7, #14]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32ae      	adds	r2, #174	; 0xae
 800acd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00f      	beq.n	800ad00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ace0:	7bba      	ldrb	r2, [r7, #14]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ace8:	7bba      	ldrb	r2, [r7, #14]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	32ae      	adds	r2, #174	; 0xae
 800acee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	4798      	blx	r3
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acfe:	e004      	b.n	800ad0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ad00:	2303      	movs	r3, #3
 800ad02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad04:	e001      	b.n	800ad0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ad06:	2303      	movs	r3, #3
 800ad08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	88db      	ldrh	r3, [r3, #6]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d110      	bne.n	800ad34 <USBD_StdItfReq+0xc0>
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10d      	bne.n	800ad34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fdc7 	bl	800b8ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad1e:	e009      	b.n	800ad34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fcf7 	bl	800b716 <USBD_CtlError>
          break;
 800ad28:	e004      	b.n	800ad34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fcf2 	bl	800b716 <USBD_CtlError>
          break;
 800ad32:	e000      	b.n	800ad36 <USBD_StdItfReq+0xc2>
          break;
 800ad34:	bf00      	nop
      }
      break;
 800ad36:	e004      	b.n	800ad42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fceb 	bl	800b716 <USBD_CtlError>
      break;
 800ad40:	bf00      	nop
  }

  return ret;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	889b      	ldrh	r3, [r3, #4]
 800ad5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad68:	2b40      	cmp	r3, #64	; 0x40
 800ad6a:	d007      	beq.n	800ad7c <USBD_StdEPReq+0x30>
 800ad6c:	2b40      	cmp	r3, #64	; 0x40
 800ad6e:	f200 817f 	bhi.w	800b070 <USBD_StdEPReq+0x324>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d02a      	beq.n	800adcc <USBD_StdEPReq+0x80>
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	f040 817a 	bne.w	800b070 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff febd 	bl	800ab00 <USBD_CoreFindEP>
 800ad86:	4603      	mov	r3, r0
 800ad88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad8a:	7b7b      	ldrb	r3, [r7, #13]
 800ad8c:	2bff      	cmp	r3, #255	; 0xff
 800ad8e:	f000 8174 	beq.w	800b07a <USBD_StdEPReq+0x32e>
 800ad92:	7b7b      	ldrb	r3, [r7, #13]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f040 8170 	bne.w	800b07a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad9a:	7b7a      	ldrb	r2, [r7, #13]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ada2:	7b7a      	ldrb	r2, [r7, #13]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	32ae      	adds	r2, #174	; 0xae
 800ada8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 8163 	beq.w	800b07a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800adb4:	7b7a      	ldrb	r2, [r7, #13]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	32ae      	adds	r2, #174	; 0xae
 800adba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	4798      	blx	r3
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800adca:	e156      	b.n	800b07a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	2b03      	cmp	r3, #3
 800add2:	d008      	beq.n	800ade6 <USBD_StdEPReq+0x9a>
 800add4:	2b03      	cmp	r3, #3
 800add6:	f300 8145 	bgt.w	800b064 <USBD_StdEPReq+0x318>
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 809b 	beq.w	800af16 <USBD_StdEPReq+0x1ca>
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d03c      	beq.n	800ae5e <USBD_StdEPReq+0x112>
 800ade4:	e13e      	b.n	800b064 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d002      	beq.n	800adf8 <USBD_StdEPReq+0xac>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d016      	beq.n	800ae24 <USBD_StdEPReq+0xd8>
 800adf6:	e02c      	b.n	800ae52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00d      	beq.n	800ae1a <USBD_StdEPReq+0xce>
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	2b80      	cmp	r3, #128	; 0x80
 800ae02:	d00a      	beq.n	800ae1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 f90b 	bl	800c024 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae0e:	2180      	movs	r1, #128	; 0x80
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 f907 	bl	800c024 <USBD_LL_StallEP>
 800ae16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae18:	e020      	b.n	800ae5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fc7a 	bl	800b716 <USBD_CtlError>
              break;
 800ae22:	e01b      	b.n	800ae5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	885b      	ldrh	r3, [r3, #2]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10e      	bne.n	800ae4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00b      	beq.n	800ae4a <USBD_StdEPReq+0xfe>
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	2b80      	cmp	r3, #128	; 0x80
 800ae36:	d008      	beq.n	800ae4a <USBD_StdEPReq+0xfe>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	88db      	ldrh	r3, [r3, #6]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d104      	bne.n	800ae4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 f8ed 	bl	800c024 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fd2e 	bl	800b8ac <USBD_CtlSendStatus>

              break;
 800ae50:	e004      	b.n	800ae5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fc5e 	bl	800b716 <USBD_CtlError>
              break;
 800ae5a:	bf00      	nop
          }
          break;
 800ae5c:	e107      	b.n	800b06e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d002      	beq.n	800ae70 <USBD_StdEPReq+0x124>
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d016      	beq.n	800ae9c <USBD_StdEPReq+0x150>
 800ae6e:	e04b      	b.n	800af08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00d      	beq.n	800ae92 <USBD_StdEPReq+0x146>
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	2b80      	cmp	r3, #128	; 0x80
 800ae7a:	d00a      	beq.n	800ae92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 f8cf 	bl	800c024 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae86:	2180      	movs	r1, #128	; 0x80
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 f8cb 	bl	800c024 <USBD_LL_StallEP>
 800ae8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae90:	e040      	b.n	800af14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fc3e 	bl	800b716 <USBD_CtlError>
              break;
 800ae9a:	e03b      	b.n	800af14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	885b      	ldrh	r3, [r3, #2]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d136      	bne.n	800af12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d004      	beq.n	800aeb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f8d5 	bl	800c062 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fcf7 	bl	800b8ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff fe1c 	bl	800ab00 <USBD_CoreFindEP>
 800aec8:	4603      	mov	r3, r0
 800aeca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aecc:	7b7b      	ldrb	r3, [r7, #13]
 800aece:	2bff      	cmp	r3, #255	; 0xff
 800aed0:	d01f      	beq.n	800af12 <USBD_StdEPReq+0x1c6>
 800aed2:	7b7b      	ldrb	r3, [r7, #13]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d11c      	bne.n	800af12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aed8:	7b7a      	ldrb	r2, [r7, #13]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aee0:	7b7a      	ldrb	r2, [r7, #13]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	32ae      	adds	r2, #174	; 0xae
 800aee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d010      	beq.n	800af12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aef0:	7b7a      	ldrb	r2, [r7, #13]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	32ae      	adds	r2, #174	; 0xae
 800aef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
 800af02:	4603      	mov	r3, r0
 800af04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800af06:	e004      	b.n	800af12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fc03 	bl	800b716 <USBD_CtlError>
              break;
 800af10:	e000      	b.n	800af14 <USBD_StdEPReq+0x1c8>
              break;
 800af12:	bf00      	nop
          }
          break;
 800af14:	e0ab      	b.n	800b06e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d002      	beq.n	800af28 <USBD_StdEPReq+0x1dc>
 800af22:	2b03      	cmp	r3, #3
 800af24:	d032      	beq.n	800af8c <USBD_StdEPReq+0x240>
 800af26:	e097      	b.n	800b058 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d007      	beq.n	800af3e <USBD_StdEPReq+0x1f2>
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b80      	cmp	r3, #128	; 0x80
 800af32:	d004      	beq.n	800af3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fbed 	bl	800b716 <USBD_CtlError>
                break;
 800af3c:	e091      	b.n	800b062 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	da0b      	bge.n	800af5e <USBD_StdEPReq+0x212>
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	3310      	adds	r3, #16
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	4413      	add	r3, r2
 800af5a:	3304      	adds	r3, #4
 800af5c:	e00b      	b.n	800af76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4413      	add	r3, r2
 800af74:	3304      	adds	r3, #4
 800af76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2202      	movs	r2, #2
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fc37 	bl	800b7f8 <USBD_CtlSendData>
              break;
 800af8a:	e06a      	b.n	800b062 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af90:	2b00      	cmp	r3, #0
 800af92:	da11      	bge.n	800afb8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	f003 020f 	and.w	r2, r3, #15
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	3324      	adds	r3, #36	; 0x24
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d117      	bne.n	800afde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fbb0 	bl	800b716 <USBD_CtlError>
                  break;
 800afb6:	e054      	b.n	800b062 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	f003 020f 	and.w	r2, r3, #15
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	4613      	mov	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d104      	bne.n	800afde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fb9d 	bl	800b716 <USBD_CtlError>
                  break;
 800afdc:	e041      	b.n	800b062 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	da0b      	bge.n	800affe <USBD_StdEPReq+0x2b2>
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afec:	4613      	mov	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	3310      	adds	r3, #16
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4413      	add	r3, r2
 800affa:	3304      	adds	r3, #4
 800affc:	e00b      	b.n	800b016 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800affe:	7bbb      	ldrb	r3, [r7, #14]
 800b000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	3304      	adds	r3, #4
 800b016:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <USBD_StdEPReq+0x2d8>
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	2b80      	cmp	r3, #128	; 0x80
 800b022:	d103      	bne.n	800b02c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	e00e      	b.n	800b04a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 f835 	bl	800c0a0 <USBD_LL_IsStallEP>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	e002      	b.n	800b04a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2202      	movs	r2, #2
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fbd1 	bl	800b7f8 <USBD_CtlSendData>
              break;
 800b056:	e004      	b.n	800b062 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fb5b 	bl	800b716 <USBD_CtlError>
              break;
 800b060:	bf00      	nop
          }
          break;
 800b062:	e004      	b.n	800b06e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fb55 	bl	800b716 <USBD_CtlError>
          break;
 800b06c:	bf00      	nop
      }
      break;
 800b06e:	e005      	b.n	800b07c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fb4f 	bl	800b716 <USBD_CtlError>
      break;
 800b078:	e000      	b.n	800b07c <USBD_StdEPReq+0x330>
      break;
 800b07a:	bf00      	nop
  }

  return ret;
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	885b      	ldrh	r3, [r3, #2]
 800b0a2:	0a1b      	lsrs	r3, r3, #8
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	2b06      	cmp	r3, #6
 800b0aa:	f200 8128 	bhi.w	800b2fe <USBD_GetDescriptor+0x276>
 800b0ae:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <USBD_GetDescriptor+0x2c>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0d1 	.word	0x0800b0d1
 800b0b8:	0800b0e9 	.word	0x0800b0e9
 800b0bc:	0800b129 	.word	0x0800b129
 800b0c0:	0800b2ff 	.word	0x0800b2ff
 800b0c4:	0800b2ff 	.word	0x0800b2ff
 800b0c8:	0800b29f 	.word	0x0800b29f
 800b0cc:	0800b2cb 	.word	0x0800b2cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	7c12      	ldrb	r2, [r2, #16]
 800b0dc:	f107 0108 	add.w	r1, r7, #8
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
 800b0e4:	60f8      	str	r0, [r7, #12]
      break;
 800b0e6:	e112      	b.n	800b30e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	7c1b      	ldrb	r3, [r3, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10d      	bne.n	800b10c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f107 0208 	add.w	r2, r7, #8
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
 800b100:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3301      	adds	r3, #1
 800b106:	2202      	movs	r2, #2
 800b108:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b10a:	e100      	b.n	800b30e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	f107 0208 	add.w	r2, r7, #8
 800b118:	4610      	mov	r0, r2
 800b11a:	4798      	blx	r3
 800b11c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3301      	adds	r3, #1
 800b122:	2202      	movs	r2, #2
 800b124:	701a      	strb	r2, [r3, #0]
      break;
 800b126:	e0f2      	b.n	800b30e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	885b      	ldrh	r3, [r3, #2]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b05      	cmp	r3, #5
 800b130:	f200 80ac 	bhi.w	800b28c <USBD_GetDescriptor+0x204>
 800b134:	a201      	add	r2, pc, #4	; (adr r2, 800b13c <USBD_GetDescriptor+0xb4>)
 800b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13a:	bf00      	nop
 800b13c:	0800b155 	.word	0x0800b155
 800b140:	0800b189 	.word	0x0800b189
 800b144:	0800b1bd 	.word	0x0800b1bd
 800b148:	0800b1f1 	.word	0x0800b1f1
 800b14c:	0800b225 	.word	0x0800b225
 800b150:	0800b259 	.word	0x0800b259
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	7c12      	ldrb	r2, [r2, #16]
 800b16c:	f107 0108 	add.w	r1, r7, #8
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
 800b174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b176:	e091      	b.n	800b29c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 facb 	bl	800b716 <USBD_CtlError>
            err++;
 800b180:	7afb      	ldrb	r3, [r7, #11]
 800b182:	3301      	adds	r3, #1
 800b184:	72fb      	strb	r3, [r7, #11]
          break;
 800b186:	e089      	b.n	800b29c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00b      	beq.n	800b1ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	7c12      	ldrb	r2, [r2, #16]
 800b1a0:	f107 0108 	add.w	r1, r7, #8
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4798      	blx	r3
 800b1a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1aa:	e077      	b.n	800b29c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fab1 	bl	800b716 <USBD_CtlError>
            err++;
 800b1b4:	7afb      	ldrb	r3, [r7, #11]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ba:	e06f      	b.n	800b29c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	7c12      	ldrb	r2, [r2, #16]
 800b1d4:	f107 0108 	add.w	r1, r7, #8
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1de:	e05d      	b.n	800b29c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fa97 	bl	800b716 <USBD_CtlError>
            err++;
 800b1e8:	7afb      	ldrb	r3, [r7, #11]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ee:	e055      	b.n	800b29c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00b      	beq.n	800b214 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	7c12      	ldrb	r2, [r2, #16]
 800b208:	f107 0108 	add.w	r1, r7, #8
 800b20c:	4610      	mov	r0, r2
 800b20e:	4798      	blx	r3
 800b210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b212:	e043      	b.n	800b29c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fa7d 	bl	800b716 <USBD_CtlError>
            err++;
 800b21c:	7afb      	ldrb	r3, [r7, #11]
 800b21e:	3301      	adds	r3, #1
 800b220:	72fb      	strb	r3, [r7, #11]
          break;
 800b222:	e03b      	b.n	800b29c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00b      	beq.n	800b248 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	7c12      	ldrb	r2, [r2, #16]
 800b23c:	f107 0108 	add.w	r1, r7, #8
 800b240:	4610      	mov	r0, r2
 800b242:	4798      	blx	r3
 800b244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b246:	e029      	b.n	800b29c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fa63 	bl	800b716 <USBD_CtlError>
            err++;
 800b250:	7afb      	ldrb	r3, [r7, #11]
 800b252:	3301      	adds	r3, #1
 800b254:	72fb      	strb	r3, [r7, #11]
          break;
 800b256:	e021      	b.n	800b29c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	7c12      	ldrb	r2, [r2, #16]
 800b270:	f107 0108 	add.w	r1, r7, #8
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b27a:	e00f      	b.n	800b29c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa49 	bl	800b716 <USBD_CtlError>
            err++;
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	3301      	adds	r3, #1
 800b288:	72fb      	strb	r3, [r7, #11]
          break;
 800b28a:	e007      	b.n	800b29c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fa41 	bl	800b716 <USBD_CtlError>
          err++;
 800b294:	7afb      	ldrb	r3, [r7, #11]
 800b296:	3301      	adds	r3, #1
 800b298:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b29a:	bf00      	nop
      }
      break;
 800b29c:	e037      	b.n	800b30e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7c1b      	ldrb	r3, [r3, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ae:	f107 0208 	add.w	r2, r7, #8
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4798      	blx	r3
 800b2b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2b8:	e029      	b.n	800b30e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fa2a 	bl	800b716 <USBD_CtlError>
        err++;
 800b2c2:	7afb      	ldrb	r3, [r7, #11]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2c8:	e021      	b.n	800b30e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	7c1b      	ldrb	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10d      	bne.n	800b2ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	f107 0208 	add.w	r2, r7, #8
 800b2de:	4610      	mov	r0, r2
 800b2e0:	4798      	blx	r3
 800b2e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	2207      	movs	r2, #7
 800b2ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2ec:	e00f      	b.n	800b30e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fa10 	bl	800b716 <USBD_CtlError>
        err++;
 800b2f6:	7afb      	ldrb	r3, [r7, #11]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b2fc:	e007      	b.n	800b30e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa08 	bl	800b716 <USBD_CtlError>
      err++;
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	3301      	adds	r3, #1
 800b30a:	72fb      	strb	r3, [r7, #11]
      break;
 800b30c:	bf00      	nop
  }

  if (err != 0U)
 800b30e:	7afb      	ldrb	r3, [r7, #11]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d11e      	bne.n	800b352 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	88db      	ldrh	r3, [r3, #6]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d016      	beq.n	800b34a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b31c:	893b      	ldrh	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00e      	beq.n	800b340 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	88da      	ldrh	r2, [r3, #6]
 800b326:	893b      	ldrh	r3, [r7, #8]
 800b328:	4293      	cmp	r3, r2
 800b32a:	bf28      	it	cs
 800b32c:	4613      	movcs	r3, r2
 800b32e:	b29b      	uxth	r3, r3
 800b330:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b332:	893b      	ldrh	r3, [r7, #8]
 800b334:	461a      	mov	r2, r3
 800b336:	68f9      	ldr	r1, [r7, #12]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fa5d 	bl	800b7f8 <USBD_CtlSendData>
 800b33e:	e009      	b.n	800b354 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f9e7 	bl	800b716 <USBD_CtlError>
 800b348:	e004      	b.n	800b354 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 faae 	bl	800b8ac <USBD_CtlSendStatus>
 800b350:	e000      	b.n	800b354 <USBD_GetDescriptor+0x2cc>
    return;
 800b352:	bf00      	nop
  }
}
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop

0800b35c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	889b      	ldrh	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d131      	bne.n	800b3d2 <USBD_SetAddress+0x76>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d12d      	bne.n	800b3d2 <USBD_SetAddress+0x76>
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	885b      	ldrh	r3, [r3, #2]
 800b37a:	2b7f      	cmp	r3, #127	; 0x7f
 800b37c:	d829      	bhi.n	800b3d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	885b      	ldrh	r3, [r3, #2]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b03      	cmp	r3, #3
 800b394:	d104      	bne.n	800b3a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f9bc 	bl	800b716 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39e:	e01d      	b.n	800b3dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7bfa      	ldrb	r2, [r7, #15]
 800b3a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fea3 	bl	800c0f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fa7a 	bl	800b8ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d004      	beq.n	800b3c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c6:	e009      	b.n	800b3dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d0:	e004      	b.n	800b3dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f99e 	bl	800b716 <USBD_CtlError>
  }
}
 800b3da:	bf00      	nop
 800b3dc:	bf00      	nop
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	885b      	ldrh	r3, [r3, #2]
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	4b4e      	ldr	r3, [pc, #312]	; (800b534 <USBD_SetConfig+0x150>)
 800b3fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3fc:	4b4d      	ldr	r3, [pc, #308]	; (800b534 <USBD_SetConfig+0x150>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d905      	bls.n	800b410 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f985 	bl	800b716 <USBD_CtlError>
    return USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e08c      	b.n	800b52a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d002      	beq.n	800b422 <USBD_SetConfig+0x3e>
 800b41c:	2b03      	cmp	r3, #3
 800b41e:	d029      	beq.n	800b474 <USBD_SetConfig+0x90>
 800b420:	e075      	b.n	800b50e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b422:	4b44      	ldr	r3, [pc, #272]	; (800b534 <USBD_SetConfig+0x150>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d020      	beq.n	800b46c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b42a:	4b42      	ldr	r3, [pc, #264]	; (800b534 <USBD_SetConfig+0x150>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b434:	4b3f      	ldr	r3, [pc, #252]	; (800b534 <USBD_SetConfig+0x150>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff f821 	bl	800a482 <USBD_SetClassConfig>
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f962 	bl	800b716 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2202      	movs	r2, #2
 800b456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b45a:	e065      	b.n	800b528 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa25 	bl	800b8ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2203      	movs	r2, #3
 800b466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b46a:	e05d      	b.n	800b528 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa1d 	bl	800b8ac <USBD_CtlSendStatus>
      break;
 800b472:	e059      	b.n	800b528 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b474:	4b2f      	ldr	r3, [pc, #188]	; (800b534 <USBD_SetConfig+0x150>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d112      	bne.n	800b4a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b484:	4b2b      	ldr	r3, [pc, #172]	; (800b534 <USBD_SetConfig+0x150>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b48e:	4b29      	ldr	r3, [pc, #164]	; (800b534 <USBD_SetConfig+0x150>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff f810 	bl	800a4ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa06 	bl	800b8ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4a0:	e042      	b.n	800b528 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b4a2:	4b24      	ldr	r3, [pc, #144]	; (800b534 <USBD_SetConfig+0x150>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d02a      	beq.n	800b506 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7fe fffe 	bl	800a4ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b4be:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <USBD_SetConfig+0x150>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4c8:	4b1a      	ldr	r3, [pc, #104]	; (800b534 <USBD_SetConfig+0x150>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7fe ffd7 	bl	800a482 <USBD_SetClassConfig>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00f      	beq.n	800b4fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f918 	bl	800b716 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7fe ffe3 	bl	800a4ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4fc:	e014      	b.n	800b528 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f9d4 	bl	800b8ac <USBD_CtlSendStatus>
      break;
 800b504:	e010      	b.n	800b528 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f9d0 	bl	800b8ac <USBD_CtlSendStatus>
      break;
 800b50c:	e00c      	b.n	800b528 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f900 	bl	800b716 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <USBD_SetConfig+0x150>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7fe ffcc 	bl	800a4ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b522:	2303      	movs	r3, #3
 800b524:	73fb      	strb	r3, [r7, #15]
      break;
 800b526:	bf00      	nop
  }

  return ret;
 800b528:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	200009d4 	.word	0x200009d4

0800b538 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	88db      	ldrh	r3, [r3, #6]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d004      	beq.n	800b554 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f8e2 	bl	800b716 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b552:	e023      	b.n	800b59c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	dc02      	bgt.n	800b566 <USBD_GetConfig+0x2e>
 800b560:	2b00      	cmp	r3, #0
 800b562:	dc03      	bgt.n	800b56c <USBD_GetConfig+0x34>
 800b564:	e015      	b.n	800b592 <USBD_GetConfig+0x5a>
 800b566:	2b03      	cmp	r3, #3
 800b568:	d00b      	beq.n	800b582 <USBD_GetConfig+0x4a>
 800b56a:	e012      	b.n	800b592 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3308      	adds	r3, #8
 800b576:	2201      	movs	r2, #1
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f93c 	bl	800b7f8 <USBD_CtlSendData>
        break;
 800b580:	e00c      	b.n	800b59c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3304      	adds	r3, #4
 800b586:	2201      	movs	r2, #1
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f934 	bl	800b7f8 <USBD_CtlSendData>
        break;
 800b590:	e004      	b.n	800b59c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f8be 	bl	800b716 <USBD_CtlError>
        break;
 800b59a:	bf00      	nop
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d81e      	bhi.n	800b5fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	88db      	ldrh	r3, [r3, #6]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d004      	beq.n	800b5ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f8a5 	bl	800b716 <USBD_CtlError>
        break;
 800b5cc:	e01a      	b.n	800b604 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d005      	beq.n	800b5ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	f043 0202 	orr.w	r2, r3, #2
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	330c      	adds	r3, #12
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f900 	bl	800b7f8 <USBD_CtlSendData>
      break;
 800b5f8:	e004      	b.n	800b604 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f88a 	bl	800b716 <USBD_CtlError>
      break;
 800b602:	bf00      	nop
  }
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	885b      	ldrh	r3, [r3, #2]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d107      	bne.n	800b62e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f940 	bl	800b8ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b62c:	e013      	b.n	800b656 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	885b      	ldrh	r3, [r3, #2]
 800b632:	2b02      	cmp	r3, #2
 800b634:	d10b      	bne.n	800b64e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	889b      	ldrh	r3, [r3, #4]
 800b63a:	0a1b      	lsrs	r3, r3, #8
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f930 	bl	800b8ac <USBD_CtlSendStatus>
}
 800b64c:	e003      	b.n	800b656 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f860 	bl	800b716 <USBD_CtlError>
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	3b01      	subs	r3, #1
 800b672:	2b02      	cmp	r3, #2
 800b674:	d80b      	bhi.n	800b68e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	885b      	ldrh	r3, [r3, #2]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10c      	bne.n	800b698 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f910 	bl	800b8ac <USBD_CtlSendStatus>
      }
      break;
 800b68c:	e004      	b.n	800b698 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f840 	bl	800b716 <USBD_CtlError>
      break;
 800b696:	e000      	b.n	800b69a <USBD_ClrFeature+0x3c>
      break;
 800b698:	bf00      	nop
  }
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	781a      	ldrb	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7ff fa41 	bl	800ab54 <SWAPBYTE>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f7ff fa34 	bl	800ab54 <SWAPBYTE>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff fa27 	bl	800ab54 <SWAPBYTE>
 800b706:	4603      	mov	r3, r0
 800b708:	461a      	mov	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	80da      	strh	r2, [r3, #6]
}
 800b70e:	bf00      	nop
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b720:	2180      	movs	r1, #128	; 0x80
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 fc7e 	bl	800c024 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b728:	2100      	movs	r1, #0
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fc7a 	bl	800c024 <USBD_LL_StallEP>
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d036      	beq.n	800b7bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b752:	6938      	ldr	r0, [r7, #16]
 800b754:	f000 f836 	bl	800b7c4 <USBD_GetLen>
 800b758:	4603      	mov	r3, r0
 800b75a:	3301      	adds	r3, #1
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	4413      	add	r3, r2
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	7812      	ldrb	r2, [r2, #0]
 800b770:	701a      	strb	r2, [r3, #0]
  idx++;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	3301      	adds	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	4413      	add	r3, r2
 800b77e:	2203      	movs	r2, #3
 800b780:	701a      	strb	r2, [r3, #0]
  idx++;
 800b782:	7dfb      	ldrb	r3, [r7, #23]
 800b784:	3301      	adds	r3, #1
 800b786:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b788:	e013      	b.n	800b7b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	4413      	add	r3, r2
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	7812      	ldrb	r2, [r2, #0]
 800b794:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	3301      	adds	r3, #1
 800b79a:	613b      	str	r3, [r7, #16]
    idx++;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e7      	bne.n	800b78a <USBD_GetString+0x52>
 800b7ba:	e000      	b.n	800b7be <USBD_GetString+0x86>
    return;
 800b7bc:	bf00      	nop
  }
}
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7d4:	e005      	b.n	800b7e2 <USBD_GetLen+0x1e>
  {
    len++;
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f5      	bne.n	800b7d6 <USBD_GetLen+0x12>
  }

  return len;
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2202      	movs	r2, #2
 800b808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	2100      	movs	r1, #0
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 fc89 	bl	800c136 <USBD_LL_Transmit>

  return USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	2100      	movs	r1, #0
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 fc78 	bl	800c136 <USBD_LL_Transmit>

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2203      	movs	r2, #3
 800b860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	2100      	movs	r1, #0
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 fc7c 	bl	800c178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	60f8      	str	r0, [r7, #12]
 800b892:	60b9      	str	r1, [r7, #8]
 800b894:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	2100      	movs	r1, #0
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 fc6b 	bl	800c178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8bc:	2300      	movs	r3, #0
 800b8be:	2200      	movs	r2, #0
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fc37 	bl	800c136 <USBD_LL_Transmit>

  return USBD_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2205      	movs	r2, #5
 800b8de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fc45 	bl	800c178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4912      	ldr	r1, [pc, #72]	; (800b948 <MX_USB_DEVICE_Init+0x50>)
 800b900:	4812      	ldr	r0, [pc, #72]	; (800b94c <MX_USB_DEVICE_Init+0x54>)
 800b902:	f7fe fd41 	bl	800a388 <USBD_Init>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b90c:	f7f7 f8b2 	bl	8002a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800b910:	490f      	ldr	r1, [pc, #60]	; (800b950 <MX_USB_DEVICE_Init+0x58>)
 800b912:	480e      	ldr	r0, [pc, #56]	; (800b94c <MX_USB_DEVICE_Init+0x54>)
 800b914:	f7fe fd68 	bl	800a3e8 <USBD_RegisterClass>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b91e:	f7f7 f8a9 	bl	8002a74 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800b922:	490c      	ldr	r1, [pc, #48]	; (800b954 <MX_USB_DEVICE_Init+0x5c>)
 800b924:	4809      	ldr	r0, [pc, #36]	; (800b94c <MX_USB_DEVICE_Init+0x54>)
 800b926:	f7fe fce1 	bl	800a2ec <USBD_AUDIO_RegisterInterface>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b930:	f7f7 f8a0 	bl	8002a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b934:	4805      	ldr	r0, [pc, #20]	; (800b94c <MX_USB_DEVICE_Init+0x54>)
 800b936:	f7fe fd8d 	bl	800a454 <USBD_Start>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b940:	f7f7 f898 	bl	8002a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b944:	bf00      	nop
 800b946:	bd80      	pop	{r7, pc}
 800b948:	200000f0 	.word	0x200000f0
 800b94c:	200009d8 	.word	0x200009d8
 800b950:	20000020 	.word	0x20000020
 800b954:	200000d4 	.word	0x200000d4

0800b958 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  AUDIO_Init(AudioFreq,Volume,options);
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	68b9      	ldr	r1, [r7, #8]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7f6 f97d 	bl	8001c68 <AUDIO_Init>
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800b96e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800b980:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b982:	4618      	mov	r0, r3
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	4613      	mov	r3, r2
 800b99a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d001      	beq.n	800b9a6 <AUDIO_AudioCmd_FS+0x18>
 800b9a2:	2b02      	cmp	r3, #2
    case AUDIO_CMD_START:
    	AUDIO_OUT_Start(pbuf,size*2);
    break;

    case AUDIO_CMD_PLAY:
    break;
 800b9a4:	e006      	b.n	800b9b4 <AUDIO_AudioCmd_FS+0x26>
    	AUDIO_OUT_Start(pbuf,size*2);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f7f6 f96d 	bl	8001c8c <AUDIO_OUT_Start>
    break;
 800b9b2:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b9b4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800b9c8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b083      	sub	sp, #12
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	4603      	mov	r3, r0
 800b9de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800b9e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	AUDIO_OUT_Periodic(pbuf,size);
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7f6 f9a4 	bl	8001d4c <AUDIO_OUT_Periodic>
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800ba04:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800ba12:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
	...

0800ba20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	6039      	str	r1, [r7, #0]
 800ba2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2212      	movs	r2, #18
 800ba30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba32:	4b03      	ldr	r3, [pc, #12]	; (800ba40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	2000010c 	.word	0x2000010c

0800ba44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	6039      	str	r1, [r7, #0]
 800ba4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2204      	movs	r2, #4
 800ba54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba56:	4b03      	ldr	r3, [pc, #12]	; (800ba64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	20000120 	.word	0x20000120

0800ba68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	4907      	ldr	r1, [pc, #28]	; (800ba9c <USBD_FS_ProductStrDescriptor+0x34>)
 800ba7e:	4808      	ldr	r0, [pc, #32]	; (800baa0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba80:	f7ff fe5a 	bl	800b738 <USBD_GetString>
 800ba84:	e004      	b.n	800ba90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4904      	ldr	r1, [pc, #16]	; (800ba9c <USBD_FS_ProductStrDescriptor+0x34>)
 800ba8a:	4805      	ldr	r0, [pc, #20]	; (800baa0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba8c:	f7ff fe54 	bl	800b738 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba90:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000cb4 	.word	0x20000cb4
 800baa0:	0800ef34 	.word	0x0800ef34

0800baa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	4904      	ldr	r1, [pc, #16]	; (800bac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bab4:	4804      	ldr	r0, [pc, #16]	; (800bac8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bab6:	f7ff fe3f 	bl	800b738 <USBD_GetString>
  return USBD_StrDesc;
 800baba:	4b02      	ldr	r3, [pc, #8]	; (800bac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20000cb4 	.word	0x20000cb4
 800bac8:	0800ef48 	.word	0x0800ef48

0800bacc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	6039      	str	r1, [r7, #0]
 800bad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	221a      	movs	r2, #26
 800badc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bade:	f000 f843 	bl	800bb68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bae2:	4b02      	ldr	r3, [pc, #8]	; (800baec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000124 	.word	0x20000124

0800baf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d105      	bne.n	800bb0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	4907      	ldr	r1, [pc, #28]	; (800bb24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb06:	4808      	ldr	r0, [pc, #32]	; (800bb28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb08:	f7ff fe16 	bl	800b738 <USBD_GetString>
 800bb0c:	e004      	b.n	800bb18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	4904      	ldr	r1, [pc, #16]	; (800bb24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb12:	4805      	ldr	r0, [pc, #20]	; (800bb28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb14:	f7ff fe10 	bl	800b738 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20000cb4 	.word	0x20000cb4
 800bb28:	0800ef5c 	.word	0x0800ef5c

0800bb2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d105      	bne.n	800bb4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	4907      	ldr	r1, [pc, #28]	; (800bb60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb42:	4808      	ldr	r0, [pc, #32]	; (800bb64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb44:	f7ff fdf8 	bl	800b738 <USBD_GetString>
 800bb48:	e004      	b.n	800bb54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	4904      	ldr	r1, [pc, #16]	; (800bb60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb4e:	4805      	ldr	r0, [pc, #20]	; (800bb64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb50:	f7ff fdf2 	bl	800b738 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb54:	4b02      	ldr	r3, [pc, #8]	; (800bb60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	20000cb4 	.word	0x20000cb4
 800bb64:	0800ef6c 	.word	0x0800ef6c

0800bb68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb6e:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <Get_SerialNum+0x44>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb74:	4b0e      	ldr	r3, [pc, #56]	; (800bbb0 <Get_SerialNum+0x48>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <Get_SerialNum+0x4c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4413      	add	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d009      	beq.n	800bba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb8e:	2208      	movs	r2, #8
 800bb90:	4909      	ldr	r1, [pc, #36]	; (800bbb8 <Get_SerialNum+0x50>)
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 f814 	bl	800bbc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb98:	2204      	movs	r2, #4
 800bb9a:	4908      	ldr	r1, [pc, #32]	; (800bbbc <Get_SerialNum+0x54>)
 800bb9c:	68b8      	ldr	r0, [r7, #8]
 800bb9e:	f000 f80f 	bl	800bbc0 <IntToUnicode>
  }
}
 800bba2:	bf00      	nop
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	1fff7a10 	.word	0x1fff7a10
 800bbb0:	1fff7a14 	.word	0x1fff7a14
 800bbb4:	1fff7a18 	.word	0x1fff7a18
 800bbb8:	20000126 	.word	0x20000126
 800bbbc:	20000136 	.word	0x20000136

0800bbc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b087      	sub	sp, #28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	75fb      	strb	r3, [r7, #23]
 800bbd6:	e027      	b.n	800bc28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	0f1b      	lsrs	r3, r3, #28
 800bbdc:	2b09      	cmp	r3, #9
 800bbde:	d80b      	bhi.n	800bbf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	0f1b      	lsrs	r3, r3, #28
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	4619      	mov	r1, r3
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	440b      	add	r3, r1
 800bbf0:	3230      	adds	r2, #48	; 0x30
 800bbf2:	b2d2      	uxtb	r2, r2
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	e00a      	b.n	800bc0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	0f1b      	lsrs	r3, r3, #28
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	005b      	lsls	r3, r3, #1
 800bc02:	4619      	mov	r1, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	440b      	add	r3, r1
 800bc08:	3237      	adds	r2, #55	; 0x37
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	011b      	lsls	r3, r3, #4
 800bc12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	3301      	adds	r3, #1
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	2200      	movs	r2, #0
 800bc20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc22:	7dfb      	ldrb	r3, [r7, #23]
 800bc24:	3301      	adds	r3, #1
 800bc26:	75fb      	strb	r3, [r7, #23]
 800bc28:	7dfa      	ldrb	r2, [r7, #23]
 800bc2a:	79fb      	ldrb	r3, [r7, #7]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d3d3      	bcc.n	800bbd8 <IntToUnicode+0x18>
  }
}
 800bc30:	bf00      	nop
 800bc32:	bf00      	nop
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
	...

0800bc40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08a      	sub	sp, #40	; 0x28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc48:	f107 0314 	add.w	r3, r7, #20
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	605a      	str	r2, [r3, #4]
 800bc52:	609a      	str	r2, [r3, #8]
 800bc54:	60da      	str	r2, [r3, #12]
 800bc56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc60:	d13a      	bne.n	800bcd8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc62:	2300      	movs	r3, #0
 800bc64:	613b      	str	r3, [r7, #16]
 800bc66:	4b1e      	ldr	r3, [pc, #120]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6a:	4a1d      	ldr	r2, [pc, #116]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bc6c:	f043 0301 	orr.w	r3, r3, #1
 800bc70:	6313      	str	r3, [r2, #48]	; 0x30
 800bc72:	4b1b      	ldr	r3, [pc, #108]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	613b      	str	r3, [r7, #16]
 800bc7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc84:	2302      	movs	r3, #2
 800bc86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc90:	230a      	movs	r3, #10
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc94:	f107 0314 	add.w	r3, r7, #20
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4812      	ldr	r0, [pc, #72]	; (800bce4 <HAL_PCD_MspInit+0xa4>)
 800bc9c:	f7f7 ffbc 	bl	8003c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bca0:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca4:	4a0e      	ldr	r2, [pc, #56]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcaa:	6353      	str	r3, [r2, #52]	; 0x34
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bcb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb4:	4a0a      	ldr	r2, [pc, #40]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bcb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bcba:	6453      	str	r3, [r2, #68]	; 0x44
 800bcbc:	4b08      	ldr	r3, [pc, #32]	; (800bce0 <HAL_PCD_MspInit+0xa0>)
 800bcbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcc4:	60fb      	str	r3, [r7, #12]
 800bcc6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	2043      	movs	r0, #67	; 0x43
 800bcce:	f7f7 fc82 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bcd2:	2043      	movs	r0, #67	; 0x43
 800bcd4:	f7f7 fc9b 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bcd8:	bf00      	nop
 800bcda:	3728      	adds	r7, #40	; 0x28
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	40023800 	.word	0x40023800
 800bce4:	40020000 	.word	0x40020000

0800bce8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4610      	mov	r0, r2
 800bd00:	f7fe fbf5 	bl	800a4ee <USBD_LL_SetupStage>
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd1e:	78fa      	ldrb	r2, [r7, #3]
 800bd20:	6879      	ldr	r1, [r7, #4]
 800bd22:	4613      	mov	r3, r2
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	440b      	add	r3, r1
 800bd2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	4619      	mov	r1, r3
 800bd36:	f7fe fc2f 	bl	800a598 <USBD_LL_DataOutStage>
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd54:	78fa      	ldrb	r2, [r7, #3]
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	334c      	adds	r3, #76	; 0x4c
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	78fb      	ldrb	r3, [r7, #3]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	f7fe fcc8 	bl	800a6fe <USBD_LL_DataInStage>
}
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b082      	sub	sp, #8
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe fdfc 	bl	800a982 <USBD_LL_SOF>
}
 800bd8a:	bf00      	nop
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]
 800bdaa:	e008      	b.n	800bdbe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d102      	bne.n	800bdba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	73fb      	strb	r3, [r7, #15]
 800bdb8:	e001      	b.n	800bdbe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bdba:	f7f6 fe5b 	bl	8002a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdc4:	7bfa      	ldrb	r2, [r7, #15]
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fd9c 	bl	800a906 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fd44 	bl	800a862 <USBD_LL_Reset>
}
 800bdda:	bf00      	nop
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe fd97 	bl	800a926 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	6812      	ldr	r2, [r2, #0]
 800be06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be0a:	f043 0301 	orr.w	r3, r3, #1
 800be0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d005      	beq.n	800be24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be18:	4b04      	ldr	r3, [pc, #16]	; (800be2c <HAL_PCD_SuspendCallback+0x48>)
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	4a03      	ldr	r2, [pc, #12]	; (800be2c <HAL_PCD_SuspendCallback+0x48>)
 800be1e:	f043 0306 	orr.w	r3, r3, #6
 800be22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	e000ed00 	.word	0xe000ed00

0800be30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe fd87 	bl	800a952 <USBD_LL_Resume>
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe fddf 	bl	800aa26 <USBD_LL_IsoOUTIncomplete>
}
 800be68:	bf00      	nop
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be82:	78fa      	ldrb	r2, [r7, #3]
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fd9b 	bl	800a9c2 <USBD_LL_IsoINIncomplete>
}
 800be8c:	bf00      	nop
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fdf1 	bl	800aa8a <USBD_LL_DevConnected>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fe fdee 	bl	800aaa0 <USBD_LL_DevDisconnected>
}
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d13c      	bne.n	800bf56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bedc:	4a20      	ldr	r2, [pc, #128]	; (800bf60 <USBD_LL_Init+0x94>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a1e      	ldr	r2, [pc, #120]	; (800bf60 <USBD_LL_Init+0x94>)
 800bee8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800beec:	4b1c      	ldr	r3, [pc, #112]	; (800bf60 <USBD_LL_Init+0x94>)
 800beee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bef2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bef4:	4b1a      	ldr	r3, [pc, #104]	; (800bf60 <USBD_LL_Init+0x94>)
 800bef6:	2204      	movs	r2, #4
 800bef8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800befa:	4b19      	ldr	r3, [pc, #100]	; (800bf60 <USBD_LL_Init+0x94>)
 800befc:	2202      	movs	r2, #2
 800befe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf00:	4b17      	ldr	r3, [pc, #92]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf06:	4b16      	ldr	r3, [pc, #88]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf08:	2202      	movs	r2, #2
 800bf0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bf0c:	4b14      	ldr	r3, [pc, #80]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bf12:	4b13      	ldr	r3, [pc, #76]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bf18:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bf1e:	4b10      	ldr	r3, [pc, #64]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf24:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf2a:	480d      	ldr	r0, [pc, #52]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf2c:	f7f8 fc9e 	bl	800486c <HAL_PCD_Init>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf36:	f7f6 fd9d 	bl	8002a74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf3a:	2180      	movs	r1, #128	; 0x80
 800bf3c:	4808      	ldr	r0, [pc, #32]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf3e:	f7f9 fef6 	bl	8005d2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf42:	2240      	movs	r2, #64	; 0x40
 800bf44:	2100      	movs	r1, #0
 800bf46:	4806      	ldr	r0, [pc, #24]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf48:	f7f9 feaa 	bl	8005ca0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf4c:	2280      	movs	r2, #128	; 0x80
 800bf4e:	2101      	movs	r1, #1
 800bf50:	4803      	ldr	r0, [pc, #12]	; (800bf60 <USBD_LL_Init+0x94>)
 800bf52:	f7f9 fea5 	bl	8005ca0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20000eb4 	.word	0x20000eb4

0800bf64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f8 fd93 	bl	8004aa6 <HAL_PCD_Start>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 f942 	bl	800c210 <USBD_Get_USB_Status>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	4608      	mov	r0, r1
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	70fb      	strb	r3, [r7, #3]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70bb      	strb	r3, [r7, #2]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bfc2:	78bb      	ldrb	r3, [r7, #2]
 800bfc4:	883a      	ldrh	r2, [r7, #0]
 800bfc6:	78f9      	ldrb	r1, [r7, #3]
 800bfc8:	f7f9 fa64 	bl	8005494 <HAL_PCD_EP_Open>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 f91c 	bl	800c210 <USBD_Get_USB_Status>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	460b      	mov	r3, r1
 800bff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff2:	2300      	movs	r3, #0
 800bff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c000:	78fa      	ldrb	r2, [r7, #3]
 800c002:	4611      	mov	r1, r2
 800c004:	4618      	mov	r0, r3
 800c006:	f7f9 faad 	bl	8005564 <HAL_PCD_EP_Close>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f8fd 	bl	800c210 <USBD_Get_USB_Status>
 800c016:	4603      	mov	r3, r0
 800c018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c03e:	78fa      	ldrb	r2, [r7, #3]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7f9 fb85 	bl	8005752 <HAL_PCD_EP_SetStall>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f8de 	bl	800c210 <USBD_Get_USB_Status>
 800c054:	4603      	mov	r3, r0
 800c056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c058:	7bbb      	ldrb	r3, [r7, #14]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	460b      	mov	r3, r1
 800c06c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c07c:	78fa      	ldrb	r2, [r7, #3]
 800c07e:	4611      	mov	r1, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f7f9 fbca 	bl	800581a <HAL_PCD_EP_ClrStall>
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 f8bf 	bl	800c210 <USBD_Get_USB_Status>
 800c092:	4603      	mov	r3, r0
 800c094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c096:	7bbb      	ldrb	r3, [r7, #14]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da0b      	bge.n	800c0d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0bc:	78fb      	ldrb	r3, [r7, #3]
 800c0be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0c2:	68f9      	ldr	r1, [r7, #12]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	440b      	add	r3, r1
 800c0ce:	333e      	adds	r3, #62	; 0x3e
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	e00b      	b.n	800c0ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0d4:	78fb      	ldrb	r3, [r7, #3]
 800c0d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0da:	68f9      	ldr	r1, [r7, #12]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	440b      	add	r3, r1
 800c0e6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c0ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c112:	78fa      	ldrb	r2, [r7, #3]
 800c114:	4611      	mov	r1, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f7f9 f997 	bl	800544a <HAL_PCD_SetAddress>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f874 	bl	800c210 <USBD_Get_USB_Status>
 800c128:	4603      	mov	r3, r0
 800c12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b086      	sub	sp, #24
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
 800c142:	460b      	mov	r3, r1
 800c144:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c154:	7af9      	ldrb	r1, [r7, #11]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	f7f9 fab0 	bl	80056be <HAL_PCD_EP_Transmit>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	4618      	mov	r0, r3
 800c166:	f000 f853 	bl	800c210 <USBD_Get_USB_Status>
 800c16a:	4603      	mov	r3, r0
 800c16c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c16e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	607a      	str	r2, [r7, #4]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	460b      	mov	r3, r1
 800c186:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c196:	7af9      	ldrb	r1, [r7, #11]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	f7f9 fa2c 	bl	80055f8 <HAL_PCD_EP_Receive>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f832 	bl	800c210 <USBD_Get_USB_Status>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1cc:	78fa      	ldrb	r2, [r7, #3]
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7f9 fa5c 	bl	800568e <HAL_PCD_EP_GetRxCount>
 800c1d6:	4603      	mov	r3, r0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1e8:	4b03      	ldr	r3, [pc, #12]	; (800c1f8 <USBD_static_malloc+0x18>)
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	200013c0 	.word	0x200013c0

0800c1fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]

}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b03      	cmp	r3, #3
 800c222:	d817      	bhi.n	800c254 <USBD_Get_USB_Status+0x44>
 800c224:	a201      	add	r2, pc, #4	; (adr r2, 800c22c <USBD_Get_USB_Status+0x1c>)
 800c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22a:	bf00      	nop
 800c22c:	0800c23d 	.word	0x0800c23d
 800c230:	0800c243 	.word	0x0800c243
 800c234:	0800c249 	.word	0x0800c249
 800c238:	0800c24f 	.word	0x0800c24f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	73fb      	strb	r3, [r7, #15]
    break;
 800c240:	e00b      	b.n	800c25a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c242:	2303      	movs	r3, #3
 800c244:	73fb      	strb	r3, [r7, #15]
    break;
 800c246:	e008      	b.n	800c25a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c248:	2301      	movs	r3, #1
 800c24a:	73fb      	strb	r3, [r7, #15]
    break;
 800c24c:	e005      	b.n	800c25a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c24e:	2303      	movs	r3, #3
 800c250:	73fb      	strb	r3, [r7, #15]
    break;
 800c252:	e002      	b.n	800c25a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c254:	2303      	movs	r3, #3
 800c256:	73fb      	strb	r3, [r7, #15]
    break;
 800c258:	bf00      	nop
  }
  return usb_status;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <__errno>:
 800c268:	4b01      	ldr	r3, [pc, #4]	; (800c270 <__errno+0x8>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000140 	.word	0x20000140

0800c274 <__libc_init_array>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4d0d      	ldr	r5, [pc, #52]	; (800c2ac <__libc_init_array+0x38>)
 800c278:	4c0d      	ldr	r4, [pc, #52]	; (800c2b0 <__libc_init_array+0x3c>)
 800c27a:	1b64      	subs	r4, r4, r5
 800c27c:	10a4      	asrs	r4, r4, #2
 800c27e:	2600      	movs	r6, #0
 800c280:	42a6      	cmp	r6, r4
 800c282:	d109      	bne.n	800c298 <__libc_init_array+0x24>
 800c284:	4d0b      	ldr	r5, [pc, #44]	; (800c2b4 <__libc_init_array+0x40>)
 800c286:	4c0c      	ldr	r4, [pc, #48]	; (800c2b8 <__libc_init_array+0x44>)
 800c288:	f002 fdc4 	bl	800ee14 <_init>
 800c28c:	1b64      	subs	r4, r4, r5
 800c28e:	10a4      	asrs	r4, r4, #2
 800c290:	2600      	movs	r6, #0
 800c292:	42a6      	cmp	r6, r4
 800c294:	d105      	bne.n	800c2a2 <__libc_init_array+0x2e>
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29c:	4798      	blx	r3
 800c29e:	3601      	adds	r6, #1
 800c2a0:	e7ee      	b.n	800c280 <__libc_init_array+0xc>
 800c2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a6:	4798      	blx	r3
 800c2a8:	3601      	adds	r6, #1
 800c2aa:	e7f2      	b.n	800c292 <__libc_init_array+0x1e>
 800c2ac:	0800f394 	.word	0x0800f394
 800c2b0:	0800f394 	.word	0x0800f394
 800c2b4:	0800f394 	.word	0x0800f394
 800c2b8:	0800f398 	.word	0x0800f398

0800c2bc <memset>:
 800c2bc:	4402      	add	r2, r0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d100      	bne.n	800c2c6 <memset+0xa>
 800c2c4:	4770      	bx	lr
 800c2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ca:	e7f9      	b.n	800c2c0 <memset+0x4>

0800c2cc <__cvt>:
 800c2cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d0:	ec55 4b10 	vmov	r4, r5, d0
 800c2d4:	2d00      	cmp	r5, #0
 800c2d6:	460e      	mov	r6, r1
 800c2d8:	4619      	mov	r1, r3
 800c2da:	462b      	mov	r3, r5
 800c2dc:	bfbb      	ittet	lt
 800c2de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2e2:	461d      	movlt	r5, r3
 800c2e4:	2300      	movge	r3, #0
 800c2e6:	232d      	movlt	r3, #45	; 0x2d
 800c2e8:	700b      	strb	r3, [r1, #0]
 800c2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c2f0:	4691      	mov	r9, r2
 800c2f2:	f023 0820 	bic.w	r8, r3, #32
 800c2f6:	bfbc      	itt	lt
 800c2f8:	4622      	movlt	r2, r4
 800c2fa:	4614      	movlt	r4, r2
 800c2fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c300:	d005      	beq.n	800c30e <__cvt+0x42>
 800c302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c306:	d100      	bne.n	800c30a <__cvt+0x3e>
 800c308:	3601      	adds	r6, #1
 800c30a:	2102      	movs	r1, #2
 800c30c:	e000      	b.n	800c310 <__cvt+0x44>
 800c30e:	2103      	movs	r1, #3
 800c310:	ab03      	add	r3, sp, #12
 800c312:	9301      	str	r3, [sp, #4]
 800c314:	ab02      	add	r3, sp, #8
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	ec45 4b10 	vmov	d0, r4, r5
 800c31c:	4653      	mov	r3, sl
 800c31e:	4632      	mov	r2, r6
 800c320:	f000 fe1a 	bl	800cf58 <_dtoa_r>
 800c324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c328:	4607      	mov	r7, r0
 800c32a:	d102      	bne.n	800c332 <__cvt+0x66>
 800c32c:	f019 0f01 	tst.w	r9, #1
 800c330:	d022      	beq.n	800c378 <__cvt+0xac>
 800c332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c336:	eb07 0906 	add.w	r9, r7, r6
 800c33a:	d110      	bne.n	800c35e <__cvt+0x92>
 800c33c:	783b      	ldrb	r3, [r7, #0]
 800c33e:	2b30      	cmp	r3, #48	; 0x30
 800c340:	d10a      	bne.n	800c358 <__cvt+0x8c>
 800c342:	2200      	movs	r2, #0
 800c344:	2300      	movs	r3, #0
 800c346:	4620      	mov	r0, r4
 800c348:	4629      	mov	r1, r5
 800c34a:	f7f4 fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c34e:	b918      	cbnz	r0, 800c358 <__cvt+0x8c>
 800c350:	f1c6 0601 	rsb	r6, r6, #1
 800c354:	f8ca 6000 	str.w	r6, [sl]
 800c358:	f8da 3000 	ldr.w	r3, [sl]
 800c35c:	4499      	add	r9, r3
 800c35e:	2200      	movs	r2, #0
 800c360:	2300      	movs	r3, #0
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f4 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c36a:	b108      	cbz	r0, 800c370 <__cvt+0xa4>
 800c36c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c370:	2230      	movs	r2, #48	; 0x30
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	454b      	cmp	r3, r9
 800c376:	d307      	bcc.n	800c388 <__cvt+0xbc>
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c37c:	1bdb      	subs	r3, r3, r7
 800c37e:	4638      	mov	r0, r7
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	b004      	add	sp, #16
 800c384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c388:	1c59      	adds	r1, r3, #1
 800c38a:	9103      	str	r1, [sp, #12]
 800c38c:	701a      	strb	r2, [r3, #0]
 800c38e:	e7f0      	b.n	800c372 <__cvt+0xa6>

0800c390 <__exponent>:
 800c390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c392:	4603      	mov	r3, r0
 800c394:	2900      	cmp	r1, #0
 800c396:	bfb8      	it	lt
 800c398:	4249      	neglt	r1, r1
 800c39a:	f803 2b02 	strb.w	r2, [r3], #2
 800c39e:	bfb4      	ite	lt
 800c3a0:	222d      	movlt	r2, #45	; 0x2d
 800c3a2:	222b      	movge	r2, #43	; 0x2b
 800c3a4:	2909      	cmp	r1, #9
 800c3a6:	7042      	strb	r2, [r0, #1]
 800c3a8:	dd2a      	ble.n	800c400 <__exponent+0x70>
 800c3aa:	f10d 0407 	add.w	r4, sp, #7
 800c3ae:	46a4      	mov	ip, r4
 800c3b0:	270a      	movs	r7, #10
 800c3b2:	46a6      	mov	lr, r4
 800c3b4:	460a      	mov	r2, r1
 800c3b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c3ba:	fb07 1516 	mls	r5, r7, r6, r1
 800c3be:	3530      	adds	r5, #48	; 0x30
 800c3c0:	2a63      	cmp	r2, #99	; 0x63
 800c3c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c3c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	dcf1      	bgt.n	800c3b2 <__exponent+0x22>
 800c3ce:	3130      	adds	r1, #48	; 0x30
 800c3d0:	f1ae 0502 	sub.w	r5, lr, #2
 800c3d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c3d8:	1c44      	adds	r4, r0, #1
 800c3da:	4629      	mov	r1, r5
 800c3dc:	4561      	cmp	r1, ip
 800c3de:	d30a      	bcc.n	800c3f6 <__exponent+0x66>
 800c3e0:	f10d 0209 	add.w	r2, sp, #9
 800c3e4:	eba2 020e 	sub.w	r2, r2, lr
 800c3e8:	4565      	cmp	r5, ip
 800c3ea:	bf88      	it	hi
 800c3ec:	2200      	movhi	r2, #0
 800c3ee:	4413      	add	r3, r2
 800c3f0:	1a18      	subs	r0, r3, r0
 800c3f2:	b003      	add	sp, #12
 800c3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c3fe:	e7ed      	b.n	800c3dc <__exponent+0x4c>
 800c400:	2330      	movs	r3, #48	; 0x30
 800c402:	3130      	adds	r1, #48	; 0x30
 800c404:	7083      	strb	r3, [r0, #2]
 800c406:	70c1      	strb	r1, [r0, #3]
 800c408:	1d03      	adds	r3, r0, #4
 800c40a:	e7f1      	b.n	800c3f0 <__exponent+0x60>

0800c40c <_printf_float>:
 800c40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c410:	ed2d 8b02 	vpush	{d8}
 800c414:	b08d      	sub	sp, #52	; 0x34
 800c416:	460c      	mov	r4, r1
 800c418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c41c:	4616      	mov	r6, r2
 800c41e:	461f      	mov	r7, r3
 800c420:	4605      	mov	r5, r0
 800c422:	f001 fd3f 	bl	800dea4 <_localeconv_r>
 800c426:	f8d0 a000 	ldr.w	sl, [r0]
 800c42a:	4650      	mov	r0, sl
 800c42c:	f7f3 fed8 	bl	80001e0 <strlen>
 800c430:	2300      	movs	r3, #0
 800c432:	930a      	str	r3, [sp, #40]	; 0x28
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	9305      	str	r3, [sp, #20]
 800c438:	f8d8 3000 	ldr.w	r3, [r8]
 800c43c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c440:	3307      	adds	r3, #7
 800c442:	f023 0307 	bic.w	r3, r3, #7
 800c446:	f103 0208 	add.w	r2, r3, #8
 800c44a:	f8c8 2000 	str.w	r2, [r8]
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c45a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c45e:	9307      	str	r3, [sp, #28]
 800c460:	f8cd 8018 	str.w	r8, [sp, #24]
 800c464:	ee08 0a10 	vmov	s16, r0
 800c468:	4b9f      	ldr	r3, [pc, #636]	; (800c6e8 <_printf_float+0x2dc>)
 800c46a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295
 800c472:	f7f4 fb63 	bl	8000b3c <__aeabi_dcmpun>
 800c476:	bb88      	cbnz	r0, 800c4dc <_printf_float+0xd0>
 800c478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c47c:	4b9a      	ldr	r3, [pc, #616]	; (800c6e8 <_printf_float+0x2dc>)
 800c47e:	f04f 32ff 	mov.w	r2, #4294967295
 800c482:	f7f4 fb3d 	bl	8000b00 <__aeabi_dcmple>
 800c486:	bb48      	cbnz	r0, 800c4dc <_printf_float+0xd0>
 800c488:	2200      	movs	r2, #0
 800c48a:	2300      	movs	r3, #0
 800c48c:	4640      	mov	r0, r8
 800c48e:	4649      	mov	r1, r9
 800c490:	f7f4 fb2c 	bl	8000aec <__aeabi_dcmplt>
 800c494:	b110      	cbz	r0, 800c49c <_printf_float+0x90>
 800c496:	232d      	movs	r3, #45	; 0x2d
 800c498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c49c:	4b93      	ldr	r3, [pc, #588]	; (800c6ec <_printf_float+0x2e0>)
 800c49e:	4894      	ldr	r0, [pc, #592]	; (800c6f0 <_printf_float+0x2e4>)
 800c4a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c4a4:	bf94      	ite	ls
 800c4a6:	4698      	movls	r8, r3
 800c4a8:	4680      	movhi	r8, r0
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	6123      	str	r3, [r4, #16]
 800c4ae:	9b05      	ldr	r3, [sp, #20]
 800c4b0:	f023 0204 	bic.w	r2, r3, #4
 800c4b4:	6022      	str	r2, [r4, #0]
 800c4b6:	f04f 0900 	mov.w	r9, #0
 800c4ba:	9700      	str	r7, [sp, #0]
 800c4bc:	4633      	mov	r3, r6
 800c4be:	aa0b      	add	r2, sp, #44	; 0x2c
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f000 f9d8 	bl	800c878 <_printf_common>
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	f040 8090 	bne.w	800c5ee <_printf_float+0x1e2>
 800c4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d2:	b00d      	add	sp, #52	; 0x34
 800c4d4:	ecbd 8b02 	vpop	{d8}
 800c4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4dc:	4642      	mov	r2, r8
 800c4de:	464b      	mov	r3, r9
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	4649      	mov	r1, r9
 800c4e4:	f7f4 fb2a 	bl	8000b3c <__aeabi_dcmpun>
 800c4e8:	b140      	cbz	r0, 800c4fc <_printf_float+0xf0>
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bfbc      	itt	lt
 800c4f0:	232d      	movlt	r3, #45	; 0x2d
 800c4f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4f6:	487f      	ldr	r0, [pc, #508]	; (800c6f4 <_printf_float+0x2e8>)
 800c4f8:	4b7f      	ldr	r3, [pc, #508]	; (800c6f8 <_printf_float+0x2ec>)
 800c4fa:	e7d1      	b.n	800c4a0 <_printf_float+0x94>
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c502:	9206      	str	r2, [sp, #24]
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	d13f      	bne.n	800c588 <_printf_float+0x17c>
 800c508:	2306      	movs	r3, #6
 800c50a:	6063      	str	r3, [r4, #4]
 800c50c:	9b05      	ldr	r3, [sp, #20]
 800c50e:	6861      	ldr	r1, [r4, #4]
 800c510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c514:	2300      	movs	r3, #0
 800c516:	9303      	str	r3, [sp, #12]
 800c518:	ab0a      	add	r3, sp, #40	; 0x28
 800c51a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c51e:	ab09      	add	r3, sp, #36	; 0x24
 800c520:	ec49 8b10 	vmov	d0, r8, r9
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	6022      	str	r2, [r4, #0]
 800c528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c52c:	4628      	mov	r0, r5
 800c52e:	f7ff fecd 	bl	800c2cc <__cvt>
 800c532:	9b06      	ldr	r3, [sp, #24]
 800c534:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c536:	2b47      	cmp	r3, #71	; 0x47
 800c538:	4680      	mov	r8, r0
 800c53a:	d108      	bne.n	800c54e <_printf_float+0x142>
 800c53c:	1cc8      	adds	r0, r1, #3
 800c53e:	db02      	blt.n	800c546 <_printf_float+0x13a>
 800c540:	6863      	ldr	r3, [r4, #4]
 800c542:	4299      	cmp	r1, r3
 800c544:	dd41      	ble.n	800c5ca <_printf_float+0x1be>
 800c546:	f1ab 0b02 	sub.w	fp, fp, #2
 800c54a:	fa5f fb8b 	uxtb.w	fp, fp
 800c54e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c552:	d820      	bhi.n	800c596 <_printf_float+0x18a>
 800c554:	3901      	subs	r1, #1
 800c556:	465a      	mov	r2, fp
 800c558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c55c:	9109      	str	r1, [sp, #36]	; 0x24
 800c55e:	f7ff ff17 	bl	800c390 <__exponent>
 800c562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c564:	1813      	adds	r3, r2, r0
 800c566:	2a01      	cmp	r2, #1
 800c568:	4681      	mov	r9, r0
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	dc02      	bgt.n	800c574 <_printf_float+0x168>
 800c56e:	6822      	ldr	r2, [r4, #0]
 800c570:	07d2      	lsls	r2, r2, #31
 800c572:	d501      	bpl.n	800c578 <_printf_float+0x16c>
 800c574:	3301      	adds	r3, #1
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d09c      	beq.n	800c4ba <_printf_float+0xae>
 800c580:	232d      	movs	r3, #45	; 0x2d
 800c582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c586:	e798      	b.n	800c4ba <_printf_float+0xae>
 800c588:	9a06      	ldr	r2, [sp, #24]
 800c58a:	2a47      	cmp	r2, #71	; 0x47
 800c58c:	d1be      	bne.n	800c50c <_printf_float+0x100>
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1bc      	bne.n	800c50c <_printf_float+0x100>
 800c592:	2301      	movs	r3, #1
 800c594:	e7b9      	b.n	800c50a <_printf_float+0xfe>
 800c596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c59a:	d118      	bne.n	800c5ce <_printf_float+0x1c2>
 800c59c:	2900      	cmp	r1, #0
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	dd0b      	ble.n	800c5ba <_printf_float+0x1ae>
 800c5a2:	6121      	str	r1, [r4, #16]
 800c5a4:	b913      	cbnz	r3, 800c5ac <_printf_float+0x1a0>
 800c5a6:	6822      	ldr	r2, [r4, #0]
 800c5a8:	07d0      	lsls	r0, r2, #31
 800c5aa:	d502      	bpl.n	800c5b2 <_printf_float+0x1a6>
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	440b      	add	r3, r1
 800c5b0:	6123      	str	r3, [r4, #16]
 800c5b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c5b4:	f04f 0900 	mov.w	r9, #0
 800c5b8:	e7de      	b.n	800c578 <_printf_float+0x16c>
 800c5ba:	b913      	cbnz	r3, 800c5c2 <_printf_float+0x1b6>
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	07d2      	lsls	r2, r2, #31
 800c5c0:	d501      	bpl.n	800c5c6 <_printf_float+0x1ba>
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	e7f4      	b.n	800c5b0 <_printf_float+0x1a4>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7f2      	b.n	800c5b0 <_printf_float+0x1a4>
 800c5ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	db05      	blt.n	800c5e0 <_printf_float+0x1d4>
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	6121      	str	r1, [r4, #16]
 800c5d8:	07d8      	lsls	r0, r3, #31
 800c5da:	d5ea      	bpl.n	800c5b2 <_printf_float+0x1a6>
 800c5dc:	1c4b      	adds	r3, r1, #1
 800c5de:	e7e7      	b.n	800c5b0 <_printf_float+0x1a4>
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	bfd4      	ite	le
 800c5e4:	f1c1 0202 	rsble	r2, r1, #2
 800c5e8:	2201      	movgt	r2, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	e7e0      	b.n	800c5b0 <_printf_float+0x1a4>
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	055a      	lsls	r2, r3, #21
 800c5f2:	d407      	bmi.n	800c604 <_printf_float+0x1f8>
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	d12c      	bne.n	800c65c <_printf_float+0x250>
 800c602:	e764      	b.n	800c4ce <_printf_float+0xc2>
 800c604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c608:	f240 80e0 	bls.w	800c7cc <_printf_float+0x3c0>
 800c60c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c610:	2200      	movs	r2, #0
 800c612:	2300      	movs	r3, #0
 800c614:	f7f4 fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d034      	beq.n	800c686 <_printf_float+0x27a>
 800c61c:	4a37      	ldr	r2, [pc, #220]	; (800c6fc <_printf_float+0x2f0>)
 800c61e:	2301      	movs	r3, #1
 800c620:	4631      	mov	r1, r6
 800c622:	4628      	mov	r0, r5
 800c624:	47b8      	blx	r7
 800c626:	3001      	adds	r0, #1
 800c628:	f43f af51 	beq.w	800c4ce <_printf_float+0xc2>
 800c62c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c630:	429a      	cmp	r2, r3
 800c632:	db02      	blt.n	800c63a <_printf_float+0x22e>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	07d8      	lsls	r0, r3, #31
 800c638:	d510      	bpl.n	800c65c <_printf_float+0x250>
 800c63a:	ee18 3a10 	vmov	r3, s16
 800c63e:	4652      	mov	r2, sl
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	47b8      	blx	r7
 800c646:	3001      	adds	r0, #1
 800c648:	f43f af41 	beq.w	800c4ce <_printf_float+0xc2>
 800c64c:	f04f 0800 	mov.w	r8, #0
 800c650:	f104 091a 	add.w	r9, r4, #26
 800c654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c656:	3b01      	subs	r3, #1
 800c658:	4543      	cmp	r3, r8
 800c65a:	dc09      	bgt.n	800c670 <_printf_float+0x264>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	079b      	lsls	r3, r3, #30
 800c660:	f100 8105 	bmi.w	800c86e <_printf_float+0x462>
 800c664:	68e0      	ldr	r0, [r4, #12]
 800c666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c668:	4298      	cmp	r0, r3
 800c66a:	bfb8      	it	lt
 800c66c:	4618      	movlt	r0, r3
 800c66e:	e730      	b.n	800c4d2 <_printf_float+0xc6>
 800c670:	2301      	movs	r3, #1
 800c672:	464a      	mov	r2, r9
 800c674:	4631      	mov	r1, r6
 800c676:	4628      	mov	r0, r5
 800c678:	47b8      	blx	r7
 800c67a:	3001      	adds	r0, #1
 800c67c:	f43f af27 	beq.w	800c4ce <_printf_float+0xc2>
 800c680:	f108 0801 	add.w	r8, r8, #1
 800c684:	e7e6      	b.n	800c654 <_printf_float+0x248>
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	2b00      	cmp	r3, #0
 800c68a:	dc39      	bgt.n	800c700 <_printf_float+0x2f4>
 800c68c:	4a1b      	ldr	r2, [pc, #108]	; (800c6fc <_printf_float+0x2f0>)
 800c68e:	2301      	movs	r3, #1
 800c690:	4631      	mov	r1, r6
 800c692:	4628      	mov	r0, r5
 800c694:	47b8      	blx	r7
 800c696:	3001      	adds	r0, #1
 800c698:	f43f af19 	beq.w	800c4ce <_printf_float+0xc2>
 800c69c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	d102      	bne.n	800c6aa <_printf_float+0x29e>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	07d9      	lsls	r1, r3, #31
 800c6a8:	d5d8      	bpl.n	800c65c <_printf_float+0x250>
 800c6aa:	ee18 3a10 	vmov	r3, s16
 800c6ae:	4652      	mov	r2, sl
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	47b8      	blx	r7
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	f43f af09 	beq.w	800c4ce <_printf_float+0xc2>
 800c6bc:	f04f 0900 	mov.w	r9, #0
 800c6c0:	f104 0a1a 	add.w	sl, r4, #26
 800c6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c6:	425b      	negs	r3, r3
 800c6c8:	454b      	cmp	r3, r9
 800c6ca:	dc01      	bgt.n	800c6d0 <_printf_float+0x2c4>
 800c6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ce:	e792      	b.n	800c5f6 <_printf_float+0x1ea>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	4652      	mov	r2, sl
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	47b8      	blx	r7
 800c6da:	3001      	adds	r0, #1
 800c6dc:	f43f aef7 	beq.w	800c4ce <_printf_float+0xc2>
 800c6e0:	f109 0901 	add.w	r9, r9, #1
 800c6e4:	e7ee      	b.n	800c6c4 <_printf_float+0x2b8>
 800c6e6:	bf00      	nop
 800c6e8:	7fefffff 	.word	0x7fefffff
 800c6ec:	0800efb8 	.word	0x0800efb8
 800c6f0:	0800efbc 	.word	0x0800efbc
 800c6f4:	0800efc4 	.word	0x0800efc4
 800c6f8:	0800efc0 	.word	0x0800efc0
 800c6fc:	0800efc8 	.word	0x0800efc8
 800c700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c704:	429a      	cmp	r2, r3
 800c706:	bfa8      	it	ge
 800c708:	461a      	movge	r2, r3
 800c70a:	2a00      	cmp	r2, #0
 800c70c:	4691      	mov	r9, r2
 800c70e:	dc37      	bgt.n	800c780 <_printf_float+0x374>
 800c710:	f04f 0b00 	mov.w	fp, #0
 800c714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c718:	f104 021a 	add.w	r2, r4, #26
 800c71c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c71e:	9305      	str	r3, [sp, #20]
 800c720:	eba3 0309 	sub.w	r3, r3, r9
 800c724:	455b      	cmp	r3, fp
 800c726:	dc33      	bgt.n	800c790 <_printf_float+0x384>
 800c728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c72c:	429a      	cmp	r2, r3
 800c72e:	db3b      	blt.n	800c7a8 <_printf_float+0x39c>
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	07da      	lsls	r2, r3, #31
 800c734:	d438      	bmi.n	800c7a8 <_printf_float+0x39c>
 800c736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c738:	9a05      	ldr	r2, [sp, #20]
 800c73a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c73c:	1a9a      	subs	r2, r3, r2
 800c73e:	eba3 0901 	sub.w	r9, r3, r1
 800c742:	4591      	cmp	r9, r2
 800c744:	bfa8      	it	ge
 800c746:	4691      	movge	r9, r2
 800c748:	f1b9 0f00 	cmp.w	r9, #0
 800c74c:	dc35      	bgt.n	800c7ba <_printf_float+0x3ae>
 800c74e:	f04f 0800 	mov.w	r8, #0
 800c752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c756:	f104 0a1a 	add.w	sl, r4, #26
 800c75a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c75e:	1a9b      	subs	r3, r3, r2
 800c760:	eba3 0309 	sub.w	r3, r3, r9
 800c764:	4543      	cmp	r3, r8
 800c766:	f77f af79 	ble.w	800c65c <_printf_float+0x250>
 800c76a:	2301      	movs	r3, #1
 800c76c:	4652      	mov	r2, sl
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	f43f aeaa 	beq.w	800c4ce <_printf_float+0xc2>
 800c77a:	f108 0801 	add.w	r8, r8, #1
 800c77e:	e7ec      	b.n	800c75a <_printf_float+0x34e>
 800c780:	4613      	mov	r3, r2
 800c782:	4631      	mov	r1, r6
 800c784:	4642      	mov	r2, r8
 800c786:	4628      	mov	r0, r5
 800c788:	47b8      	blx	r7
 800c78a:	3001      	adds	r0, #1
 800c78c:	d1c0      	bne.n	800c710 <_printf_float+0x304>
 800c78e:	e69e      	b.n	800c4ce <_printf_float+0xc2>
 800c790:	2301      	movs	r3, #1
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	9205      	str	r2, [sp, #20]
 800c798:	47b8      	blx	r7
 800c79a:	3001      	adds	r0, #1
 800c79c:	f43f ae97 	beq.w	800c4ce <_printf_float+0xc2>
 800c7a0:	9a05      	ldr	r2, [sp, #20]
 800c7a2:	f10b 0b01 	add.w	fp, fp, #1
 800c7a6:	e7b9      	b.n	800c71c <_printf_float+0x310>
 800c7a8:	ee18 3a10 	vmov	r3, s16
 800c7ac:	4652      	mov	r2, sl
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b8      	blx	r7
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d1be      	bne.n	800c736 <_printf_float+0x32a>
 800c7b8:	e689      	b.n	800c4ce <_printf_float+0xc2>
 800c7ba:	9a05      	ldr	r2, [sp, #20]
 800c7bc:	464b      	mov	r3, r9
 800c7be:	4442      	add	r2, r8
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	47b8      	blx	r7
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d1c1      	bne.n	800c74e <_printf_float+0x342>
 800c7ca:	e680      	b.n	800c4ce <_printf_float+0xc2>
 800c7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7ce:	2a01      	cmp	r2, #1
 800c7d0:	dc01      	bgt.n	800c7d6 <_printf_float+0x3ca>
 800c7d2:	07db      	lsls	r3, r3, #31
 800c7d4:	d538      	bpl.n	800c848 <_printf_float+0x43c>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4642      	mov	r2, r8
 800c7da:	4631      	mov	r1, r6
 800c7dc:	4628      	mov	r0, r5
 800c7de:	47b8      	blx	r7
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f43f ae74 	beq.w	800c4ce <_printf_float+0xc2>
 800c7e6:	ee18 3a10 	vmov	r3, s16
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	47b8      	blx	r7
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	f43f ae6b 	beq.w	800c4ce <_printf_float+0xc2>
 800c7f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	f7f4 f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c804:	b9d8      	cbnz	r0, 800c83e <_printf_float+0x432>
 800c806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c808:	f108 0201 	add.w	r2, r8, #1
 800c80c:	3b01      	subs	r3, #1
 800c80e:	4631      	mov	r1, r6
 800c810:	4628      	mov	r0, r5
 800c812:	47b8      	blx	r7
 800c814:	3001      	adds	r0, #1
 800c816:	d10e      	bne.n	800c836 <_printf_float+0x42a>
 800c818:	e659      	b.n	800c4ce <_printf_float+0xc2>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4652      	mov	r2, sl
 800c81e:	4631      	mov	r1, r6
 800c820:	4628      	mov	r0, r5
 800c822:	47b8      	blx	r7
 800c824:	3001      	adds	r0, #1
 800c826:	f43f ae52 	beq.w	800c4ce <_printf_float+0xc2>
 800c82a:	f108 0801 	add.w	r8, r8, #1
 800c82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c830:	3b01      	subs	r3, #1
 800c832:	4543      	cmp	r3, r8
 800c834:	dcf1      	bgt.n	800c81a <_printf_float+0x40e>
 800c836:	464b      	mov	r3, r9
 800c838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c83c:	e6dc      	b.n	800c5f8 <_printf_float+0x1ec>
 800c83e:	f04f 0800 	mov.w	r8, #0
 800c842:	f104 0a1a 	add.w	sl, r4, #26
 800c846:	e7f2      	b.n	800c82e <_printf_float+0x422>
 800c848:	2301      	movs	r3, #1
 800c84a:	4642      	mov	r2, r8
 800c84c:	e7df      	b.n	800c80e <_printf_float+0x402>
 800c84e:	2301      	movs	r3, #1
 800c850:	464a      	mov	r2, r9
 800c852:	4631      	mov	r1, r6
 800c854:	4628      	mov	r0, r5
 800c856:	47b8      	blx	r7
 800c858:	3001      	adds	r0, #1
 800c85a:	f43f ae38 	beq.w	800c4ce <_printf_float+0xc2>
 800c85e:	f108 0801 	add.w	r8, r8, #1
 800c862:	68e3      	ldr	r3, [r4, #12]
 800c864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c866:	1a5b      	subs	r3, r3, r1
 800c868:	4543      	cmp	r3, r8
 800c86a:	dcf0      	bgt.n	800c84e <_printf_float+0x442>
 800c86c:	e6fa      	b.n	800c664 <_printf_float+0x258>
 800c86e:	f04f 0800 	mov.w	r8, #0
 800c872:	f104 0919 	add.w	r9, r4, #25
 800c876:	e7f4      	b.n	800c862 <_printf_float+0x456>

0800c878 <_printf_common>:
 800c878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	4616      	mov	r6, r2
 800c87e:	4699      	mov	r9, r3
 800c880:	688a      	ldr	r2, [r1, #8]
 800c882:	690b      	ldr	r3, [r1, #16]
 800c884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c888:	4293      	cmp	r3, r2
 800c88a:	bfb8      	it	lt
 800c88c:	4613      	movlt	r3, r2
 800c88e:	6033      	str	r3, [r6, #0]
 800c890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c894:	4607      	mov	r7, r0
 800c896:	460c      	mov	r4, r1
 800c898:	b10a      	cbz	r2, 800c89e <_printf_common+0x26>
 800c89a:	3301      	adds	r3, #1
 800c89c:	6033      	str	r3, [r6, #0]
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	0699      	lsls	r1, r3, #26
 800c8a2:	bf42      	ittt	mi
 800c8a4:	6833      	ldrmi	r3, [r6, #0]
 800c8a6:	3302      	addmi	r3, #2
 800c8a8:	6033      	strmi	r3, [r6, #0]
 800c8aa:	6825      	ldr	r5, [r4, #0]
 800c8ac:	f015 0506 	ands.w	r5, r5, #6
 800c8b0:	d106      	bne.n	800c8c0 <_printf_common+0x48>
 800c8b2:	f104 0a19 	add.w	sl, r4, #25
 800c8b6:	68e3      	ldr	r3, [r4, #12]
 800c8b8:	6832      	ldr	r2, [r6, #0]
 800c8ba:	1a9b      	subs	r3, r3, r2
 800c8bc:	42ab      	cmp	r3, r5
 800c8be:	dc26      	bgt.n	800c90e <_printf_common+0x96>
 800c8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8c4:	1e13      	subs	r3, r2, #0
 800c8c6:	6822      	ldr	r2, [r4, #0]
 800c8c8:	bf18      	it	ne
 800c8ca:	2301      	movne	r3, #1
 800c8cc:	0692      	lsls	r2, r2, #26
 800c8ce:	d42b      	bmi.n	800c928 <_printf_common+0xb0>
 800c8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8d4:	4649      	mov	r1, r9
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	47c0      	blx	r8
 800c8da:	3001      	adds	r0, #1
 800c8dc:	d01e      	beq.n	800c91c <_printf_common+0xa4>
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	68e5      	ldr	r5, [r4, #12]
 800c8e2:	6832      	ldr	r2, [r6, #0]
 800c8e4:	f003 0306 	and.w	r3, r3, #6
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	bf08      	it	eq
 800c8ec:	1aad      	subeq	r5, r5, r2
 800c8ee:	68a3      	ldr	r3, [r4, #8]
 800c8f0:	6922      	ldr	r2, [r4, #16]
 800c8f2:	bf0c      	ite	eq
 800c8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8f8:	2500      	movne	r5, #0
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	bfc4      	itt	gt
 800c8fe:	1a9b      	subgt	r3, r3, r2
 800c900:	18ed      	addgt	r5, r5, r3
 800c902:	2600      	movs	r6, #0
 800c904:	341a      	adds	r4, #26
 800c906:	42b5      	cmp	r5, r6
 800c908:	d11a      	bne.n	800c940 <_printf_common+0xc8>
 800c90a:	2000      	movs	r0, #0
 800c90c:	e008      	b.n	800c920 <_printf_common+0xa8>
 800c90e:	2301      	movs	r3, #1
 800c910:	4652      	mov	r2, sl
 800c912:	4649      	mov	r1, r9
 800c914:	4638      	mov	r0, r7
 800c916:	47c0      	blx	r8
 800c918:	3001      	adds	r0, #1
 800c91a:	d103      	bne.n	800c924 <_printf_common+0xac>
 800c91c:	f04f 30ff 	mov.w	r0, #4294967295
 800c920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c924:	3501      	adds	r5, #1
 800c926:	e7c6      	b.n	800c8b6 <_printf_common+0x3e>
 800c928:	18e1      	adds	r1, r4, r3
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	2030      	movs	r0, #48	; 0x30
 800c92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c932:	4422      	add	r2, r4
 800c934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c93c:	3302      	adds	r3, #2
 800c93e:	e7c7      	b.n	800c8d0 <_printf_common+0x58>
 800c940:	2301      	movs	r3, #1
 800c942:	4622      	mov	r2, r4
 800c944:	4649      	mov	r1, r9
 800c946:	4638      	mov	r0, r7
 800c948:	47c0      	blx	r8
 800c94a:	3001      	adds	r0, #1
 800c94c:	d0e6      	beq.n	800c91c <_printf_common+0xa4>
 800c94e:	3601      	adds	r6, #1
 800c950:	e7d9      	b.n	800c906 <_printf_common+0x8e>
	...

0800c954 <_printf_i>:
 800c954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	7e0f      	ldrb	r7, [r1, #24]
 800c95a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c95c:	2f78      	cmp	r7, #120	; 0x78
 800c95e:	4691      	mov	r9, r2
 800c960:	4680      	mov	r8, r0
 800c962:	460c      	mov	r4, r1
 800c964:	469a      	mov	sl, r3
 800c966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c96a:	d807      	bhi.n	800c97c <_printf_i+0x28>
 800c96c:	2f62      	cmp	r7, #98	; 0x62
 800c96e:	d80a      	bhi.n	800c986 <_printf_i+0x32>
 800c970:	2f00      	cmp	r7, #0
 800c972:	f000 80d8 	beq.w	800cb26 <_printf_i+0x1d2>
 800c976:	2f58      	cmp	r7, #88	; 0x58
 800c978:	f000 80a3 	beq.w	800cac2 <_printf_i+0x16e>
 800c97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c984:	e03a      	b.n	800c9fc <_printf_i+0xa8>
 800c986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c98a:	2b15      	cmp	r3, #21
 800c98c:	d8f6      	bhi.n	800c97c <_printf_i+0x28>
 800c98e:	a101      	add	r1, pc, #4	; (adr r1, 800c994 <_printf_i+0x40>)
 800c990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c994:	0800c9ed 	.word	0x0800c9ed
 800c998:	0800ca01 	.word	0x0800ca01
 800c99c:	0800c97d 	.word	0x0800c97d
 800c9a0:	0800c97d 	.word	0x0800c97d
 800c9a4:	0800c97d 	.word	0x0800c97d
 800c9a8:	0800c97d 	.word	0x0800c97d
 800c9ac:	0800ca01 	.word	0x0800ca01
 800c9b0:	0800c97d 	.word	0x0800c97d
 800c9b4:	0800c97d 	.word	0x0800c97d
 800c9b8:	0800c97d 	.word	0x0800c97d
 800c9bc:	0800c97d 	.word	0x0800c97d
 800c9c0:	0800cb0d 	.word	0x0800cb0d
 800c9c4:	0800ca31 	.word	0x0800ca31
 800c9c8:	0800caef 	.word	0x0800caef
 800c9cc:	0800c97d 	.word	0x0800c97d
 800c9d0:	0800c97d 	.word	0x0800c97d
 800c9d4:	0800cb2f 	.word	0x0800cb2f
 800c9d8:	0800c97d 	.word	0x0800c97d
 800c9dc:	0800ca31 	.word	0x0800ca31
 800c9e0:	0800c97d 	.word	0x0800c97d
 800c9e4:	0800c97d 	.word	0x0800c97d
 800c9e8:	0800caf7 	.word	0x0800caf7
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	602a      	str	r2, [r5, #0]
 800c9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e0a3      	b.n	800cb48 <_printf_i+0x1f4>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	6829      	ldr	r1, [r5, #0]
 800ca04:	0606      	lsls	r6, r0, #24
 800ca06:	f101 0304 	add.w	r3, r1, #4
 800ca0a:	d50a      	bpl.n	800ca22 <_printf_i+0xce>
 800ca0c:	680e      	ldr	r6, [r1, #0]
 800ca0e:	602b      	str	r3, [r5, #0]
 800ca10:	2e00      	cmp	r6, #0
 800ca12:	da03      	bge.n	800ca1c <_printf_i+0xc8>
 800ca14:	232d      	movs	r3, #45	; 0x2d
 800ca16:	4276      	negs	r6, r6
 800ca18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca1c:	485e      	ldr	r0, [pc, #376]	; (800cb98 <_printf_i+0x244>)
 800ca1e:	230a      	movs	r3, #10
 800ca20:	e019      	b.n	800ca56 <_printf_i+0x102>
 800ca22:	680e      	ldr	r6, [r1, #0]
 800ca24:	602b      	str	r3, [r5, #0]
 800ca26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca2a:	bf18      	it	ne
 800ca2c:	b236      	sxthne	r6, r6
 800ca2e:	e7ef      	b.n	800ca10 <_printf_i+0xbc>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	6820      	ldr	r0, [r4, #0]
 800ca34:	1d19      	adds	r1, r3, #4
 800ca36:	6029      	str	r1, [r5, #0]
 800ca38:	0601      	lsls	r1, r0, #24
 800ca3a:	d501      	bpl.n	800ca40 <_printf_i+0xec>
 800ca3c:	681e      	ldr	r6, [r3, #0]
 800ca3e:	e002      	b.n	800ca46 <_printf_i+0xf2>
 800ca40:	0646      	lsls	r6, r0, #25
 800ca42:	d5fb      	bpl.n	800ca3c <_printf_i+0xe8>
 800ca44:	881e      	ldrh	r6, [r3, #0]
 800ca46:	4854      	ldr	r0, [pc, #336]	; (800cb98 <_printf_i+0x244>)
 800ca48:	2f6f      	cmp	r7, #111	; 0x6f
 800ca4a:	bf0c      	ite	eq
 800ca4c:	2308      	moveq	r3, #8
 800ca4e:	230a      	movne	r3, #10
 800ca50:	2100      	movs	r1, #0
 800ca52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca56:	6865      	ldr	r5, [r4, #4]
 800ca58:	60a5      	str	r5, [r4, #8]
 800ca5a:	2d00      	cmp	r5, #0
 800ca5c:	bfa2      	ittt	ge
 800ca5e:	6821      	ldrge	r1, [r4, #0]
 800ca60:	f021 0104 	bicge.w	r1, r1, #4
 800ca64:	6021      	strge	r1, [r4, #0]
 800ca66:	b90e      	cbnz	r6, 800ca6c <_printf_i+0x118>
 800ca68:	2d00      	cmp	r5, #0
 800ca6a:	d04d      	beq.n	800cb08 <_printf_i+0x1b4>
 800ca6c:	4615      	mov	r5, r2
 800ca6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca72:	fb03 6711 	mls	r7, r3, r1, r6
 800ca76:	5dc7      	ldrb	r7, [r0, r7]
 800ca78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca7c:	4637      	mov	r7, r6
 800ca7e:	42bb      	cmp	r3, r7
 800ca80:	460e      	mov	r6, r1
 800ca82:	d9f4      	bls.n	800ca6e <_printf_i+0x11a>
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d10b      	bne.n	800caa0 <_printf_i+0x14c>
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	07de      	lsls	r6, r3, #31
 800ca8c:	d508      	bpl.n	800caa0 <_printf_i+0x14c>
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	6861      	ldr	r1, [r4, #4]
 800ca92:	4299      	cmp	r1, r3
 800ca94:	bfde      	ittt	le
 800ca96:	2330      	movle	r3, #48	; 0x30
 800ca98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800caa0:	1b52      	subs	r2, r2, r5
 800caa2:	6122      	str	r2, [r4, #16]
 800caa4:	f8cd a000 	str.w	sl, [sp]
 800caa8:	464b      	mov	r3, r9
 800caaa:	aa03      	add	r2, sp, #12
 800caac:	4621      	mov	r1, r4
 800caae:	4640      	mov	r0, r8
 800cab0:	f7ff fee2 	bl	800c878 <_printf_common>
 800cab4:	3001      	adds	r0, #1
 800cab6:	d14c      	bne.n	800cb52 <_printf_i+0x1fe>
 800cab8:	f04f 30ff 	mov.w	r0, #4294967295
 800cabc:	b004      	add	sp, #16
 800cabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac2:	4835      	ldr	r0, [pc, #212]	; (800cb98 <_printf_i+0x244>)
 800cac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cac8:	6829      	ldr	r1, [r5, #0]
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	f851 6b04 	ldr.w	r6, [r1], #4
 800cad0:	6029      	str	r1, [r5, #0]
 800cad2:	061d      	lsls	r5, r3, #24
 800cad4:	d514      	bpl.n	800cb00 <_printf_i+0x1ac>
 800cad6:	07df      	lsls	r7, r3, #31
 800cad8:	bf44      	itt	mi
 800cada:	f043 0320 	orrmi.w	r3, r3, #32
 800cade:	6023      	strmi	r3, [r4, #0]
 800cae0:	b91e      	cbnz	r6, 800caea <_printf_i+0x196>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	f023 0320 	bic.w	r3, r3, #32
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	2310      	movs	r3, #16
 800caec:	e7b0      	b.n	800ca50 <_printf_i+0xfc>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	f043 0320 	orr.w	r3, r3, #32
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	2378      	movs	r3, #120	; 0x78
 800caf8:	4828      	ldr	r0, [pc, #160]	; (800cb9c <_printf_i+0x248>)
 800cafa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cafe:	e7e3      	b.n	800cac8 <_printf_i+0x174>
 800cb00:	0659      	lsls	r1, r3, #25
 800cb02:	bf48      	it	mi
 800cb04:	b2b6      	uxthmi	r6, r6
 800cb06:	e7e6      	b.n	800cad6 <_printf_i+0x182>
 800cb08:	4615      	mov	r5, r2
 800cb0a:	e7bb      	b.n	800ca84 <_printf_i+0x130>
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	6826      	ldr	r6, [r4, #0]
 800cb10:	6961      	ldr	r1, [r4, #20]
 800cb12:	1d18      	adds	r0, r3, #4
 800cb14:	6028      	str	r0, [r5, #0]
 800cb16:	0635      	lsls	r5, r6, #24
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	d501      	bpl.n	800cb20 <_printf_i+0x1cc>
 800cb1c:	6019      	str	r1, [r3, #0]
 800cb1e:	e002      	b.n	800cb26 <_printf_i+0x1d2>
 800cb20:	0670      	lsls	r0, r6, #25
 800cb22:	d5fb      	bpl.n	800cb1c <_printf_i+0x1c8>
 800cb24:	8019      	strh	r1, [r3, #0]
 800cb26:	2300      	movs	r3, #0
 800cb28:	6123      	str	r3, [r4, #16]
 800cb2a:	4615      	mov	r5, r2
 800cb2c:	e7ba      	b.n	800caa4 <_printf_i+0x150>
 800cb2e:	682b      	ldr	r3, [r5, #0]
 800cb30:	1d1a      	adds	r2, r3, #4
 800cb32:	602a      	str	r2, [r5, #0]
 800cb34:	681d      	ldr	r5, [r3, #0]
 800cb36:	6862      	ldr	r2, [r4, #4]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f7f3 fb58 	bl	80001f0 <memchr>
 800cb40:	b108      	cbz	r0, 800cb46 <_printf_i+0x1f2>
 800cb42:	1b40      	subs	r0, r0, r5
 800cb44:	6060      	str	r0, [r4, #4]
 800cb46:	6863      	ldr	r3, [r4, #4]
 800cb48:	6123      	str	r3, [r4, #16]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb50:	e7a8      	b.n	800caa4 <_printf_i+0x150>
 800cb52:	6923      	ldr	r3, [r4, #16]
 800cb54:	462a      	mov	r2, r5
 800cb56:	4649      	mov	r1, r9
 800cb58:	4640      	mov	r0, r8
 800cb5a:	47d0      	blx	sl
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d0ab      	beq.n	800cab8 <_printf_i+0x164>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	079b      	lsls	r3, r3, #30
 800cb64:	d413      	bmi.n	800cb8e <_printf_i+0x23a>
 800cb66:	68e0      	ldr	r0, [r4, #12]
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	4298      	cmp	r0, r3
 800cb6c:	bfb8      	it	lt
 800cb6e:	4618      	movlt	r0, r3
 800cb70:	e7a4      	b.n	800cabc <_printf_i+0x168>
 800cb72:	2301      	movs	r3, #1
 800cb74:	4632      	mov	r2, r6
 800cb76:	4649      	mov	r1, r9
 800cb78:	4640      	mov	r0, r8
 800cb7a:	47d0      	blx	sl
 800cb7c:	3001      	adds	r0, #1
 800cb7e:	d09b      	beq.n	800cab8 <_printf_i+0x164>
 800cb80:	3501      	adds	r5, #1
 800cb82:	68e3      	ldr	r3, [r4, #12]
 800cb84:	9903      	ldr	r1, [sp, #12]
 800cb86:	1a5b      	subs	r3, r3, r1
 800cb88:	42ab      	cmp	r3, r5
 800cb8a:	dcf2      	bgt.n	800cb72 <_printf_i+0x21e>
 800cb8c:	e7eb      	b.n	800cb66 <_printf_i+0x212>
 800cb8e:	2500      	movs	r5, #0
 800cb90:	f104 0619 	add.w	r6, r4, #25
 800cb94:	e7f5      	b.n	800cb82 <_printf_i+0x22e>
 800cb96:	bf00      	nop
 800cb98:	0800efca 	.word	0x0800efca
 800cb9c:	0800efdb 	.word	0x0800efdb

0800cba0 <iprintf>:
 800cba0:	b40f      	push	{r0, r1, r2, r3}
 800cba2:	4b0a      	ldr	r3, [pc, #40]	; (800cbcc <iprintf+0x2c>)
 800cba4:	b513      	push	{r0, r1, r4, lr}
 800cba6:	681c      	ldr	r4, [r3, #0]
 800cba8:	b124      	cbz	r4, 800cbb4 <iprintf+0x14>
 800cbaa:	69a3      	ldr	r3, [r4, #24]
 800cbac:	b913      	cbnz	r3, 800cbb4 <iprintf+0x14>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f001 f8da 	bl	800dd68 <__sinit>
 800cbb4:	ab05      	add	r3, sp, #20
 800cbb6:	9a04      	ldr	r2, [sp, #16]
 800cbb8:	68a1      	ldr	r1, [r4, #8]
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f001 fe97 	bl	800e8f0 <_vfiprintf_r>
 800cbc2:	b002      	add	sp, #8
 800cbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc8:	b004      	add	sp, #16
 800cbca:	4770      	bx	lr
 800cbcc:	20000140 	.word	0x20000140

0800cbd0 <_puts_r>:
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	460e      	mov	r6, r1
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	b118      	cbz	r0, 800cbe0 <_puts_r+0x10>
 800cbd8:	6983      	ldr	r3, [r0, #24]
 800cbda:	b90b      	cbnz	r3, 800cbe0 <_puts_r+0x10>
 800cbdc:	f001 f8c4 	bl	800dd68 <__sinit>
 800cbe0:	69ab      	ldr	r3, [r5, #24]
 800cbe2:	68ac      	ldr	r4, [r5, #8]
 800cbe4:	b913      	cbnz	r3, 800cbec <_puts_r+0x1c>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	f001 f8be 	bl	800dd68 <__sinit>
 800cbec:	4b2c      	ldr	r3, [pc, #176]	; (800cca0 <_puts_r+0xd0>)
 800cbee:	429c      	cmp	r4, r3
 800cbf0:	d120      	bne.n	800cc34 <_puts_r+0x64>
 800cbf2:	686c      	ldr	r4, [r5, #4]
 800cbf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbf6:	07db      	lsls	r3, r3, #31
 800cbf8:	d405      	bmi.n	800cc06 <_puts_r+0x36>
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	0598      	lsls	r0, r3, #22
 800cbfe:	d402      	bmi.n	800cc06 <_puts_r+0x36>
 800cc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc02:	f001 f954 	bl	800deae <__retarget_lock_acquire_recursive>
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	0719      	lsls	r1, r3, #28
 800cc0a:	d51d      	bpl.n	800cc48 <_puts_r+0x78>
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	b1db      	cbz	r3, 800cc48 <_puts_r+0x78>
 800cc10:	3e01      	subs	r6, #1
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	60a3      	str	r3, [r4, #8]
 800cc1c:	bb39      	cbnz	r1, 800cc6e <_puts_r+0x9e>
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	da38      	bge.n	800cc94 <_puts_r+0xc4>
 800cc22:	4622      	mov	r2, r4
 800cc24:	210a      	movs	r1, #10
 800cc26:	4628      	mov	r0, r5
 800cc28:	f000 f848 	bl	800ccbc <__swbuf_r>
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	d011      	beq.n	800cc54 <_puts_r+0x84>
 800cc30:	250a      	movs	r5, #10
 800cc32:	e011      	b.n	800cc58 <_puts_r+0x88>
 800cc34:	4b1b      	ldr	r3, [pc, #108]	; (800cca4 <_puts_r+0xd4>)
 800cc36:	429c      	cmp	r4, r3
 800cc38:	d101      	bne.n	800cc3e <_puts_r+0x6e>
 800cc3a:	68ac      	ldr	r4, [r5, #8]
 800cc3c:	e7da      	b.n	800cbf4 <_puts_r+0x24>
 800cc3e:	4b1a      	ldr	r3, [pc, #104]	; (800cca8 <_puts_r+0xd8>)
 800cc40:	429c      	cmp	r4, r3
 800cc42:	bf08      	it	eq
 800cc44:	68ec      	ldreq	r4, [r5, #12]
 800cc46:	e7d5      	b.n	800cbf4 <_puts_r+0x24>
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f000 f888 	bl	800cd60 <__swsetup_r>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d0dd      	beq.n	800cc10 <_puts_r+0x40>
 800cc54:	f04f 35ff 	mov.w	r5, #4294967295
 800cc58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc5a:	07da      	lsls	r2, r3, #31
 800cc5c:	d405      	bmi.n	800cc6a <_puts_r+0x9a>
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	059b      	lsls	r3, r3, #22
 800cc62:	d402      	bmi.n	800cc6a <_puts_r+0x9a>
 800cc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc66:	f001 f923 	bl	800deb0 <__retarget_lock_release_recursive>
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	bd70      	pop	{r4, r5, r6, pc}
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	da04      	bge.n	800cc7c <_puts_r+0xac>
 800cc72:	69a2      	ldr	r2, [r4, #24]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	dc06      	bgt.n	800cc86 <_puts_r+0xb6>
 800cc78:	290a      	cmp	r1, #10
 800cc7a:	d004      	beq.n	800cc86 <_puts_r+0xb6>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	6022      	str	r2, [r4, #0]
 800cc82:	7019      	strb	r1, [r3, #0]
 800cc84:	e7c5      	b.n	800cc12 <_puts_r+0x42>
 800cc86:	4622      	mov	r2, r4
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f000 f817 	bl	800ccbc <__swbuf_r>
 800cc8e:	3001      	adds	r0, #1
 800cc90:	d1bf      	bne.n	800cc12 <_puts_r+0x42>
 800cc92:	e7df      	b.n	800cc54 <_puts_r+0x84>
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	250a      	movs	r5, #10
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	6022      	str	r2, [r4, #0]
 800cc9c:	701d      	strb	r5, [r3, #0]
 800cc9e:	e7db      	b.n	800cc58 <_puts_r+0x88>
 800cca0:	0800f09c 	.word	0x0800f09c
 800cca4:	0800f0bc 	.word	0x0800f0bc
 800cca8:	0800f07c 	.word	0x0800f07c

0800ccac <puts>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <puts+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f7ff bf8d 	b.w	800cbd0 <_puts_r>
 800ccb6:	bf00      	nop
 800ccb8:	20000140 	.word	0x20000140

0800ccbc <__swbuf_r>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	460e      	mov	r6, r1
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	b118      	cbz	r0, 800ccce <__swbuf_r+0x12>
 800ccc6:	6983      	ldr	r3, [r0, #24]
 800ccc8:	b90b      	cbnz	r3, 800ccce <__swbuf_r+0x12>
 800ccca:	f001 f84d 	bl	800dd68 <__sinit>
 800ccce:	4b21      	ldr	r3, [pc, #132]	; (800cd54 <__swbuf_r+0x98>)
 800ccd0:	429c      	cmp	r4, r3
 800ccd2:	d12b      	bne.n	800cd2c <__swbuf_r+0x70>
 800ccd4:	686c      	ldr	r4, [r5, #4]
 800ccd6:	69a3      	ldr	r3, [r4, #24]
 800ccd8:	60a3      	str	r3, [r4, #8]
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	071a      	lsls	r2, r3, #28
 800ccde:	d52f      	bpl.n	800cd40 <__swbuf_r+0x84>
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	b36b      	cbz	r3, 800cd40 <__swbuf_r+0x84>
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	1ac0      	subs	r0, r0, r3
 800ccea:	6963      	ldr	r3, [r4, #20]
 800ccec:	b2f6      	uxtb	r6, r6
 800ccee:	4283      	cmp	r3, r0
 800ccf0:	4637      	mov	r7, r6
 800ccf2:	dc04      	bgt.n	800ccfe <__swbuf_r+0x42>
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f000 ffa2 	bl	800dc40 <_fflush_r>
 800ccfc:	bb30      	cbnz	r0, 800cd4c <__swbuf_r+0x90>
 800ccfe:	68a3      	ldr	r3, [r4, #8]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	60a3      	str	r3, [r4, #8]
 800cd04:	6823      	ldr	r3, [r4, #0]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	6022      	str	r2, [r4, #0]
 800cd0a:	701e      	strb	r6, [r3, #0]
 800cd0c:	6963      	ldr	r3, [r4, #20]
 800cd0e:	3001      	adds	r0, #1
 800cd10:	4283      	cmp	r3, r0
 800cd12:	d004      	beq.n	800cd1e <__swbuf_r+0x62>
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	07db      	lsls	r3, r3, #31
 800cd18:	d506      	bpl.n	800cd28 <__swbuf_r+0x6c>
 800cd1a:	2e0a      	cmp	r6, #10
 800cd1c:	d104      	bne.n	800cd28 <__swbuf_r+0x6c>
 800cd1e:	4621      	mov	r1, r4
 800cd20:	4628      	mov	r0, r5
 800cd22:	f000 ff8d 	bl	800dc40 <_fflush_r>
 800cd26:	b988      	cbnz	r0, 800cd4c <__swbuf_r+0x90>
 800cd28:	4638      	mov	r0, r7
 800cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <__swbuf_r+0x9c>)
 800cd2e:	429c      	cmp	r4, r3
 800cd30:	d101      	bne.n	800cd36 <__swbuf_r+0x7a>
 800cd32:	68ac      	ldr	r4, [r5, #8]
 800cd34:	e7cf      	b.n	800ccd6 <__swbuf_r+0x1a>
 800cd36:	4b09      	ldr	r3, [pc, #36]	; (800cd5c <__swbuf_r+0xa0>)
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	bf08      	it	eq
 800cd3c:	68ec      	ldreq	r4, [r5, #12]
 800cd3e:	e7ca      	b.n	800ccd6 <__swbuf_r+0x1a>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 f80c 	bl	800cd60 <__swsetup_r>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d0cb      	beq.n	800cce4 <__swbuf_r+0x28>
 800cd4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd50:	e7ea      	b.n	800cd28 <__swbuf_r+0x6c>
 800cd52:	bf00      	nop
 800cd54:	0800f09c 	.word	0x0800f09c
 800cd58:	0800f0bc 	.word	0x0800f0bc
 800cd5c:	0800f07c 	.word	0x0800f07c

0800cd60 <__swsetup_r>:
 800cd60:	4b32      	ldr	r3, [pc, #200]	; (800ce2c <__swsetup_r+0xcc>)
 800cd62:	b570      	push	{r4, r5, r6, lr}
 800cd64:	681d      	ldr	r5, [r3, #0]
 800cd66:	4606      	mov	r6, r0
 800cd68:	460c      	mov	r4, r1
 800cd6a:	b125      	cbz	r5, 800cd76 <__swsetup_r+0x16>
 800cd6c:	69ab      	ldr	r3, [r5, #24]
 800cd6e:	b913      	cbnz	r3, 800cd76 <__swsetup_r+0x16>
 800cd70:	4628      	mov	r0, r5
 800cd72:	f000 fff9 	bl	800dd68 <__sinit>
 800cd76:	4b2e      	ldr	r3, [pc, #184]	; (800ce30 <__swsetup_r+0xd0>)
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	d10f      	bne.n	800cd9c <__swsetup_r+0x3c>
 800cd7c:	686c      	ldr	r4, [r5, #4]
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd84:	0719      	lsls	r1, r3, #28
 800cd86:	d42c      	bmi.n	800cde2 <__swsetup_r+0x82>
 800cd88:	06dd      	lsls	r5, r3, #27
 800cd8a:	d411      	bmi.n	800cdb0 <__swsetup_r+0x50>
 800cd8c:	2309      	movs	r3, #9
 800cd8e:	6033      	str	r3, [r6, #0]
 800cd90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9a:	e03e      	b.n	800ce1a <__swsetup_r+0xba>
 800cd9c:	4b25      	ldr	r3, [pc, #148]	; (800ce34 <__swsetup_r+0xd4>)
 800cd9e:	429c      	cmp	r4, r3
 800cda0:	d101      	bne.n	800cda6 <__swsetup_r+0x46>
 800cda2:	68ac      	ldr	r4, [r5, #8]
 800cda4:	e7eb      	b.n	800cd7e <__swsetup_r+0x1e>
 800cda6:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <__swsetup_r+0xd8>)
 800cda8:	429c      	cmp	r4, r3
 800cdaa:	bf08      	it	eq
 800cdac:	68ec      	ldreq	r4, [r5, #12]
 800cdae:	e7e6      	b.n	800cd7e <__swsetup_r+0x1e>
 800cdb0:	0758      	lsls	r0, r3, #29
 800cdb2:	d512      	bpl.n	800cdda <__swsetup_r+0x7a>
 800cdb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdb6:	b141      	cbz	r1, 800cdca <__swsetup_r+0x6a>
 800cdb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdbc:	4299      	cmp	r1, r3
 800cdbe:	d002      	beq.n	800cdc6 <__swsetup_r+0x66>
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f001 fc8b 	bl	800e6dc <_free_r>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	6363      	str	r3, [r4, #52]	; 0x34
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	6923      	ldr	r3, [r4, #16]
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	81a3      	strh	r3, [r4, #12]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	b94b      	cbnz	r3, 800cdfa <__swsetup_r+0x9a>
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdf0:	d003      	beq.n	800cdfa <__swsetup_r+0x9a>
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f001 f881 	bl	800defc <__smakebuf_r>
 800cdfa:	89a0      	ldrh	r0, [r4, #12]
 800cdfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce00:	f010 0301 	ands.w	r3, r0, #1
 800ce04:	d00a      	beq.n	800ce1c <__swsetup_r+0xbc>
 800ce06:	2300      	movs	r3, #0
 800ce08:	60a3      	str	r3, [r4, #8]
 800ce0a:	6963      	ldr	r3, [r4, #20]
 800ce0c:	425b      	negs	r3, r3
 800ce0e:	61a3      	str	r3, [r4, #24]
 800ce10:	6923      	ldr	r3, [r4, #16]
 800ce12:	b943      	cbnz	r3, 800ce26 <__swsetup_r+0xc6>
 800ce14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce18:	d1ba      	bne.n	800cd90 <__swsetup_r+0x30>
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	0781      	lsls	r1, r0, #30
 800ce1e:	bf58      	it	pl
 800ce20:	6963      	ldrpl	r3, [r4, #20]
 800ce22:	60a3      	str	r3, [r4, #8]
 800ce24:	e7f4      	b.n	800ce10 <__swsetup_r+0xb0>
 800ce26:	2000      	movs	r0, #0
 800ce28:	e7f7      	b.n	800ce1a <__swsetup_r+0xba>
 800ce2a:	bf00      	nop
 800ce2c:	20000140 	.word	0x20000140
 800ce30:	0800f09c 	.word	0x0800f09c
 800ce34:	0800f0bc 	.word	0x0800f0bc
 800ce38:	0800f07c 	.word	0x0800f07c

0800ce3c <quorem>:
 800ce3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	6903      	ldr	r3, [r0, #16]
 800ce42:	690c      	ldr	r4, [r1, #16]
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	4607      	mov	r7, r0
 800ce48:	f2c0 8081 	blt.w	800cf4e <quorem+0x112>
 800ce4c:	3c01      	subs	r4, #1
 800ce4e:	f101 0814 	add.w	r8, r1, #20
 800ce52:	f100 0514 	add.w	r5, r0, #20
 800ce56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce64:	3301      	adds	r3, #1
 800ce66:	429a      	cmp	r2, r3
 800ce68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ce6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce74:	d331      	bcc.n	800ceda <quorem+0x9e>
 800ce76:	f04f 0e00 	mov.w	lr, #0
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	46ac      	mov	ip, r5
 800ce7e:	46f2      	mov	sl, lr
 800ce80:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce84:	b293      	uxth	r3, r2
 800ce86:	fb06 e303 	mla	r3, r6, r3, lr
 800ce8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	ebaa 0303 	sub.w	r3, sl, r3
 800ce94:	f8dc a000 	ldr.w	sl, [ip]
 800ce98:	0c12      	lsrs	r2, r2, #16
 800ce9a:	fa13 f38a 	uxtah	r3, r3, sl
 800ce9e:	fb06 e202 	mla	r2, r6, r2, lr
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	9b00      	ldr	r3, [sp, #0]
 800cea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ceaa:	b292      	uxth	r2, r2
 800ceac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ceb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ceb4:	f8bd 3000 	ldrh.w	r3, [sp]
 800ceb8:	4581      	cmp	r9, r0
 800ceba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cebe:	f84c 3b04 	str.w	r3, [ip], #4
 800cec2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cec6:	d2db      	bcs.n	800ce80 <quorem+0x44>
 800cec8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cecc:	b92b      	cbnz	r3, 800ceda <quorem+0x9e>
 800cece:	9b01      	ldr	r3, [sp, #4]
 800ced0:	3b04      	subs	r3, #4
 800ced2:	429d      	cmp	r5, r3
 800ced4:	461a      	mov	r2, r3
 800ced6:	d32e      	bcc.n	800cf36 <quorem+0xfa>
 800ced8:	613c      	str	r4, [r7, #16]
 800ceda:	4638      	mov	r0, r7
 800cedc:	f001 fae6 	bl	800e4ac <__mcmp>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	db24      	blt.n	800cf2e <quorem+0xf2>
 800cee4:	3601      	adds	r6, #1
 800cee6:	4628      	mov	r0, r5
 800cee8:	f04f 0c00 	mov.w	ip, #0
 800ceec:	f858 2b04 	ldr.w	r2, [r8], #4
 800cef0:	f8d0 e000 	ldr.w	lr, [r0]
 800cef4:	b293      	uxth	r3, r2
 800cef6:	ebac 0303 	sub.w	r3, ip, r3
 800cefa:	0c12      	lsrs	r2, r2, #16
 800cefc:	fa13 f38e 	uxtah	r3, r3, lr
 800cf00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf0e:	45c1      	cmp	r9, r8
 800cf10:	f840 3b04 	str.w	r3, [r0], #4
 800cf14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf18:	d2e8      	bcs.n	800ceec <quorem+0xb0>
 800cf1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf22:	b922      	cbnz	r2, 800cf2e <quorem+0xf2>
 800cf24:	3b04      	subs	r3, #4
 800cf26:	429d      	cmp	r5, r3
 800cf28:	461a      	mov	r2, r3
 800cf2a:	d30a      	bcc.n	800cf42 <quorem+0x106>
 800cf2c:	613c      	str	r4, [r7, #16]
 800cf2e:	4630      	mov	r0, r6
 800cf30:	b003      	add	sp, #12
 800cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	3b04      	subs	r3, #4
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	d1cc      	bne.n	800ced8 <quorem+0x9c>
 800cf3e:	3c01      	subs	r4, #1
 800cf40:	e7c7      	b.n	800ced2 <quorem+0x96>
 800cf42:	6812      	ldr	r2, [r2, #0]
 800cf44:	3b04      	subs	r3, #4
 800cf46:	2a00      	cmp	r2, #0
 800cf48:	d1f0      	bne.n	800cf2c <quorem+0xf0>
 800cf4a:	3c01      	subs	r4, #1
 800cf4c:	e7eb      	b.n	800cf26 <quorem+0xea>
 800cf4e:	2000      	movs	r0, #0
 800cf50:	e7ee      	b.n	800cf30 <quorem+0xf4>
 800cf52:	0000      	movs	r0, r0
 800cf54:	0000      	movs	r0, r0
	...

0800cf58 <_dtoa_r>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	ed2d 8b04 	vpush	{d8-d9}
 800cf60:	ec57 6b10 	vmov	r6, r7, d0
 800cf64:	b093      	sub	sp, #76	; 0x4c
 800cf66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cf6c:	9106      	str	r1, [sp, #24]
 800cf6e:	ee10 aa10 	vmov	sl, s0
 800cf72:	4604      	mov	r4, r0
 800cf74:	9209      	str	r2, [sp, #36]	; 0x24
 800cf76:	930c      	str	r3, [sp, #48]	; 0x30
 800cf78:	46bb      	mov	fp, r7
 800cf7a:	b975      	cbnz	r5, 800cf9a <_dtoa_r+0x42>
 800cf7c:	2010      	movs	r0, #16
 800cf7e:	f000 fffd 	bl	800df7c <malloc>
 800cf82:	4602      	mov	r2, r0
 800cf84:	6260      	str	r0, [r4, #36]	; 0x24
 800cf86:	b920      	cbnz	r0, 800cf92 <_dtoa_r+0x3a>
 800cf88:	4ba7      	ldr	r3, [pc, #668]	; (800d228 <_dtoa_r+0x2d0>)
 800cf8a:	21ea      	movs	r1, #234	; 0xea
 800cf8c:	48a7      	ldr	r0, [pc, #668]	; (800d22c <_dtoa_r+0x2d4>)
 800cf8e:	f001 fe45 	bl	800ec1c <__assert_func>
 800cf92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf96:	6005      	str	r5, [r0, #0]
 800cf98:	60c5      	str	r5, [r0, #12]
 800cf9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf9c:	6819      	ldr	r1, [r3, #0]
 800cf9e:	b151      	cbz	r1, 800cfb6 <_dtoa_r+0x5e>
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	604a      	str	r2, [r1, #4]
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	4093      	lsls	r3, r2
 800cfa8:	608b      	str	r3, [r1, #8]
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f001 f83c 	bl	800e028 <_Bfree>
 800cfb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]
 800cfb6:	1e3b      	subs	r3, r7, #0
 800cfb8:	bfaa      	itet	ge
 800cfba:	2300      	movge	r3, #0
 800cfbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cfc0:	f8c8 3000 	strge.w	r3, [r8]
 800cfc4:	4b9a      	ldr	r3, [pc, #616]	; (800d230 <_dtoa_r+0x2d8>)
 800cfc6:	bfbc      	itt	lt
 800cfc8:	2201      	movlt	r2, #1
 800cfca:	f8c8 2000 	strlt.w	r2, [r8]
 800cfce:	ea33 030b 	bics.w	r3, r3, fp
 800cfd2:	d11b      	bne.n	800d00c <_dtoa_r+0xb4>
 800cfd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfd6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfe0:	4333      	orrs	r3, r6
 800cfe2:	f000 8592 	beq.w	800db0a <_dtoa_r+0xbb2>
 800cfe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfe8:	b963      	cbnz	r3, 800d004 <_dtoa_r+0xac>
 800cfea:	4b92      	ldr	r3, [pc, #584]	; (800d234 <_dtoa_r+0x2dc>)
 800cfec:	e022      	b.n	800d034 <_dtoa_r+0xdc>
 800cfee:	4b92      	ldr	r3, [pc, #584]	; (800d238 <_dtoa_r+0x2e0>)
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	3308      	adds	r3, #8
 800cff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	9801      	ldr	r0, [sp, #4]
 800cffa:	b013      	add	sp, #76	; 0x4c
 800cffc:	ecbd 8b04 	vpop	{d8-d9}
 800d000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d004:	4b8b      	ldr	r3, [pc, #556]	; (800d234 <_dtoa_r+0x2dc>)
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	3303      	adds	r3, #3
 800d00a:	e7f3      	b.n	800cff4 <_dtoa_r+0x9c>
 800d00c:	2200      	movs	r2, #0
 800d00e:	2300      	movs	r3, #0
 800d010:	4650      	mov	r0, sl
 800d012:	4659      	mov	r1, fp
 800d014:	f7f3 fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 800d018:	ec4b ab19 	vmov	d9, sl, fp
 800d01c:	4680      	mov	r8, r0
 800d01e:	b158      	cbz	r0, 800d038 <_dtoa_r+0xe0>
 800d020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d022:	2301      	movs	r3, #1
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 856b 	beq.w	800db04 <_dtoa_r+0xbac>
 800d02e:	4883      	ldr	r0, [pc, #524]	; (800d23c <_dtoa_r+0x2e4>)
 800d030:	6018      	str	r0, [r3, #0]
 800d032:	1e43      	subs	r3, r0, #1
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	e7df      	b.n	800cff8 <_dtoa_r+0xa0>
 800d038:	ec4b ab10 	vmov	d0, sl, fp
 800d03c:	aa10      	add	r2, sp, #64	; 0x40
 800d03e:	a911      	add	r1, sp, #68	; 0x44
 800d040:	4620      	mov	r0, r4
 800d042:	f001 fad9 	bl	800e5f8 <__d2b>
 800d046:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d04a:	ee08 0a10 	vmov	s16, r0
 800d04e:	2d00      	cmp	r5, #0
 800d050:	f000 8084 	beq.w	800d15c <_dtoa_r+0x204>
 800d054:	ee19 3a90 	vmov	r3, s19
 800d058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d05c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d060:	4656      	mov	r6, sl
 800d062:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d06a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d06e:	4b74      	ldr	r3, [pc, #464]	; (800d240 <_dtoa_r+0x2e8>)
 800d070:	2200      	movs	r2, #0
 800d072:	4630      	mov	r0, r6
 800d074:	4639      	mov	r1, r7
 800d076:	f7f3 f90f 	bl	8000298 <__aeabi_dsub>
 800d07a:	a365      	add	r3, pc, #404	; (adr r3, 800d210 <_dtoa_r+0x2b8>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	f7f3 fac2 	bl	8000608 <__aeabi_dmul>
 800d084:	a364      	add	r3, pc, #400	; (adr r3, 800d218 <_dtoa_r+0x2c0>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 f907 	bl	800029c <__adddf3>
 800d08e:	4606      	mov	r6, r0
 800d090:	4628      	mov	r0, r5
 800d092:	460f      	mov	r7, r1
 800d094:	f7f3 fa4e 	bl	8000534 <__aeabi_i2d>
 800d098:	a361      	add	r3, pc, #388	; (adr r3, 800d220 <_dtoa_r+0x2c8>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	f7f3 fab3 	bl	8000608 <__aeabi_dmul>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 f8f7 	bl	800029c <__adddf3>
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	f7f3 fd59 	bl	8000b68 <__aeabi_d2iz>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	9000      	str	r0, [sp, #0]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	4630      	mov	r0, r6
 800d0be:	4639      	mov	r1, r7
 800d0c0:	f7f3 fd14 	bl	8000aec <__aeabi_dcmplt>
 800d0c4:	b150      	cbz	r0, 800d0dc <_dtoa_r+0x184>
 800d0c6:	9800      	ldr	r0, [sp, #0]
 800d0c8:	f7f3 fa34 	bl	8000534 <__aeabi_i2d>
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	f7f3 fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0d4:	b910      	cbnz	r0, 800d0dc <_dtoa_r+0x184>
 800d0d6:	9b00      	ldr	r3, [sp, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	2b16      	cmp	r3, #22
 800d0e0:	d85a      	bhi.n	800d198 <_dtoa_r+0x240>
 800d0e2:	9a00      	ldr	r2, [sp, #0]
 800d0e4:	4b57      	ldr	r3, [pc, #348]	; (800d244 <_dtoa_r+0x2ec>)
 800d0e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	ec51 0b19 	vmov	r0, r1, d9
 800d0f2:	f7f3 fcfb 	bl	8000aec <__aeabi_dcmplt>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d050      	beq.n	800d19c <_dtoa_r+0x244>
 800d0fa:	9b00      	ldr	r3, [sp, #0]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	2300      	movs	r3, #0
 800d102:	930b      	str	r3, [sp, #44]	; 0x2c
 800d104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d106:	1b5d      	subs	r5, r3, r5
 800d108:	1e6b      	subs	r3, r5, #1
 800d10a:	9305      	str	r3, [sp, #20]
 800d10c:	bf45      	ittet	mi
 800d10e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d112:	9304      	strmi	r3, [sp, #16]
 800d114:	2300      	movpl	r3, #0
 800d116:	2300      	movmi	r3, #0
 800d118:	bf4c      	ite	mi
 800d11a:	9305      	strmi	r3, [sp, #20]
 800d11c:	9304      	strpl	r3, [sp, #16]
 800d11e:	9b00      	ldr	r3, [sp, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	db3d      	blt.n	800d1a0 <_dtoa_r+0x248>
 800d124:	9b05      	ldr	r3, [sp, #20]
 800d126:	9a00      	ldr	r2, [sp, #0]
 800d128:	920a      	str	r2, [sp, #40]	; 0x28
 800d12a:	4413      	add	r3, r2
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	2300      	movs	r3, #0
 800d130:	9307      	str	r3, [sp, #28]
 800d132:	9b06      	ldr	r3, [sp, #24]
 800d134:	2b09      	cmp	r3, #9
 800d136:	f200 8089 	bhi.w	800d24c <_dtoa_r+0x2f4>
 800d13a:	2b05      	cmp	r3, #5
 800d13c:	bfc4      	itt	gt
 800d13e:	3b04      	subgt	r3, #4
 800d140:	9306      	strgt	r3, [sp, #24]
 800d142:	9b06      	ldr	r3, [sp, #24]
 800d144:	f1a3 0302 	sub.w	r3, r3, #2
 800d148:	bfcc      	ite	gt
 800d14a:	2500      	movgt	r5, #0
 800d14c:	2501      	movle	r5, #1
 800d14e:	2b03      	cmp	r3, #3
 800d150:	f200 8087 	bhi.w	800d262 <_dtoa_r+0x30a>
 800d154:	e8df f003 	tbb	[pc, r3]
 800d158:	59383a2d 	.word	0x59383a2d
 800d15c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d160:	441d      	add	r5, r3
 800d162:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d166:	2b20      	cmp	r3, #32
 800d168:	bfc1      	itttt	gt
 800d16a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d16e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d172:	fa0b f303 	lslgt.w	r3, fp, r3
 800d176:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d17a:	bfda      	itte	le
 800d17c:	f1c3 0320 	rsble	r3, r3, #32
 800d180:	fa06 f003 	lslle.w	r0, r6, r3
 800d184:	4318      	orrgt	r0, r3
 800d186:	f7f3 f9c5 	bl	8000514 <__aeabi_ui2d>
 800d18a:	2301      	movs	r3, #1
 800d18c:	4606      	mov	r6, r0
 800d18e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d192:	3d01      	subs	r5, #1
 800d194:	930e      	str	r3, [sp, #56]	; 0x38
 800d196:	e76a      	b.n	800d06e <_dtoa_r+0x116>
 800d198:	2301      	movs	r3, #1
 800d19a:	e7b2      	b.n	800d102 <_dtoa_r+0x1aa>
 800d19c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d19e:	e7b1      	b.n	800d104 <_dtoa_r+0x1ac>
 800d1a0:	9b04      	ldr	r3, [sp, #16]
 800d1a2:	9a00      	ldr	r2, [sp, #0]
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	9304      	str	r3, [sp, #16]
 800d1a8:	4253      	negs	r3, r2
 800d1aa:	9307      	str	r3, [sp, #28]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d1b0:	e7bf      	b.n	800d132 <_dtoa_r+0x1da>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9308      	str	r3, [sp, #32]
 800d1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	dc55      	bgt.n	800d268 <_dtoa_r+0x310>
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d1c6:	e00c      	b.n	800d1e2 <_dtoa_r+0x28a>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e7f3      	b.n	800d1b4 <_dtoa_r+0x25c>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1d0:	9308      	str	r3, [sp, #32]
 800d1d2:	9b00      	ldr	r3, [sp, #0]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	9302      	str	r3, [sp, #8]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	9303      	str	r3, [sp, #12]
 800d1de:	bfb8      	it	lt
 800d1e0:	2301      	movlt	r3, #1
 800d1e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	6042      	str	r2, [r0, #4]
 800d1e8:	2204      	movs	r2, #4
 800d1ea:	f102 0614 	add.w	r6, r2, #20
 800d1ee:	429e      	cmp	r6, r3
 800d1f0:	6841      	ldr	r1, [r0, #4]
 800d1f2:	d93d      	bls.n	800d270 <_dtoa_r+0x318>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 fed7 	bl	800dfa8 <_Balloc>
 800d1fa:	9001      	str	r0, [sp, #4]
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d13b      	bne.n	800d278 <_dtoa_r+0x320>
 800d200:	4b11      	ldr	r3, [pc, #68]	; (800d248 <_dtoa_r+0x2f0>)
 800d202:	4602      	mov	r2, r0
 800d204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d208:	e6c0      	b.n	800cf8c <_dtoa_r+0x34>
 800d20a:	2301      	movs	r3, #1
 800d20c:	e7df      	b.n	800d1ce <_dtoa_r+0x276>
 800d20e:	bf00      	nop
 800d210:	636f4361 	.word	0x636f4361
 800d214:	3fd287a7 	.word	0x3fd287a7
 800d218:	8b60c8b3 	.word	0x8b60c8b3
 800d21c:	3fc68a28 	.word	0x3fc68a28
 800d220:	509f79fb 	.word	0x509f79fb
 800d224:	3fd34413 	.word	0x3fd34413
 800d228:	0800eff9 	.word	0x0800eff9
 800d22c:	0800f010 	.word	0x0800f010
 800d230:	7ff00000 	.word	0x7ff00000
 800d234:	0800eff5 	.word	0x0800eff5
 800d238:	0800efec 	.word	0x0800efec
 800d23c:	0800efc9 	.word	0x0800efc9
 800d240:	3ff80000 	.word	0x3ff80000
 800d244:	0800f160 	.word	0x0800f160
 800d248:	0800f06b 	.word	0x0800f06b
 800d24c:	2501      	movs	r5, #1
 800d24e:	2300      	movs	r3, #0
 800d250:	9306      	str	r3, [sp, #24]
 800d252:	9508      	str	r5, [sp, #32]
 800d254:	f04f 33ff 	mov.w	r3, #4294967295
 800d258:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d25c:	2200      	movs	r2, #0
 800d25e:	2312      	movs	r3, #18
 800d260:	e7b0      	b.n	800d1c4 <_dtoa_r+0x26c>
 800d262:	2301      	movs	r3, #1
 800d264:	9308      	str	r3, [sp, #32]
 800d266:	e7f5      	b.n	800d254 <_dtoa_r+0x2fc>
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d26e:	e7b8      	b.n	800d1e2 <_dtoa_r+0x28a>
 800d270:	3101      	adds	r1, #1
 800d272:	6041      	str	r1, [r0, #4]
 800d274:	0052      	lsls	r2, r2, #1
 800d276:	e7b8      	b.n	800d1ea <_dtoa_r+0x292>
 800d278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d27a:	9a01      	ldr	r2, [sp, #4]
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	9b03      	ldr	r3, [sp, #12]
 800d280:	2b0e      	cmp	r3, #14
 800d282:	f200 809d 	bhi.w	800d3c0 <_dtoa_r+0x468>
 800d286:	2d00      	cmp	r5, #0
 800d288:	f000 809a 	beq.w	800d3c0 <_dtoa_r+0x468>
 800d28c:	9b00      	ldr	r3, [sp, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	dd32      	ble.n	800d2f8 <_dtoa_r+0x3a0>
 800d292:	4ab7      	ldr	r2, [pc, #732]	; (800d570 <_dtoa_r+0x618>)
 800d294:	f003 030f 	and.w	r3, r3, #15
 800d298:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d29c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2a0:	9b00      	ldr	r3, [sp, #0]
 800d2a2:	05d8      	lsls	r0, r3, #23
 800d2a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d2a8:	d516      	bpl.n	800d2d8 <_dtoa_r+0x380>
 800d2aa:	4bb2      	ldr	r3, [pc, #712]	; (800d574 <_dtoa_r+0x61c>)
 800d2ac:	ec51 0b19 	vmov	r0, r1, d9
 800d2b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2b4:	f7f3 fad2 	bl	800085c <__aeabi_ddiv>
 800d2b8:	f007 070f 	and.w	r7, r7, #15
 800d2bc:	4682      	mov	sl, r0
 800d2be:	468b      	mov	fp, r1
 800d2c0:	2503      	movs	r5, #3
 800d2c2:	4eac      	ldr	r6, [pc, #688]	; (800d574 <_dtoa_r+0x61c>)
 800d2c4:	b957      	cbnz	r7, 800d2dc <_dtoa_r+0x384>
 800d2c6:	4642      	mov	r2, r8
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	4650      	mov	r0, sl
 800d2cc:	4659      	mov	r1, fp
 800d2ce:	f7f3 fac5 	bl	800085c <__aeabi_ddiv>
 800d2d2:	4682      	mov	sl, r0
 800d2d4:	468b      	mov	fp, r1
 800d2d6:	e028      	b.n	800d32a <_dtoa_r+0x3d2>
 800d2d8:	2502      	movs	r5, #2
 800d2da:	e7f2      	b.n	800d2c2 <_dtoa_r+0x36a>
 800d2dc:	07f9      	lsls	r1, r7, #31
 800d2de:	d508      	bpl.n	800d2f2 <_dtoa_r+0x39a>
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2e8:	f7f3 f98e 	bl	8000608 <__aeabi_dmul>
 800d2ec:	3501      	adds	r5, #1
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	4689      	mov	r9, r1
 800d2f2:	107f      	asrs	r7, r7, #1
 800d2f4:	3608      	adds	r6, #8
 800d2f6:	e7e5      	b.n	800d2c4 <_dtoa_r+0x36c>
 800d2f8:	f000 809b 	beq.w	800d432 <_dtoa_r+0x4da>
 800d2fc:	9b00      	ldr	r3, [sp, #0]
 800d2fe:	4f9d      	ldr	r7, [pc, #628]	; (800d574 <_dtoa_r+0x61c>)
 800d300:	425e      	negs	r6, r3
 800d302:	4b9b      	ldr	r3, [pc, #620]	; (800d570 <_dtoa_r+0x618>)
 800d304:	f006 020f 	and.w	r2, r6, #15
 800d308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	ec51 0b19 	vmov	r0, r1, d9
 800d314:	f7f3 f978 	bl	8000608 <__aeabi_dmul>
 800d318:	1136      	asrs	r6, r6, #4
 800d31a:	4682      	mov	sl, r0
 800d31c:	468b      	mov	fp, r1
 800d31e:	2300      	movs	r3, #0
 800d320:	2502      	movs	r5, #2
 800d322:	2e00      	cmp	r6, #0
 800d324:	d17a      	bne.n	800d41c <_dtoa_r+0x4c4>
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1d3      	bne.n	800d2d2 <_dtoa_r+0x37a>
 800d32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 8082 	beq.w	800d436 <_dtoa_r+0x4de>
 800d332:	4b91      	ldr	r3, [pc, #580]	; (800d578 <_dtoa_r+0x620>)
 800d334:	2200      	movs	r2, #0
 800d336:	4650      	mov	r0, sl
 800d338:	4659      	mov	r1, fp
 800d33a:	f7f3 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d079      	beq.n	800d436 <_dtoa_r+0x4de>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d076      	beq.n	800d436 <_dtoa_r+0x4de>
 800d348:	9b02      	ldr	r3, [sp, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	dd36      	ble.n	800d3bc <_dtoa_r+0x464>
 800d34e:	9b00      	ldr	r3, [sp, #0]
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	1e5f      	subs	r7, r3, #1
 800d356:	2200      	movs	r2, #0
 800d358:	4b88      	ldr	r3, [pc, #544]	; (800d57c <_dtoa_r+0x624>)
 800d35a:	f7f3 f955 	bl	8000608 <__aeabi_dmul>
 800d35e:	9e02      	ldr	r6, [sp, #8]
 800d360:	4682      	mov	sl, r0
 800d362:	468b      	mov	fp, r1
 800d364:	3501      	adds	r5, #1
 800d366:	4628      	mov	r0, r5
 800d368:	f7f3 f8e4 	bl	8000534 <__aeabi_i2d>
 800d36c:	4652      	mov	r2, sl
 800d36e:	465b      	mov	r3, fp
 800d370:	f7f3 f94a 	bl	8000608 <__aeabi_dmul>
 800d374:	4b82      	ldr	r3, [pc, #520]	; (800d580 <_dtoa_r+0x628>)
 800d376:	2200      	movs	r2, #0
 800d378:	f7f2 ff90 	bl	800029c <__adddf3>
 800d37c:	46d0      	mov	r8, sl
 800d37e:	46d9      	mov	r9, fp
 800d380:	4682      	mov	sl, r0
 800d382:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d386:	2e00      	cmp	r6, #0
 800d388:	d158      	bne.n	800d43c <_dtoa_r+0x4e4>
 800d38a:	4b7e      	ldr	r3, [pc, #504]	; (800d584 <_dtoa_r+0x62c>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	4640      	mov	r0, r8
 800d390:	4649      	mov	r1, r9
 800d392:	f7f2 ff81 	bl	8000298 <__aeabi_dsub>
 800d396:	4652      	mov	r2, sl
 800d398:	465b      	mov	r3, fp
 800d39a:	4680      	mov	r8, r0
 800d39c:	4689      	mov	r9, r1
 800d39e:	f7f3 fbc3 	bl	8000b28 <__aeabi_dcmpgt>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f040 8295 	bne.w	800d8d2 <_dtoa_r+0x97a>
 800d3a8:	4652      	mov	r2, sl
 800d3aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	f7f3 fb9b 	bl	8000aec <__aeabi_dcmplt>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	f040 8289 	bne.w	800d8ce <_dtoa_r+0x976>
 800d3bc:	ec5b ab19 	vmov	sl, fp, d9
 800d3c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f2c0 8148 	blt.w	800d658 <_dtoa_r+0x700>
 800d3c8:	9a00      	ldr	r2, [sp, #0]
 800d3ca:	2a0e      	cmp	r2, #14
 800d3cc:	f300 8144 	bgt.w	800d658 <_dtoa_r+0x700>
 800d3d0:	4b67      	ldr	r3, [pc, #412]	; (800d570 <_dtoa_r+0x618>)
 800d3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f280 80d5 	bge.w	800d58c <_dtoa_r+0x634>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f300 80d1 	bgt.w	800d58c <_dtoa_r+0x634>
 800d3ea:	f040 826f 	bne.w	800d8cc <_dtoa_r+0x974>
 800d3ee:	4b65      	ldr	r3, [pc, #404]	; (800d584 <_dtoa_r+0x62c>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	4640      	mov	r0, r8
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	f7f3 f907 	bl	8000608 <__aeabi_dmul>
 800d3fa:	4652      	mov	r2, sl
 800d3fc:	465b      	mov	r3, fp
 800d3fe:	f7f3 fb89 	bl	8000b14 <__aeabi_dcmpge>
 800d402:	9e03      	ldr	r6, [sp, #12]
 800d404:	4637      	mov	r7, r6
 800d406:	2800      	cmp	r0, #0
 800d408:	f040 8245 	bne.w	800d896 <_dtoa_r+0x93e>
 800d40c:	9d01      	ldr	r5, [sp, #4]
 800d40e:	2331      	movs	r3, #49	; 0x31
 800d410:	f805 3b01 	strb.w	r3, [r5], #1
 800d414:	9b00      	ldr	r3, [sp, #0]
 800d416:	3301      	adds	r3, #1
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	e240      	b.n	800d89e <_dtoa_r+0x946>
 800d41c:	07f2      	lsls	r2, r6, #31
 800d41e:	d505      	bpl.n	800d42c <_dtoa_r+0x4d4>
 800d420:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d424:	f7f3 f8f0 	bl	8000608 <__aeabi_dmul>
 800d428:	3501      	adds	r5, #1
 800d42a:	2301      	movs	r3, #1
 800d42c:	1076      	asrs	r6, r6, #1
 800d42e:	3708      	adds	r7, #8
 800d430:	e777      	b.n	800d322 <_dtoa_r+0x3ca>
 800d432:	2502      	movs	r5, #2
 800d434:	e779      	b.n	800d32a <_dtoa_r+0x3d2>
 800d436:	9f00      	ldr	r7, [sp, #0]
 800d438:	9e03      	ldr	r6, [sp, #12]
 800d43a:	e794      	b.n	800d366 <_dtoa_r+0x40e>
 800d43c:	9901      	ldr	r1, [sp, #4]
 800d43e:	4b4c      	ldr	r3, [pc, #304]	; (800d570 <_dtoa_r+0x618>)
 800d440:	4431      	add	r1, r6
 800d442:	910d      	str	r1, [sp, #52]	; 0x34
 800d444:	9908      	ldr	r1, [sp, #32]
 800d446:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d44a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d44e:	2900      	cmp	r1, #0
 800d450:	d043      	beq.n	800d4da <_dtoa_r+0x582>
 800d452:	494d      	ldr	r1, [pc, #308]	; (800d588 <_dtoa_r+0x630>)
 800d454:	2000      	movs	r0, #0
 800d456:	f7f3 fa01 	bl	800085c <__aeabi_ddiv>
 800d45a:	4652      	mov	r2, sl
 800d45c:	465b      	mov	r3, fp
 800d45e:	f7f2 ff1b 	bl	8000298 <__aeabi_dsub>
 800d462:	9d01      	ldr	r5, [sp, #4]
 800d464:	4682      	mov	sl, r0
 800d466:	468b      	mov	fp, r1
 800d468:	4649      	mov	r1, r9
 800d46a:	4640      	mov	r0, r8
 800d46c:	f7f3 fb7c 	bl	8000b68 <__aeabi_d2iz>
 800d470:	4606      	mov	r6, r0
 800d472:	f7f3 f85f 	bl	8000534 <__aeabi_i2d>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	4640      	mov	r0, r8
 800d47c:	4649      	mov	r1, r9
 800d47e:	f7f2 ff0b 	bl	8000298 <__aeabi_dsub>
 800d482:	3630      	adds	r6, #48	; 0x30
 800d484:	f805 6b01 	strb.w	r6, [r5], #1
 800d488:	4652      	mov	r2, sl
 800d48a:	465b      	mov	r3, fp
 800d48c:	4680      	mov	r8, r0
 800d48e:	4689      	mov	r9, r1
 800d490:	f7f3 fb2c 	bl	8000aec <__aeabi_dcmplt>
 800d494:	2800      	cmp	r0, #0
 800d496:	d163      	bne.n	800d560 <_dtoa_r+0x608>
 800d498:	4642      	mov	r2, r8
 800d49a:	464b      	mov	r3, r9
 800d49c:	4936      	ldr	r1, [pc, #216]	; (800d578 <_dtoa_r+0x620>)
 800d49e:	2000      	movs	r0, #0
 800d4a0:	f7f2 fefa 	bl	8000298 <__aeabi_dsub>
 800d4a4:	4652      	mov	r2, sl
 800d4a6:	465b      	mov	r3, fp
 800d4a8:	f7f3 fb20 	bl	8000aec <__aeabi_dcmplt>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	f040 80b5 	bne.w	800d61c <_dtoa_r+0x6c4>
 800d4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4b4:	429d      	cmp	r5, r3
 800d4b6:	d081      	beq.n	800d3bc <_dtoa_r+0x464>
 800d4b8:	4b30      	ldr	r3, [pc, #192]	; (800d57c <_dtoa_r+0x624>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	4650      	mov	r0, sl
 800d4be:	4659      	mov	r1, fp
 800d4c0:	f7f3 f8a2 	bl	8000608 <__aeabi_dmul>
 800d4c4:	4b2d      	ldr	r3, [pc, #180]	; (800d57c <_dtoa_r+0x624>)
 800d4c6:	4682      	mov	sl, r0
 800d4c8:	468b      	mov	fp, r1
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f7f3 f89a 	bl	8000608 <__aeabi_dmul>
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	4689      	mov	r9, r1
 800d4d8:	e7c6      	b.n	800d468 <_dtoa_r+0x510>
 800d4da:	4650      	mov	r0, sl
 800d4dc:	4659      	mov	r1, fp
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4e4:	9d01      	ldr	r5, [sp, #4]
 800d4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4e8:	4682      	mov	sl, r0
 800d4ea:	468b      	mov	fp, r1
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	f7f3 fb3a 	bl	8000b68 <__aeabi_d2iz>
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	f7f3 f81d 	bl	8000534 <__aeabi_i2d>
 800d4fa:	3630      	adds	r6, #48	; 0x30
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	4640      	mov	r0, r8
 800d502:	4649      	mov	r1, r9
 800d504:	f7f2 fec8 	bl	8000298 <__aeabi_dsub>
 800d508:	f805 6b01 	strb.w	r6, [r5], #1
 800d50c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d50e:	429d      	cmp	r5, r3
 800d510:	4680      	mov	r8, r0
 800d512:	4689      	mov	r9, r1
 800d514:	f04f 0200 	mov.w	r2, #0
 800d518:	d124      	bne.n	800d564 <_dtoa_r+0x60c>
 800d51a:	4b1b      	ldr	r3, [pc, #108]	; (800d588 <_dtoa_r+0x630>)
 800d51c:	4650      	mov	r0, sl
 800d51e:	4659      	mov	r1, fp
 800d520:	f7f2 febc 	bl	800029c <__adddf3>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	4640      	mov	r0, r8
 800d52a:	4649      	mov	r1, r9
 800d52c:	f7f3 fafc 	bl	8000b28 <__aeabi_dcmpgt>
 800d530:	2800      	cmp	r0, #0
 800d532:	d173      	bne.n	800d61c <_dtoa_r+0x6c4>
 800d534:	4652      	mov	r2, sl
 800d536:	465b      	mov	r3, fp
 800d538:	4913      	ldr	r1, [pc, #76]	; (800d588 <_dtoa_r+0x630>)
 800d53a:	2000      	movs	r0, #0
 800d53c:	f7f2 feac 	bl	8000298 <__aeabi_dsub>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4640      	mov	r0, r8
 800d546:	4649      	mov	r1, r9
 800d548:	f7f3 fad0 	bl	8000aec <__aeabi_dcmplt>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f43f af35 	beq.w	800d3bc <_dtoa_r+0x464>
 800d552:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d554:	1e6b      	subs	r3, r5, #1
 800d556:	930f      	str	r3, [sp, #60]	; 0x3c
 800d558:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d55c:	2b30      	cmp	r3, #48	; 0x30
 800d55e:	d0f8      	beq.n	800d552 <_dtoa_r+0x5fa>
 800d560:	9700      	str	r7, [sp, #0]
 800d562:	e049      	b.n	800d5f8 <_dtoa_r+0x6a0>
 800d564:	4b05      	ldr	r3, [pc, #20]	; (800d57c <_dtoa_r+0x624>)
 800d566:	f7f3 f84f 	bl	8000608 <__aeabi_dmul>
 800d56a:	4680      	mov	r8, r0
 800d56c:	4689      	mov	r9, r1
 800d56e:	e7bd      	b.n	800d4ec <_dtoa_r+0x594>
 800d570:	0800f160 	.word	0x0800f160
 800d574:	0800f138 	.word	0x0800f138
 800d578:	3ff00000 	.word	0x3ff00000
 800d57c:	40240000 	.word	0x40240000
 800d580:	401c0000 	.word	0x401c0000
 800d584:	40140000 	.word	0x40140000
 800d588:	3fe00000 	.word	0x3fe00000
 800d58c:	9d01      	ldr	r5, [sp, #4]
 800d58e:	4656      	mov	r6, sl
 800d590:	465f      	mov	r7, fp
 800d592:	4642      	mov	r2, r8
 800d594:	464b      	mov	r3, r9
 800d596:	4630      	mov	r0, r6
 800d598:	4639      	mov	r1, r7
 800d59a:	f7f3 f95f 	bl	800085c <__aeabi_ddiv>
 800d59e:	f7f3 fae3 	bl	8000b68 <__aeabi_d2iz>
 800d5a2:	4682      	mov	sl, r0
 800d5a4:	f7f2 ffc6 	bl	8000534 <__aeabi_i2d>
 800d5a8:	4642      	mov	r2, r8
 800d5aa:	464b      	mov	r3, r9
 800d5ac:	f7f3 f82c 	bl	8000608 <__aeabi_dmul>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d5bc:	f7f2 fe6c 	bl	8000298 <__aeabi_dsub>
 800d5c0:	f805 6b01 	strb.w	r6, [r5], #1
 800d5c4:	9e01      	ldr	r6, [sp, #4]
 800d5c6:	9f03      	ldr	r7, [sp, #12]
 800d5c8:	1bae      	subs	r6, r5, r6
 800d5ca:	42b7      	cmp	r7, r6
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	d135      	bne.n	800d63e <_dtoa_r+0x6e6>
 800d5d2:	f7f2 fe63 	bl	800029c <__adddf3>
 800d5d6:	4642      	mov	r2, r8
 800d5d8:	464b      	mov	r3, r9
 800d5da:	4606      	mov	r6, r0
 800d5dc:	460f      	mov	r7, r1
 800d5de:	f7f3 faa3 	bl	8000b28 <__aeabi_dcmpgt>
 800d5e2:	b9d0      	cbnz	r0, 800d61a <_dtoa_r+0x6c2>
 800d5e4:	4642      	mov	r2, r8
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	4639      	mov	r1, r7
 800d5ec:	f7f3 fa74 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5f0:	b110      	cbz	r0, 800d5f8 <_dtoa_r+0x6a0>
 800d5f2:	f01a 0f01 	tst.w	sl, #1
 800d5f6:	d110      	bne.n	800d61a <_dtoa_r+0x6c2>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	ee18 1a10 	vmov	r1, s16
 800d5fe:	f000 fd13 	bl	800e028 <_Bfree>
 800d602:	2300      	movs	r3, #0
 800d604:	9800      	ldr	r0, [sp, #0]
 800d606:	702b      	strb	r3, [r5, #0]
 800d608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d60a:	3001      	adds	r0, #1
 800d60c:	6018      	str	r0, [r3, #0]
 800d60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d610:	2b00      	cmp	r3, #0
 800d612:	f43f acf1 	beq.w	800cff8 <_dtoa_r+0xa0>
 800d616:	601d      	str	r5, [r3, #0]
 800d618:	e4ee      	b.n	800cff8 <_dtoa_r+0xa0>
 800d61a:	9f00      	ldr	r7, [sp, #0]
 800d61c:	462b      	mov	r3, r5
 800d61e:	461d      	mov	r5, r3
 800d620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d624:	2a39      	cmp	r2, #57	; 0x39
 800d626:	d106      	bne.n	800d636 <_dtoa_r+0x6de>
 800d628:	9a01      	ldr	r2, [sp, #4]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d1f7      	bne.n	800d61e <_dtoa_r+0x6c6>
 800d62e:	9901      	ldr	r1, [sp, #4]
 800d630:	2230      	movs	r2, #48	; 0x30
 800d632:	3701      	adds	r7, #1
 800d634:	700a      	strb	r2, [r1, #0]
 800d636:	781a      	ldrb	r2, [r3, #0]
 800d638:	3201      	adds	r2, #1
 800d63a:	701a      	strb	r2, [r3, #0]
 800d63c:	e790      	b.n	800d560 <_dtoa_r+0x608>
 800d63e:	4ba6      	ldr	r3, [pc, #664]	; (800d8d8 <_dtoa_r+0x980>)
 800d640:	2200      	movs	r2, #0
 800d642:	f7f2 ffe1 	bl	8000608 <__aeabi_dmul>
 800d646:	2200      	movs	r2, #0
 800d648:	2300      	movs	r3, #0
 800d64a:	4606      	mov	r6, r0
 800d64c:	460f      	mov	r7, r1
 800d64e:	f7f3 fa43 	bl	8000ad8 <__aeabi_dcmpeq>
 800d652:	2800      	cmp	r0, #0
 800d654:	d09d      	beq.n	800d592 <_dtoa_r+0x63a>
 800d656:	e7cf      	b.n	800d5f8 <_dtoa_r+0x6a0>
 800d658:	9a08      	ldr	r2, [sp, #32]
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	f000 80d7 	beq.w	800d80e <_dtoa_r+0x8b6>
 800d660:	9a06      	ldr	r2, [sp, #24]
 800d662:	2a01      	cmp	r2, #1
 800d664:	f300 80ba 	bgt.w	800d7dc <_dtoa_r+0x884>
 800d668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d66a:	2a00      	cmp	r2, #0
 800d66c:	f000 80b2 	beq.w	800d7d4 <_dtoa_r+0x87c>
 800d670:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d674:	9e07      	ldr	r6, [sp, #28]
 800d676:	9d04      	ldr	r5, [sp, #16]
 800d678:	9a04      	ldr	r2, [sp, #16]
 800d67a:	441a      	add	r2, r3
 800d67c:	9204      	str	r2, [sp, #16]
 800d67e:	9a05      	ldr	r2, [sp, #20]
 800d680:	2101      	movs	r1, #1
 800d682:	441a      	add	r2, r3
 800d684:	4620      	mov	r0, r4
 800d686:	9205      	str	r2, [sp, #20]
 800d688:	f000 fd86 	bl	800e198 <__i2b>
 800d68c:	4607      	mov	r7, r0
 800d68e:	2d00      	cmp	r5, #0
 800d690:	dd0c      	ble.n	800d6ac <_dtoa_r+0x754>
 800d692:	9b05      	ldr	r3, [sp, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	dd09      	ble.n	800d6ac <_dtoa_r+0x754>
 800d698:	42ab      	cmp	r3, r5
 800d69a:	9a04      	ldr	r2, [sp, #16]
 800d69c:	bfa8      	it	ge
 800d69e:	462b      	movge	r3, r5
 800d6a0:	1ad2      	subs	r2, r2, r3
 800d6a2:	9204      	str	r2, [sp, #16]
 800d6a4:	9a05      	ldr	r2, [sp, #20]
 800d6a6:	1aed      	subs	r5, r5, r3
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	9305      	str	r3, [sp, #20]
 800d6ac:	9b07      	ldr	r3, [sp, #28]
 800d6ae:	b31b      	cbz	r3, 800d6f8 <_dtoa_r+0x7a0>
 800d6b0:	9b08      	ldr	r3, [sp, #32]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f000 80af 	beq.w	800d816 <_dtoa_r+0x8be>
 800d6b8:	2e00      	cmp	r6, #0
 800d6ba:	dd13      	ble.n	800d6e4 <_dtoa_r+0x78c>
 800d6bc:	4639      	mov	r1, r7
 800d6be:	4632      	mov	r2, r6
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 fe29 	bl	800e318 <__pow5mult>
 800d6c6:	ee18 2a10 	vmov	r2, s16
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 fd78 	bl	800e1c4 <__multiply>
 800d6d4:	ee18 1a10 	vmov	r1, s16
 800d6d8:	4680      	mov	r8, r0
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 fca4 	bl	800e028 <_Bfree>
 800d6e0:	ee08 8a10 	vmov	s16, r8
 800d6e4:	9b07      	ldr	r3, [sp, #28]
 800d6e6:	1b9a      	subs	r2, r3, r6
 800d6e8:	d006      	beq.n	800d6f8 <_dtoa_r+0x7a0>
 800d6ea:	ee18 1a10 	vmov	r1, s16
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 fe12 	bl	800e318 <__pow5mult>
 800d6f4:	ee08 0a10 	vmov	s16, r0
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fd4c 	bl	800e198 <__i2b>
 800d700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d702:	2b00      	cmp	r3, #0
 800d704:	4606      	mov	r6, r0
 800d706:	f340 8088 	ble.w	800d81a <_dtoa_r+0x8c2>
 800d70a:	461a      	mov	r2, r3
 800d70c:	4601      	mov	r1, r0
 800d70e:	4620      	mov	r0, r4
 800d710:	f000 fe02 	bl	800e318 <__pow5mult>
 800d714:	9b06      	ldr	r3, [sp, #24]
 800d716:	2b01      	cmp	r3, #1
 800d718:	4606      	mov	r6, r0
 800d71a:	f340 8081 	ble.w	800d820 <_dtoa_r+0x8c8>
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	6933      	ldr	r3, [r6, #16]
 800d724:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d728:	6918      	ldr	r0, [r3, #16]
 800d72a:	f000 fce5 	bl	800e0f8 <__hi0bits>
 800d72e:	f1c0 0020 	rsb	r0, r0, #32
 800d732:	9b05      	ldr	r3, [sp, #20]
 800d734:	4418      	add	r0, r3
 800d736:	f010 001f 	ands.w	r0, r0, #31
 800d73a:	f000 8092 	beq.w	800d862 <_dtoa_r+0x90a>
 800d73e:	f1c0 0320 	rsb	r3, r0, #32
 800d742:	2b04      	cmp	r3, #4
 800d744:	f340 808a 	ble.w	800d85c <_dtoa_r+0x904>
 800d748:	f1c0 001c 	rsb	r0, r0, #28
 800d74c:	9b04      	ldr	r3, [sp, #16]
 800d74e:	4403      	add	r3, r0
 800d750:	9304      	str	r3, [sp, #16]
 800d752:	9b05      	ldr	r3, [sp, #20]
 800d754:	4403      	add	r3, r0
 800d756:	4405      	add	r5, r0
 800d758:	9305      	str	r3, [sp, #20]
 800d75a:	9b04      	ldr	r3, [sp, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dd07      	ble.n	800d770 <_dtoa_r+0x818>
 800d760:	ee18 1a10 	vmov	r1, s16
 800d764:	461a      	mov	r2, r3
 800d766:	4620      	mov	r0, r4
 800d768:	f000 fe30 	bl	800e3cc <__lshift>
 800d76c:	ee08 0a10 	vmov	s16, r0
 800d770:	9b05      	ldr	r3, [sp, #20]
 800d772:	2b00      	cmp	r3, #0
 800d774:	dd05      	ble.n	800d782 <_dtoa_r+0x82a>
 800d776:	4631      	mov	r1, r6
 800d778:	461a      	mov	r2, r3
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 fe26 	bl	800e3cc <__lshift>
 800d780:	4606      	mov	r6, r0
 800d782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d784:	2b00      	cmp	r3, #0
 800d786:	d06e      	beq.n	800d866 <_dtoa_r+0x90e>
 800d788:	ee18 0a10 	vmov	r0, s16
 800d78c:	4631      	mov	r1, r6
 800d78e:	f000 fe8d 	bl	800e4ac <__mcmp>
 800d792:	2800      	cmp	r0, #0
 800d794:	da67      	bge.n	800d866 <_dtoa_r+0x90e>
 800d796:	9b00      	ldr	r3, [sp, #0]
 800d798:	3b01      	subs	r3, #1
 800d79a:	ee18 1a10 	vmov	r1, s16
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	220a      	movs	r2, #10
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 fc61 	bl	800e06c <__multadd>
 800d7aa:	9b08      	ldr	r3, [sp, #32]
 800d7ac:	ee08 0a10 	vmov	s16, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 81b1 	beq.w	800db18 <_dtoa_r+0xbc0>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	220a      	movs	r2, #10
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f000 fc55 	bl	800e06c <__multadd>
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	f300 808e 	bgt.w	800d8e8 <_dtoa_r+0x990>
 800d7cc:	9b06      	ldr	r3, [sp, #24]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	dc51      	bgt.n	800d876 <_dtoa_r+0x91e>
 800d7d2:	e089      	b.n	800d8e8 <_dtoa_r+0x990>
 800d7d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d7da:	e74b      	b.n	800d674 <_dtoa_r+0x71c>
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	1e5e      	subs	r6, r3, #1
 800d7e0:	9b07      	ldr	r3, [sp, #28]
 800d7e2:	42b3      	cmp	r3, r6
 800d7e4:	bfbf      	itttt	lt
 800d7e6:	9b07      	ldrlt	r3, [sp, #28]
 800d7e8:	9607      	strlt	r6, [sp, #28]
 800d7ea:	1af2      	sublt	r2, r6, r3
 800d7ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d7ee:	bfb6      	itet	lt
 800d7f0:	189b      	addlt	r3, r3, r2
 800d7f2:	1b9e      	subge	r6, r3, r6
 800d7f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d7f6:	9b03      	ldr	r3, [sp, #12]
 800d7f8:	bfb8      	it	lt
 800d7fa:	2600      	movlt	r6, #0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bfb7      	itett	lt
 800d800:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d804:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d808:	1a9d      	sublt	r5, r3, r2
 800d80a:	2300      	movlt	r3, #0
 800d80c:	e734      	b.n	800d678 <_dtoa_r+0x720>
 800d80e:	9e07      	ldr	r6, [sp, #28]
 800d810:	9d04      	ldr	r5, [sp, #16]
 800d812:	9f08      	ldr	r7, [sp, #32]
 800d814:	e73b      	b.n	800d68e <_dtoa_r+0x736>
 800d816:	9a07      	ldr	r2, [sp, #28]
 800d818:	e767      	b.n	800d6ea <_dtoa_r+0x792>
 800d81a:	9b06      	ldr	r3, [sp, #24]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	dc18      	bgt.n	800d852 <_dtoa_r+0x8fa>
 800d820:	f1ba 0f00 	cmp.w	sl, #0
 800d824:	d115      	bne.n	800d852 <_dtoa_r+0x8fa>
 800d826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d82a:	b993      	cbnz	r3, 800d852 <_dtoa_r+0x8fa>
 800d82c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d830:	0d1b      	lsrs	r3, r3, #20
 800d832:	051b      	lsls	r3, r3, #20
 800d834:	b183      	cbz	r3, 800d858 <_dtoa_r+0x900>
 800d836:	9b04      	ldr	r3, [sp, #16]
 800d838:	3301      	adds	r3, #1
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	9b05      	ldr	r3, [sp, #20]
 800d83e:	3301      	adds	r3, #1
 800d840:	9305      	str	r3, [sp, #20]
 800d842:	f04f 0801 	mov.w	r8, #1
 800d846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f47f af6a 	bne.w	800d722 <_dtoa_r+0x7ca>
 800d84e:	2001      	movs	r0, #1
 800d850:	e76f      	b.n	800d732 <_dtoa_r+0x7da>
 800d852:	f04f 0800 	mov.w	r8, #0
 800d856:	e7f6      	b.n	800d846 <_dtoa_r+0x8ee>
 800d858:	4698      	mov	r8, r3
 800d85a:	e7f4      	b.n	800d846 <_dtoa_r+0x8ee>
 800d85c:	f43f af7d 	beq.w	800d75a <_dtoa_r+0x802>
 800d860:	4618      	mov	r0, r3
 800d862:	301c      	adds	r0, #28
 800d864:	e772      	b.n	800d74c <_dtoa_r+0x7f4>
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dc37      	bgt.n	800d8dc <_dtoa_r+0x984>
 800d86c:	9b06      	ldr	r3, [sp, #24]
 800d86e:	2b02      	cmp	r3, #2
 800d870:	dd34      	ble.n	800d8dc <_dtoa_r+0x984>
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	9302      	str	r3, [sp, #8]
 800d876:	9b02      	ldr	r3, [sp, #8]
 800d878:	b96b      	cbnz	r3, 800d896 <_dtoa_r+0x93e>
 800d87a:	4631      	mov	r1, r6
 800d87c:	2205      	movs	r2, #5
 800d87e:	4620      	mov	r0, r4
 800d880:	f000 fbf4 	bl	800e06c <__multadd>
 800d884:	4601      	mov	r1, r0
 800d886:	4606      	mov	r6, r0
 800d888:	ee18 0a10 	vmov	r0, s16
 800d88c:	f000 fe0e 	bl	800e4ac <__mcmp>
 800d890:	2800      	cmp	r0, #0
 800d892:	f73f adbb 	bgt.w	800d40c <_dtoa_r+0x4b4>
 800d896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d898:	9d01      	ldr	r5, [sp, #4]
 800d89a:	43db      	mvns	r3, r3
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	f04f 0800 	mov.w	r8, #0
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f000 fbbf 	bl	800e028 <_Bfree>
 800d8aa:	2f00      	cmp	r7, #0
 800d8ac:	f43f aea4 	beq.w	800d5f8 <_dtoa_r+0x6a0>
 800d8b0:	f1b8 0f00 	cmp.w	r8, #0
 800d8b4:	d005      	beq.n	800d8c2 <_dtoa_r+0x96a>
 800d8b6:	45b8      	cmp	r8, r7
 800d8b8:	d003      	beq.n	800d8c2 <_dtoa_r+0x96a>
 800d8ba:	4641      	mov	r1, r8
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f000 fbb3 	bl	800e028 <_Bfree>
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f000 fbaf 	bl	800e028 <_Bfree>
 800d8ca:	e695      	b.n	800d5f8 <_dtoa_r+0x6a0>
 800d8cc:	2600      	movs	r6, #0
 800d8ce:	4637      	mov	r7, r6
 800d8d0:	e7e1      	b.n	800d896 <_dtoa_r+0x93e>
 800d8d2:	9700      	str	r7, [sp, #0]
 800d8d4:	4637      	mov	r7, r6
 800d8d6:	e599      	b.n	800d40c <_dtoa_r+0x4b4>
 800d8d8:	40240000 	.word	0x40240000
 800d8dc:	9b08      	ldr	r3, [sp, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f000 80ca 	beq.w	800da78 <_dtoa_r+0xb20>
 800d8e4:	9b03      	ldr	r3, [sp, #12]
 800d8e6:	9302      	str	r3, [sp, #8]
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	dd05      	ble.n	800d8f8 <_dtoa_r+0x9a0>
 800d8ec:	4639      	mov	r1, r7
 800d8ee:	462a      	mov	r2, r5
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f000 fd6b 	bl	800e3cc <__lshift>
 800d8f6:	4607      	mov	r7, r0
 800d8f8:	f1b8 0f00 	cmp.w	r8, #0
 800d8fc:	d05b      	beq.n	800d9b6 <_dtoa_r+0xa5e>
 800d8fe:	6879      	ldr	r1, [r7, #4]
 800d900:	4620      	mov	r0, r4
 800d902:	f000 fb51 	bl	800dfa8 <_Balloc>
 800d906:	4605      	mov	r5, r0
 800d908:	b928      	cbnz	r0, 800d916 <_dtoa_r+0x9be>
 800d90a:	4b87      	ldr	r3, [pc, #540]	; (800db28 <_dtoa_r+0xbd0>)
 800d90c:	4602      	mov	r2, r0
 800d90e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d912:	f7ff bb3b 	b.w	800cf8c <_dtoa_r+0x34>
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	3202      	adds	r2, #2
 800d91a:	0092      	lsls	r2, r2, #2
 800d91c:	f107 010c 	add.w	r1, r7, #12
 800d920:	300c      	adds	r0, #12
 800d922:	f000 fb33 	bl	800df8c <memcpy>
 800d926:	2201      	movs	r2, #1
 800d928:	4629      	mov	r1, r5
 800d92a:	4620      	mov	r0, r4
 800d92c:	f000 fd4e 	bl	800e3cc <__lshift>
 800d930:	9b01      	ldr	r3, [sp, #4]
 800d932:	f103 0901 	add.w	r9, r3, #1
 800d936:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d93a:	4413      	add	r3, r2
 800d93c:	9305      	str	r3, [sp, #20]
 800d93e:	f00a 0301 	and.w	r3, sl, #1
 800d942:	46b8      	mov	r8, r7
 800d944:	9304      	str	r3, [sp, #16]
 800d946:	4607      	mov	r7, r0
 800d948:	4631      	mov	r1, r6
 800d94a:	ee18 0a10 	vmov	r0, s16
 800d94e:	f7ff fa75 	bl	800ce3c <quorem>
 800d952:	4641      	mov	r1, r8
 800d954:	9002      	str	r0, [sp, #8]
 800d956:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d95a:	ee18 0a10 	vmov	r0, s16
 800d95e:	f000 fda5 	bl	800e4ac <__mcmp>
 800d962:	463a      	mov	r2, r7
 800d964:	9003      	str	r0, [sp, #12]
 800d966:	4631      	mov	r1, r6
 800d968:	4620      	mov	r0, r4
 800d96a:	f000 fdbb 	bl	800e4e4 <__mdiff>
 800d96e:	68c2      	ldr	r2, [r0, #12]
 800d970:	f109 3bff 	add.w	fp, r9, #4294967295
 800d974:	4605      	mov	r5, r0
 800d976:	bb02      	cbnz	r2, 800d9ba <_dtoa_r+0xa62>
 800d978:	4601      	mov	r1, r0
 800d97a:	ee18 0a10 	vmov	r0, s16
 800d97e:	f000 fd95 	bl	800e4ac <__mcmp>
 800d982:	4602      	mov	r2, r0
 800d984:	4629      	mov	r1, r5
 800d986:	4620      	mov	r0, r4
 800d988:	9207      	str	r2, [sp, #28]
 800d98a:	f000 fb4d 	bl	800e028 <_Bfree>
 800d98e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d992:	ea43 0102 	orr.w	r1, r3, r2
 800d996:	9b04      	ldr	r3, [sp, #16]
 800d998:	430b      	orrs	r3, r1
 800d99a:	464d      	mov	r5, r9
 800d99c:	d10f      	bne.n	800d9be <_dtoa_r+0xa66>
 800d99e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9a2:	d02a      	beq.n	800d9fa <_dtoa_r+0xaa2>
 800d9a4:	9b03      	ldr	r3, [sp, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	dd02      	ble.n	800d9b0 <_dtoa_r+0xa58>
 800d9aa:	9b02      	ldr	r3, [sp, #8]
 800d9ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d9b0:	f88b a000 	strb.w	sl, [fp]
 800d9b4:	e775      	b.n	800d8a2 <_dtoa_r+0x94a>
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	e7ba      	b.n	800d930 <_dtoa_r+0x9d8>
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	e7e2      	b.n	800d984 <_dtoa_r+0xa2c>
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	db04      	blt.n	800d9ce <_dtoa_r+0xa76>
 800d9c4:	9906      	ldr	r1, [sp, #24]
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	9904      	ldr	r1, [sp, #16]
 800d9ca:	430b      	orrs	r3, r1
 800d9cc:	d122      	bne.n	800da14 <_dtoa_r+0xabc>
 800d9ce:	2a00      	cmp	r2, #0
 800d9d0:	ddee      	ble.n	800d9b0 <_dtoa_r+0xa58>
 800d9d2:	ee18 1a10 	vmov	r1, s16
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f000 fcf7 	bl	800e3cc <__lshift>
 800d9de:	4631      	mov	r1, r6
 800d9e0:	ee08 0a10 	vmov	s16, r0
 800d9e4:	f000 fd62 	bl	800e4ac <__mcmp>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	dc03      	bgt.n	800d9f4 <_dtoa_r+0xa9c>
 800d9ec:	d1e0      	bne.n	800d9b0 <_dtoa_r+0xa58>
 800d9ee:	f01a 0f01 	tst.w	sl, #1
 800d9f2:	d0dd      	beq.n	800d9b0 <_dtoa_r+0xa58>
 800d9f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9f8:	d1d7      	bne.n	800d9aa <_dtoa_r+0xa52>
 800d9fa:	2339      	movs	r3, #57	; 0x39
 800d9fc:	f88b 3000 	strb.w	r3, [fp]
 800da00:	462b      	mov	r3, r5
 800da02:	461d      	mov	r5, r3
 800da04:	3b01      	subs	r3, #1
 800da06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da0a:	2a39      	cmp	r2, #57	; 0x39
 800da0c:	d071      	beq.n	800daf2 <_dtoa_r+0xb9a>
 800da0e:	3201      	adds	r2, #1
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	e746      	b.n	800d8a2 <_dtoa_r+0x94a>
 800da14:	2a00      	cmp	r2, #0
 800da16:	dd07      	ble.n	800da28 <_dtoa_r+0xad0>
 800da18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da1c:	d0ed      	beq.n	800d9fa <_dtoa_r+0xaa2>
 800da1e:	f10a 0301 	add.w	r3, sl, #1
 800da22:	f88b 3000 	strb.w	r3, [fp]
 800da26:	e73c      	b.n	800d8a2 <_dtoa_r+0x94a>
 800da28:	9b05      	ldr	r3, [sp, #20]
 800da2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800da2e:	4599      	cmp	r9, r3
 800da30:	d047      	beq.n	800dac2 <_dtoa_r+0xb6a>
 800da32:	ee18 1a10 	vmov	r1, s16
 800da36:	2300      	movs	r3, #0
 800da38:	220a      	movs	r2, #10
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 fb16 	bl	800e06c <__multadd>
 800da40:	45b8      	cmp	r8, r7
 800da42:	ee08 0a10 	vmov	s16, r0
 800da46:	f04f 0300 	mov.w	r3, #0
 800da4a:	f04f 020a 	mov.w	r2, #10
 800da4e:	4641      	mov	r1, r8
 800da50:	4620      	mov	r0, r4
 800da52:	d106      	bne.n	800da62 <_dtoa_r+0xb0a>
 800da54:	f000 fb0a 	bl	800e06c <__multadd>
 800da58:	4680      	mov	r8, r0
 800da5a:	4607      	mov	r7, r0
 800da5c:	f109 0901 	add.w	r9, r9, #1
 800da60:	e772      	b.n	800d948 <_dtoa_r+0x9f0>
 800da62:	f000 fb03 	bl	800e06c <__multadd>
 800da66:	4639      	mov	r1, r7
 800da68:	4680      	mov	r8, r0
 800da6a:	2300      	movs	r3, #0
 800da6c:	220a      	movs	r2, #10
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 fafc 	bl	800e06c <__multadd>
 800da74:	4607      	mov	r7, r0
 800da76:	e7f1      	b.n	800da5c <_dtoa_r+0xb04>
 800da78:	9b03      	ldr	r3, [sp, #12]
 800da7a:	9302      	str	r3, [sp, #8]
 800da7c:	9d01      	ldr	r5, [sp, #4]
 800da7e:	ee18 0a10 	vmov	r0, s16
 800da82:	4631      	mov	r1, r6
 800da84:	f7ff f9da 	bl	800ce3c <quorem>
 800da88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da8c:	9b01      	ldr	r3, [sp, #4]
 800da8e:	f805 ab01 	strb.w	sl, [r5], #1
 800da92:	1aea      	subs	r2, r5, r3
 800da94:	9b02      	ldr	r3, [sp, #8]
 800da96:	4293      	cmp	r3, r2
 800da98:	dd09      	ble.n	800daae <_dtoa_r+0xb56>
 800da9a:	ee18 1a10 	vmov	r1, s16
 800da9e:	2300      	movs	r3, #0
 800daa0:	220a      	movs	r2, #10
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 fae2 	bl	800e06c <__multadd>
 800daa8:	ee08 0a10 	vmov	s16, r0
 800daac:	e7e7      	b.n	800da7e <_dtoa_r+0xb26>
 800daae:	9b02      	ldr	r3, [sp, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bfc8      	it	gt
 800dab4:	461d      	movgt	r5, r3
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	bfd8      	it	le
 800daba:	2501      	movle	r5, #1
 800dabc:	441d      	add	r5, r3
 800dabe:	f04f 0800 	mov.w	r8, #0
 800dac2:	ee18 1a10 	vmov	r1, s16
 800dac6:	2201      	movs	r2, #1
 800dac8:	4620      	mov	r0, r4
 800daca:	f000 fc7f 	bl	800e3cc <__lshift>
 800dace:	4631      	mov	r1, r6
 800dad0:	ee08 0a10 	vmov	s16, r0
 800dad4:	f000 fcea 	bl	800e4ac <__mcmp>
 800dad8:	2800      	cmp	r0, #0
 800dada:	dc91      	bgt.n	800da00 <_dtoa_r+0xaa8>
 800dadc:	d102      	bne.n	800dae4 <_dtoa_r+0xb8c>
 800dade:	f01a 0f01 	tst.w	sl, #1
 800dae2:	d18d      	bne.n	800da00 <_dtoa_r+0xaa8>
 800dae4:	462b      	mov	r3, r5
 800dae6:	461d      	mov	r5, r3
 800dae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daec:	2a30      	cmp	r2, #48	; 0x30
 800daee:	d0fa      	beq.n	800dae6 <_dtoa_r+0xb8e>
 800daf0:	e6d7      	b.n	800d8a2 <_dtoa_r+0x94a>
 800daf2:	9a01      	ldr	r2, [sp, #4]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d184      	bne.n	800da02 <_dtoa_r+0xaaa>
 800daf8:	9b00      	ldr	r3, [sp, #0]
 800dafa:	3301      	adds	r3, #1
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	2331      	movs	r3, #49	; 0x31
 800db00:	7013      	strb	r3, [r2, #0]
 800db02:	e6ce      	b.n	800d8a2 <_dtoa_r+0x94a>
 800db04:	4b09      	ldr	r3, [pc, #36]	; (800db2c <_dtoa_r+0xbd4>)
 800db06:	f7ff ba95 	b.w	800d034 <_dtoa_r+0xdc>
 800db0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f47f aa6e 	bne.w	800cfee <_dtoa_r+0x96>
 800db12:	4b07      	ldr	r3, [pc, #28]	; (800db30 <_dtoa_r+0xbd8>)
 800db14:	f7ff ba8e 	b.w	800d034 <_dtoa_r+0xdc>
 800db18:	9b02      	ldr	r3, [sp, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	dcae      	bgt.n	800da7c <_dtoa_r+0xb24>
 800db1e:	9b06      	ldr	r3, [sp, #24]
 800db20:	2b02      	cmp	r3, #2
 800db22:	f73f aea8 	bgt.w	800d876 <_dtoa_r+0x91e>
 800db26:	e7a9      	b.n	800da7c <_dtoa_r+0xb24>
 800db28:	0800f06b 	.word	0x0800f06b
 800db2c:	0800efc8 	.word	0x0800efc8
 800db30:	0800efec 	.word	0x0800efec

0800db34 <__sflush_r>:
 800db34:	898a      	ldrh	r2, [r1, #12]
 800db36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3a:	4605      	mov	r5, r0
 800db3c:	0710      	lsls	r0, r2, #28
 800db3e:	460c      	mov	r4, r1
 800db40:	d458      	bmi.n	800dbf4 <__sflush_r+0xc0>
 800db42:	684b      	ldr	r3, [r1, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	dc05      	bgt.n	800db54 <__sflush_r+0x20>
 800db48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dc02      	bgt.n	800db54 <__sflush_r+0x20>
 800db4e:	2000      	movs	r0, #0
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db56:	2e00      	cmp	r6, #0
 800db58:	d0f9      	beq.n	800db4e <__sflush_r+0x1a>
 800db5a:	2300      	movs	r3, #0
 800db5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db60:	682f      	ldr	r7, [r5, #0]
 800db62:	602b      	str	r3, [r5, #0]
 800db64:	d032      	beq.n	800dbcc <__sflush_r+0x98>
 800db66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db68:	89a3      	ldrh	r3, [r4, #12]
 800db6a:	075a      	lsls	r2, r3, #29
 800db6c:	d505      	bpl.n	800db7a <__sflush_r+0x46>
 800db6e:	6863      	ldr	r3, [r4, #4]
 800db70:	1ac0      	subs	r0, r0, r3
 800db72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db74:	b10b      	cbz	r3, 800db7a <__sflush_r+0x46>
 800db76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db78:	1ac0      	subs	r0, r0, r3
 800db7a:	2300      	movs	r3, #0
 800db7c:	4602      	mov	r2, r0
 800db7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db80:	6a21      	ldr	r1, [r4, #32]
 800db82:	4628      	mov	r0, r5
 800db84:	47b0      	blx	r6
 800db86:	1c43      	adds	r3, r0, #1
 800db88:	89a3      	ldrh	r3, [r4, #12]
 800db8a:	d106      	bne.n	800db9a <__sflush_r+0x66>
 800db8c:	6829      	ldr	r1, [r5, #0]
 800db8e:	291d      	cmp	r1, #29
 800db90:	d82c      	bhi.n	800dbec <__sflush_r+0xb8>
 800db92:	4a2a      	ldr	r2, [pc, #168]	; (800dc3c <__sflush_r+0x108>)
 800db94:	40ca      	lsrs	r2, r1
 800db96:	07d6      	lsls	r6, r2, #31
 800db98:	d528      	bpl.n	800dbec <__sflush_r+0xb8>
 800db9a:	2200      	movs	r2, #0
 800db9c:	6062      	str	r2, [r4, #4]
 800db9e:	04d9      	lsls	r1, r3, #19
 800dba0:	6922      	ldr	r2, [r4, #16]
 800dba2:	6022      	str	r2, [r4, #0]
 800dba4:	d504      	bpl.n	800dbb0 <__sflush_r+0x7c>
 800dba6:	1c42      	adds	r2, r0, #1
 800dba8:	d101      	bne.n	800dbae <__sflush_r+0x7a>
 800dbaa:	682b      	ldr	r3, [r5, #0]
 800dbac:	b903      	cbnz	r3, 800dbb0 <__sflush_r+0x7c>
 800dbae:	6560      	str	r0, [r4, #84]	; 0x54
 800dbb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbb2:	602f      	str	r7, [r5, #0]
 800dbb4:	2900      	cmp	r1, #0
 800dbb6:	d0ca      	beq.n	800db4e <__sflush_r+0x1a>
 800dbb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbbc:	4299      	cmp	r1, r3
 800dbbe:	d002      	beq.n	800dbc6 <__sflush_r+0x92>
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 fd8b 	bl	800e6dc <_free_r>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	6360      	str	r0, [r4, #52]	; 0x34
 800dbca:	e7c1      	b.n	800db50 <__sflush_r+0x1c>
 800dbcc:	6a21      	ldr	r1, [r4, #32]
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b0      	blx	r6
 800dbd4:	1c41      	adds	r1, r0, #1
 800dbd6:	d1c7      	bne.n	800db68 <__sflush_r+0x34>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0c4      	beq.n	800db68 <__sflush_r+0x34>
 800dbde:	2b1d      	cmp	r3, #29
 800dbe0:	d001      	beq.n	800dbe6 <__sflush_r+0xb2>
 800dbe2:	2b16      	cmp	r3, #22
 800dbe4:	d101      	bne.n	800dbea <__sflush_r+0xb6>
 800dbe6:	602f      	str	r7, [r5, #0]
 800dbe8:	e7b1      	b.n	800db4e <__sflush_r+0x1a>
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf0:	81a3      	strh	r3, [r4, #12]
 800dbf2:	e7ad      	b.n	800db50 <__sflush_r+0x1c>
 800dbf4:	690f      	ldr	r7, [r1, #16]
 800dbf6:	2f00      	cmp	r7, #0
 800dbf8:	d0a9      	beq.n	800db4e <__sflush_r+0x1a>
 800dbfa:	0793      	lsls	r3, r2, #30
 800dbfc:	680e      	ldr	r6, [r1, #0]
 800dbfe:	bf08      	it	eq
 800dc00:	694b      	ldreq	r3, [r1, #20]
 800dc02:	600f      	str	r7, [r1, #0]
 800dc04:	bf18      	it	ne
 800dc06:	2300      	movne	r3, #0
 800dc08:	eba6 0807 	sub.w	r8, r6, r7
 800dc0c:	608b      	str	r3, [r1, #8]
 800dc0e:	f1b8 0f00 	cmp.w	r8, #0
 800dc12:	dd9c      	ble.n	800db4e <__sflush_r+0x1a>
 800dc14:	6a21      	ldr	r1, [r4, #32]
 800dc16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc18:	4643      	mov	r3, r8
 800dc1a:	463a      	mov	r2, r7
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	47b0      	blx	r6
 800dc20:	2800      	cmp	r0, #0
 800dc22:	dc06      	bgt.n	800dc32 <__sflush_r+0xfe>
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc2a:	81a3      	strh	r3, [r4, #12]
 800dc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc30:	e78e      	b.n	800db50 <__sflush_r+0x1c>
 800dc32:	4407      	add	r7, r0
 800dc34:	eba8 0800 	sub.w	r8, r8, r0
 800dc38:	e7e9      	b.n	800dc0e <__sflush_r+0xda>
 800dc3a:	bf00      	nop
 800dc3c:	20400001 	.word	0x20400001

0800dc40 <_fflush_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	690b      	ldr	r3, [r1, #16]
 800dc44:	4605      	mov	r5, r0
 800dc46:	460c      	mov	r4, r1
 800dc48:	b913      	cbnz	r3, 800dc50 <_fflush_r+0x10>
 800dc4a:	2500      	movs	r5, #0
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	b118      	cbz	r0, 800dc5a <_fflush_r+0x1a>
 800dc52:	6983      	ldr	r3, [r0, #24]
 800dc54:	b90b      	cbnz	r3, 800dc5a <_fflush_r+0x1a>
 800dc56:	f000 f887 	bl	800dd68 <__sinit>
 800dc5a:	4b14      	ldr	r3, [pc, #80]	; (800dcac <_fflush_r+0x6c>)
 800dc5c:	429c      	cmp	r4, r3
 800dc5e:	d11b      	bne.n	800dc98 <_fflush_r+0x58>
 800dc60:	686c      	ldr	r4, [r5, #4]
 800dc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0ef      	beq.n	800dc4a <_fflush_r+0xa>
 800dc6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc6c:	07d0      	lsls	r0, r2, #31
 800dc6e:	d404      	bmi.n	800dc7a <_fflush_r+0x3a>
 800dc70:	0599      	lsls	r1, r3, #22
 800dc72:	d402      	bmi.n	800dc7a <_fflush_r+0x3a>
 800dc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc76:	f000 f91a 	bl	800deae <__retarget_lock_acquire_recursive>
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	f7ff ff59 	bl	800db34 <__sflush_r>
 800dc82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc84:	07da      	lsls	r2, r3, #31
 800dc86:	4605      	mov	r5, r0
 800dc88:	d4e0      	bmi.n	800dc4c <_fflush_r+0xc>
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	059b      	lsls	r3, r3, #22
 800dc8e:	d4dd      	bmi.n	800dc4c <_fflush_r+0xc>
 800dc90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc92:	f000 f90d 	bl	800deb0 <__retarget_lock_release_recursive>
 800dc96:	e7d9      	b.n	800dc4c <_fflush_r+0xc>
 800dc98:	4b05      	ldr	r3, [pc, #20]	; (800dcb0 <_fflush_r+0x70>)
 800dc9a:	429c      	cmp	r4, r3
 800dc9c:	d101      	bne.n	800dca2 <_fflush_r+0x62>
 800dc9e:	68ac      	ldr	r4, [r5, #8]
 800dca0:	e7df      	b.n	800dc62 <_fflush_r+0x22>
 800dca2:	4b04      	ldr	r3, [pc, #16]	; (800dcb4 <_fflush_r+0x74>)
 800dca4:	429c      	cmp	r4, r3
 800dca6:	bf08      	it	eq
 800dca8:	68ec      	ldreq	r4, [r5, #12]
 800dcaa:	e7da      	b.n	800dc62 <_fflush_r+0x22>
 800dcac:	0800f09c 	.word	0x0800f09c
 800dcb0:	0800f0bc 	.word	0x0800f0bc
 800dcb4:	0800f07c 	.word	0x0800f07c

0800dcb8 <std>:
 800dcb8:	2300      	movs	r3, #0
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	e9c0 3300 	strd	r3, r3, [r0]
 800dcc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcc6:	6083      	str	r3, [r0, #8]
 800dcc8:	8181      	strh	r1, [r0, #12]
 800dcca:	6643      	str	r3, [r0, #100]	; 0x64
 800dccc:	81c2      	strh	r2, [r0, #14]
 800dcce:	6183      	str	r3, [r0, #24]
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	2208      	movs	r2, #8
 800dcd4:	305c      	adds	r0, #92	; 0x5c
 800dcd6:	f7fe faf1 	bl	800c2bc <memset>
 800dcda:	4b05      	ldr	r3, [pc, #20]	; (800dcf0 <std+0x38>)
 800dcdc:	6263      	str	r3, [r4, #36]	; 0x24
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <std+0x3c>)
 800dce0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <std+0x40>)
 800dce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dce6:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <std+0x44>)
 800dce8:	6224      	str	r4, [r4, #32]
 800dcea:	6323      	str	r3, [r4, #48]	; 0x30
 800dcec:	bd10      	pop	{r4, pc}
 800dcee:	bf00      	nop
 800dcf0:	0800eb71 	.word	0x0800eb71
 800dcf4:	0800eb93 	.word	0x0800eb93
 800dcf8:	0800ebcb 	.word	0x0800ebcb
 800dcfc:	0800ebef 	.word	0x0800ebef

0800dd00 <_cleanup_r>:
 800dd00:	4901      	ldr	r1, [pc, #4]	; (800dd08 <_cleanup_r+0x8>)
 800dd02:	f000 b8af 	b.w	800de64 <_fwalk_reent>
 800dd06:	bf00      	nop
 800dd08:	0800dc41 	.word	0x0800dc41

0800dd0c <__sfmoreglue>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	2268      	movs	r2, #104	; 0x68
 800dd10:	1e4d      	subs	r5, r1, #1
 800dd12:	4355      	muls	r5, r2
 800dd14:	460e      	mov	r6, r1
 800dd16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd1a:	f000 fd4b 	bl	800e7b4 <_malloc_r>
 800dd1e:	4604      	mov	r4, r0
 800dd20:	b140      	cbz	r0, 800dd34 <__sfmoreglue+0x28>
 800dd22:	2100      	movs	r1, #0
 800dd24:	e9c0 1600 	strd	r1, r6, [r0]
 800dd28:	300c      	adds	r0, #12
 800dd2a:	60a0      	str	r0, [r4, #8]
 800dd2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd30:	f7fe fac4 	bl	800c2bc <memset>
 800dd34:	4620      	mov	r0, r4
 800dd36:	bd70      	pop	{r4, r5, r6, pc}

0800dd38 <__sfp_lock_acquire>:
 800dd38:	4801      	ldr	r0, [pc, #4]	; (800dd40 <__sfp_lock_acquire+0x8>)
 800dd3a:	f000 b8b8 	b.w	800deae <__retarget_lock_acquire_recursive>
 800dd3e:	bf00      	nop
 800dd40:	20005015 	.word	0x20005015

0800dd44 <__sfp_lock_release>:
 800dd44:	4801      	ldr	r0, [pc, #4]	; (800dd4c <__sfp_lock_release+0x8>)
 800dd46:	f000 b8b3 	b.w	800deb0 <__retarget_lock_release_recursive>
 800dd4a:	bf00      	nop
 800dd4c:	20005015 	.word	0x20005015

0800dd50 <__sinit_lock_acquire>:
 800dd50:	4801      	ldr	r0, [pc, #4]	; (800dd58 <__sinit_lock_acquire+0x8>)
 800dd52:	f000 b8ac 	b.w	800deae <__retarget_lock_acquire_recursive>
 800dd56:	bf00      	nop
 800dd58:	20005016 	.word	0x20005016

0800dd5c <__sinit_lock_release>:
 800dd5c:	4801      	ldr	r0, [pc, #4]	; (800dd64 <__sinit_lock_release+0x8>)
 800dd5e:	f000 b8a7 	b.w	800deb0 <__retarget_lock_release_recursive>
 800dd62:	bf00      	nop
 800dd64:	20005016 	.word	0x20005016

0800dd68 <__sinit>:
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	f7ff fff0 	bl	800dd50 <__sinit_lock_acquire>
 800dd70:	69a3      	ldr	r3, [r4, #24]
 800dd72:	b11b      	cbz	r3, 800dd7c <__sinit+0x14>
 800dd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd78:	f7ff bff0 	b.w	800dd5c <__sinit_lock_release>
 800dd7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd80:	6523      	str	r3, [r4, #80]	; 0x50
 800dd82:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <__sinit+0x68>)
 800dd84:	4a13      	ldr	r2, [pc, #76]	; (800ddd4 <__sinit+0x6c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd8a:	42a3      	cmp	r3, r4
 800dd8c:	bf04      	itt	eq
 800dd8e:	2301      	moveq	r3, #1
 800dd90:	61a3      	streq	r3, [r4, #24]
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 f820 	bl	800ddd8 <__sfp>
 800dd98:	6060      	str	r0, [r4, #4]
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 f81c 	bl	800ddd8 <__sfp>
 800dda0:	60a0      	str	r0, [r4, #8]
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 f818 	bl	800ddd8 <__sfp>
 800dda8:	2200      	movs	r2, #0
 800ddaa:	60e0      	str	r0, [r4, #12]
 800ddac:	2104      	movs	r1, #4
 800ddae:	6860      	ldr	r0, [r4, #4]
 800ddb0:	f7ff ff82 	bl	800dcb8 <std>
 800ddb4:	68a0      	ldr	r0, [r4, #8]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	2109      	movs	r1, #9
 800ddba:	f7ff ff7d 	bl	800dcb8 <std>
 800ddbe:	68e0      	ldr	r0, [r4, #12]
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	2112      	movs	r1, #18
 800ddc4:	f7ff ff78 	bl	800dcb8 <std>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	61a3      	str	r3, [r4, #24]
 800ddcc:	e7d2      	b.n	800dd74 <__sinit+0xc>
 800ddce:	bf00      	nop
 800ddd0:	0800efb4 	.word	0x0800efb4
 800ddd4:	0800dd01 	.word	0x0800dd01

0800ddd8 <__sfp>:
 800ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddda:	4607      	mov	r7, r0
 800dddc:	f7ff ffac 	bl	800dd38 <__sfp_lock_acquire>
 800dde0:	4b1e      	ldr	r3, [pc, #120]	; (800de5c <__sfp+0x84>)
 800dde2:	681e      	ldr	r6, [r3, #0]
 800dde4:	69b3      	ldr	r3, [r6, #24]
 800dde6:	b913      	cbnz	r3, 800ddee <__sfp+0x16>
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7ff ffbd 	bl	800dd68 <__sinit>
 800ddee:	3648      	adds	r6, #72	; 0x48
 800ddf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	d503      	bpl.n	800de00 <__sfp+0x28>
 800ddf8:	6833      	ldr	r3, [r6, #0]
 800ddfa:	b30b      	cbz	r3, 800de40 <__sfp+0x68>
 800ddfc:	6836      	ldr	r6, [r6, #0]
 800ddfe:	e7f7      	b.n	800ddf0 <__sfp+0x18>
 800de00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de04:	b9d5      	cbnz	r5, 800de3c <__sfp+0x64>
 800de06:	4b16      	ldr	r3, [pc, #88]	; (800de60 <__sfp+0x88>)
 800de08:	60e3      	str	r3, [r4, #12]
 800de0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de0e:	6665      	str	r5, [r4, #100]	; 0x64
 800de10:	f000 f84c 	bl	800deac <__retarget_lock_init_recursive>
 800de14:	f7ff ff96 	bl	800dd44 <__sfp_lock_release>
 800de18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de20:	6025      	str	r5, [r4, #0]
 800de22:	61a5      	str	r5, [r4, #24]
 800de24:	2208      	movs	r2, #8
 800de26:	4629      	mov	r1, r5
 800de28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de2c:	f7fe fa46 	bl	800c2bc <memset>
 800de30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de38:	4620      	mov	r0, r4
 800de3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de3c:	3468      	adds	r4, #104	; 0x68
 800de3e:	e7d9      	b.n	800ddf4 <__sfp+0x1c>
 800de40:	2104      	movs	r1, #4
 800de42:	4638      	mov	r0, r7
 800de44:	f7ff ff62 	bl	800dd0c <__sfmoreglue>
 800de48:	4604      	mov	r4, r0
 800de4a:	6030      	str	r0, [r6, #0]
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d1d5      	bne.n	800ddfc <__sfp+0x24>
 800de50:	f7ff ff78 	bl	800dd44 <__sfp_lock_release>
 800de54:	230c      	movs	r3, #12
 800de56:	603b      	str	r3, [r7, #0]
 800de58:	e7ee      	b.n	800de38 <__sfp+0x60>
 800de5a:	bf00      	nop
 800de5c:	0800efb4 	.word	0x0800efb4
 800de60:	ffff0001 	.word	0xffff0001

0800de64 <_fwalk_reent>:
 800de64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de68:	4606      	mov	r6, r0
 800de6a:	4688      	mov	r8, r1
 800de6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de70:	2700      	movs	r7, #0
 800de72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de76:	f1b9 0901 	subs.w	r9, r9, #1
 800de7a:	d505      	bpl.n	800de88 <_fwalk_reent+0x24>
 800de7c:	6824      	ldr	r4, [r4, #0]
 800de7e:	2c00      	cmp	r4, #0
 800de80:	d1f7      	bne.n	800de72 <_fwalk_reent+0xe>
 800de82:	4638      	mov	r0, r7
 800de84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de88:	89ab      	ldrh	r3, [r5, #12]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d907      	bls.n	800de9e <_fwalk_reent+0x3a>
 800de8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de92:	3301      	adds	r3, #1
 800de94:	d003      	beq.n	800de9e <_fwalk_reent+0x3a>
 800de96:	4629      	mov	r1, r5
 800de98:	4630      	mov	r0, r6
 800de9a:	47c0      	blx	r8
 800de9c:	4307      	orrs	r7, r0
 800de9e:	3568      	adds	r5, #104	; 0x68
 800dea0:	e7e9      	b.n	800de76 <_fwalk_reent+0x12>
	...

0800dea4 <_localeconv_r>:
 800dea4:	4800      	ldr	r0, [pc, #0]	; (800dea8 <_localeconv_r+0x4>)
 800dea6:	4770      	bx	lr
 800dea8:	20000294 	.word	0x20000294

0800deac <__retarget_lock_init_recursive>:
 800deac:	4770      	bx	lr

0800deae <__retarget_lock_acquire_recursive>:
 800deae:	4770      	bx	lr

0800deb0 <__retarget_lock_release_recursive>:
 800deb0:	4770      	bx	lr

0800deb2 <__swhatbuf_r>:
 800deb2:	b570      	push	{r4, r5, r6, lr}
 800deb4:	460e      	mov	r6, r1
 800deb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deba:	2900      	cmp	r1, #0
 800debc:	b096      	sub	sp, #88	; 0x58
 800debe:	4614      	mov	r4, r2
 800dec0:	461d      	mov	r5, r3
 800dec2:	da08      	bge.n	800ded6 <__swhatbuf_r+0x24>
 800dec4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	602a      	str	r2, [r5, #0]
 800decc:	061a      	lsls	r2, r3, #24
 800dece:	d410      	bmi.n	800def2 <__swhatbuf_r+0x40>
 800ded0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ded4:	e00e      	b.n	800def4 <__swhatbuf_r+0x42>
 800ded6:	466a      	mov	r2, sp
 800ded8:	f000 fee0 	bl	800ec9c <_fstat_r>
 800dedc:	2800      	cmp	r0, #0
 800dede:	dbf1      	blt.n	800dec4 <__swhatbuf_r+0x12>
 800dee0:	9a01      	ldr	r2, [sp, #4]
 800dee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800deea:	425a      	negs	r2, r3
 800deec:	415a      	adcs	r2, r3
 800deee:	602a      	str	r2, [r5, #0]
 800def0:	e7ee      	b.n	800ded0 <__swhatbuf_r+0x1e>
 800def2:	2340      	movs	r3, #64	; 0x40
 800def4:	2000      	movs	r0, #0
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	b016      	add	sp, #88	; 0x58
 800defa:	bd70      	pop	{r4, r5, r6, pc}

0800defc <__smakebuf_r>:
 800defc:	898b      	ldrh	r3, [r1, #12]
 800defe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df00:	079d      	lsls	r5, r3, #30
 800df02:	4606      	mov	r6, r0
 800df04:	460c      	mov	r4, r1
 800df06:	d507      	bpl.n	800df18 <__smakebuf_r+0x1c>
 800df08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	6123      	str	r3, [r4, #16]
 800df10:	2301      	movs	r3, #1
 800df12:	6163      	str	r3, [r4, #20]
 800df14:	b002      	add	sp, #8
 800df16:	bd70      	pop	{r4, r5, r6, pc}
 800df18:	ab01      	add	r3, sp, #4
 800df1a:	466a      	mov	r2, sp
 800df1c:	f7ff ffc9 	bl	800deb2 <__swhatbuf_r>
 800df20:	9900      	ldr	r1, [sp, #0]
 800df22:	4605      	mov	r5, r0
 800df24:	4630      	mov	r0, r6
 800df26:	f000 fc45 	bl	800e7b4 <_malloc_r>
 800df2a:	b948      	cbnz	r0, 800df40 <__smakebuf_r+0x44>
 800df2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df30:	059a      	lsls	r2, r3, #22
 800df32:	d4ef      	bmi.n	800df14 <__smakebuf_r+0x18>
 800df34:	f023 0303 	bic.w	r3, r3, #3
 800df38:	f043 0302 	orr.w	r3, r3, #2
 800df3c:	81a3      	strh	r3, [r4, #12]
 800df3e:	e7e3      	b.n	800df08 <__smakebuf_r+0xc>
 800df40:	4b0d      	ldr	r3, [pc, #52]	; (800df78 <__smakebuf_r+0x7c>)
 800df42:	62b3      	str	r3, [r6, #40]	; 0x28
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	6020      	str	r0, [r4, #0]
 800df48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df4c:	81a3      	strh	r3, [r4, #12]
 800df4e:	9b00      	ldr	r3, [sp, #0]
 800df50:	6163      	str	r3, [r4, #20]
 800df52:	9b01      	ldr	r3, [sp, #4]
 800df54:	6120      	str	r0, [r4, #16]
 800df56:	b15b      	cbz	r3, 800df70 <__smakebuf_r+0x74>
 800df58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df5c:	4630      	mov	r0, r6
 800df5e:	f000 feaf 	bl	800ecc0 <_isatty_r>
 800df62:	b128      	cbz	r0, 800df70 <__smakebuf_r+0x74>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f023 0303 	bic.w	r3, r3, #3
 800df6a:	f043 0301 	orr.w	r3, r3, #1
 800df6e:	81a3      	strh	r3, [r4, #12]
 800df70:	89a0      	ldrh	r0, [r4, #12]
 800df72:	4305      	orrs	r5, r0
 800df74:	81a5      	strh	r5, [r4, #12]
 800df76:	e7cd      	b.n	800df14 <__smakebuf_r+0x18>
 800df78:	0800dd01 	.word	0x0800dd01

0800df7c <malloc>:
 800df7c:	4b02      	ldr	r3, [pc, #8]	; (800df88 <malloc+0xc>)
 800df7e:	4601      	mov	r1, r0
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	f000 bc17 	b.w	800e7b4 <_malloc_r>
 800df86:	bf00      	nop
 800df88:	20000140 	.word	0x20000140

0800df8c <memcpy>:
 800df8c:	440a      	add	r2, r1
 800df8e:	4291      	cmp	r1, r2
 800df90:	f100 33ff 	add.w	r3, r0, #4294967295
 800df94:	d100      	bne.n	800df98 <memcpy+0xc>
 800df96:	4770      	bx	lr
 800df98:	b510      	push	{r4, lr}
 800df9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfa2:	4291      	cmp	r1, r2
 800dfa4:	d1f9      	bne.n	800df9a <memcpy+0xe>
 800dfa6:	bd10      	pop	{r4, pc}

0800dfa8 <_Balloc>:
 800dfa8:	b570      	push	{r4, r5, r6, lr}
 800dfaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfac:	4604      	mov	r4, r0
 800dfae:	460d      	mov	r5, r1
 800dfb0:	b976      	cbnz	r6, 800dfd0 <_Balloc+0x28>
 800dfb2:	2010      	movs	r0, #16
 800dfb4:	f7ff ffe2 	bl	800df7c <malloc>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6260      	str	r0, [r4, #36]	; 0x24
 800dfbc:	b920      	cbnz	r0, 800dfc8 <_Balloc+0x20>
 800dfbe:	4b18      	ldr	r3, [pc, #96]	; (800e020 <_Balloc+0x78>)
 800dfc0:	4818      	ldr	r0, [pc, #96]	; (800e024 <_Balloc+0x7c>)
 800dfc2:	2166      	movs	r1, #102	; 0x66
 800dfc4:	f000 fe2a 	bl	800ec1c <__assert_func>
 800dfc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfcc:	6006      	str	r6, [r0, #0]
 800dfce:	60c6      	str	r6, [r0, #12]
 800dfd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfd2:	68f3      	ldr	r3, [r6, #12]
 800dfd4:	b183      	cbz	r3, 800dff8 <_Balloc+0x50>
 800dfd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfde:	b9b8      	cbnz	r0, 800e010 <_Balloc+0x68>
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	fa01 f605 	lsl.w	r6, r1, r5
 800dfe6:	1d72      	adds	r2, r6, #5
 800dfe8:	0092      	lsls	r2, r2, #2
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fb60 	bl	800e6b0 <_calloc_r>
 800dff0:	b160      	cbz	r0, 800e00c <_Balloc+0x64>
 800dff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dff6:	e00e      	b.n	800e016 <_Balloc+0x6e>
 800dff8:	2221      	movs	r2, #33	; 0x21
 800dffa:	2104      	movs	r1, #4
 800dffc:	4620      	mov	r0, r4
 800dffe:	f000 fb57 	bl	800e6b0 <_calloc_r>
 800e002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e004:	60f0      	str	r0, [r6, #12]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e4      	bne.n	800dfd6 <_Balloc+0x2e>
 800e00c:	2000      	movs	r0, #0
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	6802      	ldr	r2, [r0, #0]
 800e012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e016:	2300      	movs	r3, #0
 800e018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e01c:	e7f7      	b.n	800e00e <_Balloc+0x66>
 800e01e:	bf00      	nop
 800e020:	0800eff9 	.word	0x0800eff9
 800e024:	0800f0dc 	.word	0x0800f0dc

0800e028 <_Bfree>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e02c:	4605      	mov	r5, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	b976      	cbnz	r6, 800e050 <_Bfree+0x28>
 800e032:	2010      	movs	r0, #16
 800e034:	f7ff ffa2 	bl	800df7c <malloc>
 800e038:	4602      	mov	r2, r0
 800e03a:	6268      	str	r0, [r5, #36]	; 0x24
 800e03c:	b920      	cbnz	r0, 800e048 <_Bfree+0x20>
 800e03e:	4b09      	ldr	r3, [pc, #36]	; (800e064 <_Bfree+0x3c>)
 800e040:	4809      	ldr	r0, [pc, #36]	; (800e068 <_Bfree+0x40>)
 800e042:	218a      	movs	r1, #138	; 0x8a
 800e044:	f000 fdea 	bl	800ec1c <__assert_func>
 800e048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e04c:	6006      	str	r6, [r0, #0]
 800e04e:	60c6      	str	r6, [r0, #12]
 800e050:	b13c      	cbz	r4, 800e062 <_Bfree+0x3a>
 800e052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e054:	6862      	ldr	r2, [r4, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e05c:	6021      	str	r1, [r4, #0]
 800e05e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	0800eff9 	.word	0x0800eff9
 800e068:	0800f0dc 	.word	0x0800f0dc

0800e06c <__multadd>:
 800e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e070:	690d      	ldr	r5, [r1, #16]
 800e072:	4607      	mov	r7, r0
 800e074:	460c      	mov	r4, r1
 800e076:	461e      	mov	r6, r3
 800e078:	f101 0c14 	add.w	ip, r1, #20
 800e07c:	2000      	movs	r0, #0
 800e07e:	f8dc 3000 	ldr.w	r3, [ip]
 800e082:	b299      	uxth	r1, r3
 800e084:	fb02 6101 	mla	r1, r2, r1, r6
 800e088:	0c1e      	lsrs	r6, r3, #16
 800e08a:	0c0b      	lsrs	r3, r1, #16
 800e08c:	fb02 3306 	mla	r3, r2, r6, r3
 800e090:	b289      	uxth	r1, r1
 800e092:	3001      	adds	r0, #1
 800e094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e098:	4285      	cmp	r5, r0
 800e09a:	f84c 1b04 	str.w	r1, [ip], #4
 800e09e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0a2:	dcec      	bgt.n	800e07e <__multadd+0x12>
 800e0a4:	b30e      	cbz	r6, 800e0ea <__multadd+0x7e>
 800e0a6:	68a3      	ldr	r3, [r4, #8]
 800e0a8:	42ab      	cmp	r3, r5
 800e0aa:	dc19      	bgt.n	800e0e0 <__multadd+0x74>
 800e0ac:	6861      	ldr	r1, [r4, #4]
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	3101      	adds	r1, #1
 800e0b2:	f7ff ff79 	bl	800dfa8 <_Balloc>
 800e0b6:	4680      	mov	r8, r0
 800e0b8:	b928      	cbnz	r0, 800e0c6 <__multadd+0x5a>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	; (800e0f0 <__multadd+0x84>)
 800e0be:	480d      	ldr	r0, [pc, #52]	; (800e0f4 <__multadd+0x88>)
 800e0c0:	21b5      	movs	r1, #181	; 0xb5
 800e0c2:	f000 fdab 	bl	800ec1c <__assert_func>
 800e0c6:	6922      	ldr	r2, [r4, #16]
 800e0c8:	3202      	adds	r2, #2
 800e0ca:	f104 010c 	add.w	r1, r4, #12
 800e0ce:	0092      	lsls	r2, r2, #2
 800e0d0:	300c      	adds	r0, #12
 800e0d2:	f7ff ff5b 	bl	800df8c <memcpy>
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4638      	mov	r0, r7
 800e0da:	f7ff ffa5 	bl	800e028 <_Bfree>
 800e0de:	4644      	mov	r4, r8
 800e0e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0e4:	3501      	adds	r5, #1
 800e0e6:	615e      	str	r6, [r3, #20]
 800e0e8:	6125      	str	r5, [r4, #16]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f0:	0800f06b 	.word	0x0800f06b
 800e0f4:	0800f0dc 	.word	0x0800f0dc

0800e0f8 <__hi0bits>:
 800e0f8:	0c03      	lsrs	r3, r0, #16
 800e0fa:	041b      	lsls	r3, r3, #16
 800e0fc:	b9d3      	cbnz	r3, 800e134 <__hi0bits+0x3c>
 800e0fe:	0400      	lsls	r0, r0, #16
 800e100:	2310      	movs	r3, #16
 800e102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e106:	bf04      	itt	eq
 800e108:	0200      	lsleq	r0, r0, #8
 800e10a:	3308      	addeq	r3, #8
 800e10c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e110:	bf04      	itt	eq
 800e112:	0100      	lsleq	r0, r0, #4
 800e114:	3304      	addeq	r3, #4
 800e116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e11a:	bf04      	itt	eq
 800e11c:	0080      	lsleq	r0, r0, #2
 800e11e:	3302      	addeq	r3, #2
 800e120:	2800      	cmp	r0, #0
 800e122:	db05      	blt.n	800e130 <__hi0bits+0x38>
 800e124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e128:	f103 0301 	add.w	r3, r3, #1
 800e12c:	bf08      	it	eq
 800e12e:	2320      	moveq	r3, #32
 800e130:	4618      	mov	r0, r3
 800e132:	4770      	bx	lr
 800e134:	2300      	movs	r3, #0
 800e136:	e7e4      	b.n	800e102 <__hi0bits+0xa>

0800e138 <__lo0bits>:
 800e138:	6803      	ldr	r3, [r0, #0]
 800e13a:	f013 0207 	ands.w	r2, r3, #7
 800e13e:	4601      	mov	r1, r0
 800e140:	d00b      	beq.n	800e15a <__lo0bits+0x22>
 800e142:	07da      	lsls	r2, r3, #31
 800e144:	d423      	bmi.n	800e18e <__lo0bits+0x56>
 800e146:	0798      	lsls	r0, r3, #30
 800e148:	bf49      	itett	mi
 800e14a:	085b      	lsrmi	r3, r3, #1
 800e14c:	089b      	lsrpl	r3, r3, #2
 800e14e:	2001      	movmi	r0, #1
 800e150:	600b      	strmi	r3, [r1, #0]
 800e152:	bf5c      	itt	pl
 800e154:	600b      	strpl	r3, [r1, #0]
 800e156:	2002      	movpl	r0, #2
 800e158:	4770      	bx	lr
 800e15a:	b298      	uxth	r0, r3
 800e15c:	b9a8      	cbnz	r0, 800e18a <__lo0bits+0x52>
 800e15e:	0c1b      	lsrs	r3, r3, #16
 800e160:	2010      	movs	r0, #16
 800e162:	b2da      	uxtb	r2, r3
 800e164:	b90a      	cbnz	r2, 800e16a <__lo0bits+0x32>
 800e166:	3008      	adds	r0, #8
 800e168:	0a1b      	lsrs	r3, r3, #8
 800e16a:	071a      	lsls	r2, r3, #28
 800e16c:	bf04      	itt	eq
 800e16e:	091b      	lsreq	r3, r3, #4
 800e170:	3004      	addeq	r0, #4
 800e172:	079a      	lsls	r2, r3, #30
 800e174:	bf04      	itt	eq
 800e176:	089b      	lsreq	r3, r3, #2
 800e178:	3002      	addeq	r0, #2
 800e17a:	07da      	lsls	r2, r3, #31
 800e17c:	d403      	bmi.n	800e186 <__lo0bits+0x4e>
 800e17e:	085b      	lsrs	r3, r3, #1
 800e180:	f100 0001 	add.w	r0, r0, #1
 800e184:	d005      	beq.n	800e192 <__lo0bits+0x5a>
 800e186:	600b      	str	r3, [r1, #0]
 800e188:	4770      	bx	lr
 800e18a:	4610      	mov	r0, r2
 800e18c:	e7e9      	b.n	800e162 <__lo0bits+0x2a>
 800e18e:	2000      	movs	r0, #0
 800e190:	4770      	bx	lr
 800e192:	2020      	movs	r0, #32
 800e194:	4770      	bx	lr
	...

0800e198 <__i2b>:
 800e198:	b510      	push	{r4, lr}
 800e19a:	460c      	mov	r4, r1
 800e19c:	2101      	movs	r1, #1
 800e19e:	f7ff ff03 	bl	800dfa8 <_Balloc>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	b928      	cbnz	r0, 800e1b2 <__i2b+0x1a>
 800e1a6:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <__i2b+0x24>)
 800e1a8:	4805      	ldr	r0, [pc, #20]	; (800e1c0 <__i2b+0x28>)
 800e1aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1ae:	f000 fd35 	bl	800ec1c <__assert_func>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	6144      	str	r4, [r0, #20]
 800e1b6:	6103      	str	r3, [r0, #16]
 800e1b8:	bd10      	pop	{r4, pc}
 800e1ba:	bf00      	nop
 800e1bc:	0800f06b 	.word	0x0800f06b
 800e1c0:	0800f0dc 	.word	0x0800f0dc

0800e1c4 <__multiply>:
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	4691      	mov	r9, r2
 800e1ca:	690a      	ldr	r2, [r1, #16]
 800e1cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	bfb8      	it	lt
 800e1d4:	460b      	movlt	r3, r1
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	bfbc      	itt	lt
 800e1da:	464c      	movlt	r4, r9
 800e1dc:	4699      	movlt	r9, r3
 800e1de:	6927      	ldr	r7, [r4, #16]
 800e1e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1e4:	68a3      	ldr	r3, [r4, #8]
 800e1e6:	6861      	ldr	r1, [r4, #4]
 800e1e8:	eb07 060a 	add.w	r6, r7, sl
 800e1ec:	42b3      	cmp	r3, r6
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	bfb8      	it	lt
 800e1f2:	3101      	addlt	r1, #1
 800e1f4:	f7ff fed8 	bl	800dfa8 <_Balloc>
 800e1f8:	b930      	cbnz	r0, 800e208 <__multiply+0x44>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	4b44      	ldr	r3, [pc, #272]	; (800e310 <__multiply+0x14c>)
 800e1fe:	4845      	ldr	r0, [pc, #276]	; (800e314 <__multiply+0x150>)
 800e200:	f240 115d 	movw	r1, #349	; 0x15d
 800e204:	f000 fd0a 	bl	800ec1c <__assert_func>
 800e208:	f100 0514 	add.w	r5, r0, #20
 800e20c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e210:	462b      	mov	r3, r5
 800e212:	2200      	movs	r2, #0
 800e214:	4543      	cmp	r3, r8
 800e216:	d321      	bcc.n	800e25c <__multiply+0x98>
 800e218:	f104 0314 	add.w	r3, r4, #20
 800e21c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e220:	f109 0314 	add.w	r3, r9, #20
 800e224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e228:	9202      	str	r2, [sp, #8]
 800e22a:	1b3a      	subs	r2, r7, r4
 800e22c:	3a15      	subs	r2, #21
 800e22e:	f022 0203 	bic.w	r2, r2, #3
 800e232:	3204      	adds	r2, #4
 800e234:	f104 0115 	add.w	r1, r4, #21
 800e238:	428f      	cmp	r7, r1
 800e23a:	bf38      	it	cc
 800e23c:	2204      	movcc	r2, #4
 800e23e:	9201      	str	r2, [sp, #4]
 800e240:	9a02      	ldr	r2, [sp, #8]
 800e242:	9303      	str	r3, [sp, #12]
 800e244:	429a      	cmp	r2, r3
 800e246:	d80c      	bhi.n	800e262 <__multiply+0x9e>
 800e248:	2e00      	cmp	r6, #0
 800e24a:	dd03      	ble.n	800e254 <__multiply+0x90>
 800e24c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e250:	2b00      	cmp	r3, #0
 800e252:	d05a      	beq.n	800e30a <__multiply+0x146>
 800e254:	6106      	str	r6, [r0, #16]
 800e256:	b005      	add	sp, #20
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	f843 2b04 	str.w	r2, [r3], #4
 800e260:	e7d8      	b.n	800e214 <__multiply+0x50>
 800e262:	f8b3 a000 	ldrh.w	sl, [r3]
 800e266:	f1ba 0f00 	cmp.w	sl, #0
 800e26a:	d024      	beq.n	800e2b6 <__multiply+0xf2>
 800e26c:	f104 0e14 	add.w	lr, r4, #20
 800e270:	46a9      	mov	r9, r5
 800e272:	f04f 0c00 	mov.w	ip, #0
 800e276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e27a:	f8d9 1000 	ldr.w	r1, [r9]
 800e27e:	fa1f fb82 	uxth.w	fp, r2
 800e282:	b289      	uxth	r1, r1
 800e284:	fb0a 110b 	mla	r1, sl, fp, r1
 800e288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e28c:	f8d9 2000 	ldr.w	r2, [r9]
 800e290:	4461      	add	r1, ip
 800e292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e296:	fb0a c20b 	mla	r2, sl, fp, ip
 800e29a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e29e:	b289      	uxth	r1, r1
 800e2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2a4:	4577      	cmp	r7, lr
 800e2a6:	f849 1b04 	str.w	r1, [r9], #4
 800e2aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2ae:	d8e2      	bhi.n	800e276 <__multiply+0xb2>
 800e2b0:	9a01      	ldr	r2, [sp, #4]
 800e2b2:	f845 c002 	str.w	ip, [r5, r2]
 800e2b6:	9a03      	ldr	r2, [sp, #12]
 800e2b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	f1b9 0f00 	cmp.w	r9, #0
 800e2c2:	d020      	beq.n	800e306 <__multiply+0x142>
 800e2c4:	6829      	ldr	r1, [r5, #0]
 800e2c6:	f104 0c14 	add.w	ip, r4, #20
 800e2ca:	46ae      	mov	lr, r5
 800e2cc:	f04f 0a00 	mov.w	sl, #0
 800e2d0:	f8bc b000 	ldrh.w	fp, [ip]
 800e2d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2d8:	fb09 220b 	mla	r2, r9, fp, r2
 800e2dc:	4492      	add	sl, r2
 800e2de:	b289      	uxth	r1, r1
 800e2e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2e4:	f84e 1b04 	str.w	r1, [lr], #4
 800e2e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2ec:	f8be 1000 	ldrh.w	r1, [lr]
 800e2f0:	0c12      	lsrs	r2, r2, #16
 800e2f2:	fb09 1102 	mla	r1, r9, r2, r1
 800e2f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2fa:	4567      	cmp	r7, ip
 800e2fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e300:	d8e6      	bhi.n	800e2d0 <__multiply+0x10c>
 800e302:	9a01      	ldr	r2, [sp, #4]
 800e304:	50a9      	str	r1, [r5, r2]
 800e306:	3504      	adds	r5, #4
 800e308:	e79a      	b.n	800e240 <__multiply+0x7c>
 800e30a:	3e01      	subs	r6, #1
 800e30c:	e79c      	b.n	800e248 <__multiply+0x84>
 800e30e:	bf00      	nop
 800e310:	0800f06b 	.word	0x0800f06b
 800e314:	0800f0dc 	.word	0x0800f0dc

0800e318 <__pow5mult>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	4615      	mov	r5, r2
 800e31e:	f012 0203 	ands.w	r2, r2, #3
 800e322:	4606      	mov	r6, r0
 800e324:	460f      	mov	r7, r1
 800e326:	d007      	beq.n	800e338 <__pow5mult+0x20>
 800e328:	4c25      	ldr	r4, [pc, #148]	; (800e3c0 <__pow5mult+0xa8>)
 800e32a:	3a01      	subs	r2, #1
 800e32c:	2300      	movs	r3, #0
 800e32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e332:	f7ff fe9b 	bl	800e06c <__multadd>
 800e336:	4607      	mov	r7, r0
 800e338:	10ad      	asrs	r5, r5, #2
 800e33a:	d03d      	beq.n	800e3b8 <__pow5mult+0xa0>
 800e33c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e33e:	b97c      	cbnz	r4, 800e360 <__pow5mult+0x48>
 800e340:	2010      	movs	r0, #16
 800e342:	f7ff fe1b 	bl	800df7c <malloc>
 800e346:	4602      	mov	r2, r0
 800e348:	6270      	str	r0, [r6, #36]	; 0x24
 800e34a:	b928      	cbnz	r0, 800e358 <__pow5mult+0x40>
 800e34c:	4b1d      	ldr	r3, [pc, #116]	; (800e3c4 <__pow5mult+0xac>)
 800e34e:	481e      	ldr	r0, [pc, #120]	; (800e3c8 <__pow5mult+0xb0>)
 800e350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e354:	f000 fc62 	bl	800ec1c <__assert_func>
 800e358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e35c:	6004      	str	r4, [r0, #0]
 800e35e:	60c4      	str	r4, [r0, #12]
 800e360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e368:	b94c      	cbnz	r4, 800e37e <__pow5mult+0x66>
 800e36a:	f240 2171 	movw	r1, #625	; 0x271
 800e36e:	4630      	mov	r0, r6
 800e370:	f7ff ff12 	bl	800e198 <__i2b>
 800e374:	2300      	movs	r3, #0
 800e376:	f8c8 0008 	str.w	r0, [r8, #8]
 800e37a:	4604      	mov	r4, r0
 800e37c:	6003      	str	r3, [r0, #0]
 800e37e:	f04f 0900 	mov.w	r9, #0
 800e382:	07eb      	lsls	r3, r5, #31
 800e384:	d50a      	bpl.n	800e39c <__pow5mult+0x84>
 800e386:	4639      	mov	r1, r7
 800e388:	4622      	mov	r2, r4
 800e38a:	4630      	mov	r0, r6
 800e38c:	f7ff ff1a 	bl	800e1c4 <__multiply>
 800e390:	4639      	mov	r1, r7
 800e392:	4680      	mov	r8, r0
 800e394:	4630      	mov	r0, r6
 800e396:	f7ff fe47 	bl	800e028 <_Bfree>
 800e39a:	4647      	mov	r7, r8
 800e39c:	106d      	asrs	r5, r5, #1
 800e39e:	d00b      	beq.n	800e3b8 <__pow5mult+0xa0>
 800e3a0:	6820      	ldr	r0, [r4, #0]
 800e3a2:	b938      	cbnz	r0, 800e3b4 <__pow5mult+0x9c>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7ff ff0b 	bl	800e1c4 <__multiply>
 800e3ae:	6020      	str	r0, [r4, #0]
 800e3b0:	f8c0 9000 	str.w	r9, [r0]
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	e7e4      	b.n	800e382 <__pow5mult+0x6a>
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3be:	bf00      	nop
 800e3c0:	0800f228 	.word	0x0800f228
 800e3c4:	0800eff9 	.word	0x0800eff9
 800e3c8:	0800f0dc 	.word	0x0800f0dc

0800e3cc <__lshift>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	6849      	ldr	r1, [r1, #4]
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	4607      	mov	r7, r0
 800e3de:	4691      	mov	r9, r2
 800e3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3e4:	f108 0601 	add.w	r6, r8, #1
 800e3e8:	42b3      	cmp	r3, r6
 800e3ea:	db0b      	blt.n	800e404 <__lshift+0x38>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff fddb 	bl	800dfa8 <_Balloc>
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	b948      	cbnz	r0, 800e40a <__lshift+0x3e>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	4b2a      	ldr	r3, [pc, #168]	; (800e4a4 <__lshift+0xd8>)
 800e3fa:	482b      	ldr	r0, [pc, #172]	; (800e4a8 <__lshift+0xdc>)
 800e3fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e400:	f000 fc0c 	bl	800ec1c <__assert_func>
 800e404:	3101      	adds	r1, #1
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	e7ee      	b.n	800e3e8 <__lshift+0x1c>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f100 0114 	add.w	r1, r0, #20
 800e410:	f100 0210 	add.w	r2, r0, #16
 800e414:	4618      	mov	r0, r3
 800e416:	4553      	cmp	r3, sl
 800e418:	db37      	blt.n	800e48a <__lshift+0xbe>
 800e41a:	6920      	ldr	r0, [r4, #16]
 800e41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e420:	f104 0314 	add.w	r3, r4, #20
 800e424:	f019 091f 	ands.w	r9, r9, #31
 800e428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e42c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e430:	d02f      	beq.n	800e492 <__lshift+0xc6>
 800e432:	f1c9 0e20 	rsb	lr, r9, #32
 800e436:	468a      	mov	sl, r1
 800e438:	f04f 0c00 	mov.w	ip, #0
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	fa02 f209 	lsl.w	r2, r2, r9
 800e442:	ea42 020c 	orr.w	r2, r2, ip
 800e446:	f84a 2b04 	str.w	r2, [sl], #4
 800e44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e44e:	4298      	cmp	r0, r3
 800e450:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e454:	d8f2      	bhi.n	800e43c <__lshift+0x70>
 800e456:	1b03      	subs	r3, r0, r4
 800e458:	3b15      	subs	r3, #21
 800e45a:	f023 0303 	bic.w	r3, r3, #3
 800e45e:	3304      	adds	r3, #4
 800e460:	f104 0215 	add.w	r2, r4, #21
 800e464:	4290      	cmp	r0, r2
 800e466:	bf38      	it	cc
 800e468:	2304      	movcc	r3, #4
 800e46a:	f841 c003 	str.w	ip, [r1, r3]
 800e46e:	f1bc 0f00 	cmp.w	ip, #0
 800e472:	d001      	beq.n	800e478 <__lshift+0xac>
 800e474:	f108 0602 	add.w	r6, r8, #2
 800e478:	3e01      	subs	r6, #1
 800e47a:	4638      	mov	r0, r7
 800e47c:	612e      	str	r6, [r5, #16]
 800e47e:	4621      	mov	r1, r4
 800e480:	f7ff fdd2 	bl	800e028 <_Bfree>
 800e484:	4628      	mov	r0, r5
 800e486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e48a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e48e:	3301      	adds	r3, #1
 800e490:	e7c1      	b.n	800e416 <__lshift+0x4a>
 800e492:	3904      	subs	r1, #4
 800e494:	f853 2b04 	ldr.w	r2, [r3], #4
 800e498:	f841 2f04 	str.w	r2, [r1, #4]!
 800e49c:	4298      	cmp	r0, r3
 800e49e:	d8f9      	bhi.n	800e494 <__lshift+0xc8>
 800e4a0:	e7ea      	b.n	800e478 <__lshift+0xac>
 800e4a2:	bf00      	nop
 800e4a4:	0800f06b 	.word	0x0800f06b
 800e4a8:	0800f0dc 	.word	0x0800f0dc

0800e4ac <__mcmp>:
 800e4ac:	b530      	push	{r4, r5, lr}
 800e4ae:	6902      	ldr	r2, [r0, #16]
 800e4b0:	690c      	ldr	r4, [r1, #16]
 800e4b2:	1b12      	subs	r2, r2, r4
 800e4b4:	d10e      	bne.n	800e4d4 <__mcmp+0x28>
 800e4b6:	f100 0314 	add.w	r3, r0, #20
 800e4ba:	3114      	adds	r1, #20
 800e4bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4cc:	42a5      	cmp	r5, r4
 800e4ce:	d003      	beq.n	800e4d8 <__mcmp+0x2c>
 800e4d0:	d305      	bcc.n	800e4de <__mcmp+0x32>
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	bd30      	pop	{r4, r5, pc}
 800e4d8:	4283      	cmp	r3, r0
 800e4da:	d3f3      	bcc.n	800e4c4 <__mcmp+0x18>
 800e4dc:	e7fa      	b.n	800e4d4 <__mcmp+0x28>
 800e4de:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e2:	e7f7      	b.n	800e4d4 <__mcmp+0x28>

0800e4e4 <__mdiff>:
 800e4e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	460c      	mov	r4, r1
 800e4ea:	4606      	mov	r6, r0
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	4690      	mov	r8, r2
 800e4f2:	f7ff ffdb 	bl	800e4ac <__mcmp>
 800e4f6:	1e05      	subs	r5, r0, #0
 800e4f8:	d110      	bne.n	800e51c <__mdiff+0x38>
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f7ff fd53 	bl	800dfa8 <_Balloc>
 800e502:	b930      	cbnz	r0, 800e512 <__mdiff+0x2e>
 800e504:	4b3a      	ldr	r3, [pc, #232]	; (800e5f0 <__mdiff+0x10c>)
 800e506:	4602      	mov	r2, r0
 800e508:	f240 2132 	movw	r1, #562	; 0x232
 800e50c:	4839      	ldr	r0, [pc, #228]	; (800e5f4 <__mdiff+0x110>)
 800e50e:	f000 fb85 	bl	800ec1c <__assert_func>
 800e512:	2301      	movs	r3, #1
 800e514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51c:	bfa4      	itt	ge
 800e51e:	4643      	movge	r3, r8
 800e520:	46a0      	movge	r8, r4
 800e522:	4630      	mov	r0, r6
 800e524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e528:	bfa6      	itte	ge
 800e52a:	461c      	movge	r4, r3
 800e52c:	2500      	movge	r5, #0
 800e52e:	2501      	movlt	r5, #1
 800e530:	f7ff fd3a 	bl	800dfa8 <_Balloc>
 800e534:	b920      	cbnz	r0, 800e540 <__mdiff+0x5c>
 800e536:	4b2e      	ldr	r3, [pc, #184]	; (800e5f0 <__mdiff+0x10c>)
 800e538:	4602      	mov	r2, r0
 800e53a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e53e:	e7e5      	b.n	800e50c <__mdiff+0x28>
 800e540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e544:	6926      	ldr	r6, [r4, #16]
 800e546:	60c5      	str	r5, [r0, #12]
 800e548:	f104 0914 	add.w	r9, r4, #20
 800e54c:	f108 0514 	add.w	r5, r8, #20
 800e550:	f100 0e14 	add.w	lr, r0, #20
 800e554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e55c:	f108 0210 	add.w	r2, r8, #16
 800e560:	46f2      	mov	sl, lr
 800e562:	2100      	movs	r1, #0
 800e564:	f859 3b04 	ldr.w	r3, [r9], #4
 800e568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e56c:	fa1f f883 	uxth.w	r8, r3
 800e570:	fa11 f18b 	uxtah	r1, r1, fp
 800e574:	0c1b      	lsrs	r3, r3, #16
 800e576:	eba1 0808 	sub.w	r8, r1, r8
 800e57a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e57e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e582:	fa1f f888 	uxth.w	r8, r8
 800e586:	1419      	asrs	r1, r3, #16
 800e588:	454e      	cmp	r6, r9
 800e58a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e58e:	f84a 3b04 	str.w	r3, [sl], #4
 800e592:	d8e7      	bhi.n	800e564 <__mdiff+0x80>
 800e594:	1b33      	subs	r3, r6, r4
 800e596:	3b15      	subs	r3, #21
 800e598:	f023 0303 	bic.w	r3, r3, #3
 800e59c:	3304      	adds	r3, #4
 800e59e:	3415      	adds	r4, #21
 800e5a0:	42a6      	cmp	r6, r4
 800e5a2:	bf38      	it	cc
 800e5a4:	2304      	movcc	r3, #4
 800e5a6:	441d      	add	r5, r3
 800e5a8:	4473      	add	r3, lr
 800e5aa:	469e      	mov	lr, r3
 800e5ac:	462e      	mov	r6, r5
 800e5ae:	4566      	cmp	r6, ip
 800e5b0:	d30e      	bcc.n	800e5d0 <__mdiff+0xec>
 800e5b2:	f10c 0203 	add.w	r2, ip, #3
 800e5b6:	1b52      	subs	r2, r2, r5
 800e5b8:	f022 0203 	bic.w	r2, r2, #3
 800e5bc:	3d03      	subs	r5, #3
 800e5be:	45ac      	cmp	ip, r5
 800e5c0:	bf38      	it	cc
 800e5c2:	2200      	movcc	r2, #0
 800e5c4:	441a      	add	r2, r3
 800e5c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5ca:	b17b      	cbz	r3, 800e5ec <__mdiff+0x108>
 800e5cc:	6107      	str	r7, [r0, #16]
 800e5ce:	e7a3      	b.n	800e518 <__mdiff+0x34>
 800e5d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5d4:	fa11 f288 	uxtah	r2, r1, r8
 800e5d8:	1414      	asrs	r4, r2, #16
 800e5da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5de:	b292      	uxth	r2, r2
 800e5e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5e4:	f84e 2b04 	str.w	r2, [lr], #4
 800e5e8:	1421      	asrs	r1, r4, #16
 800e5ea:	e7e0      	b.n	800e5ae <__mdiff+0xca>
 800e5ec:	3f01      	subs	r7, #1
 800e5ee:	e7ea      	b.n	800e5c6 <__mdiff+0xe2>
 800e5f0:	0800f06b 	.word	0x0800f06b
 800e5f4:	0800f0dc 	.word	0x0800f0dc

0800e5f8 <__d2b>:
 800e5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5fc:	4689      	mov	r9, r1
 800e5fe:	2101      	movs	r1, #1
 800e600:	ec57 6b10 	vmov	r6, r7, d0
 800e604:	4690      	mov	r8, r2
 800e606:	f7ff fccf 	bl	800dfa8 <_Balloc>
 800e60a:	4604      	mov	r4, r0
 800e60c:	b930      	cbnz	r0, 800e61c <__d2b+0x24>
 800e60e:	4602      	mov	r2, r0
 800e610:	4b25      	ldr	r3, [pc, #148]	; (800e6a8 <__d2b+0xb0>)
 800e612:	4826      	ldr	r0, [pc, #152]	; (800e6ac <__d2b+0xb4>)
 800e614:	f240 310a 	movw	r1, #778	; 0x30a
 800e618:	f000 fb00 	bl	800ec1c <__assert_func>
 800e61c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e624:	bb35      	cbnz	r5, 800e674 <__d2b+0x7c>
 800e626:	2e00      	cmp	r6, #0
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	d028      	beq.n	800e67e <__d2b+0x86>
 800e62c:	4668      	mov	r0, sp
 800e62e:	9600      	str	r6, [sp, #0]
 800e630:	f7ff fd82 	bl	800e138 <__lo0bits>
 800e634:	9900      	ldr	r1, [sp, #0]
 800e636:	b300      	cbz	r0, 800e67a <__d2b+0x82>
 800e638:	9a01      	ldr	r2, [sp, #4]
 800e63a:	f1c0 0320 	rsb	r3, r0, #32
 800e63e:	fa02 f303 	lsl.w	r3, r2, r3
 800e642:	430b      	orrs	r3, r1
 800e644:	40c2      	lsrs	r2, r0
 800e646:	6163      	str	r3, [r4, #20]
 800e648:	9201      	str	r2, [sp, #4]
 800e64a:	9b01      	ldr	r3, [sp, #4]
 800e64c:	61a3      	str	r3, [r4, #24]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	bf14      	ite	ne
 800e652:	2202      	movne	r2, #2
 800e654:	2201      	moveq	r2, #1
 800e656:	6122      	str	r2, [r4, #16]
 800e658:	b1d5      	cbz	r5, 800e690 <__d2b+0x98>
 800e65a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e65e:	4405      	add	r5, r0
 800e660:	f8c9 5000 	str.w	r5, [r9]
 800e664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e668:	f8c8 0000 	str.w	r0, [r8]
 800e66c:	4620      	mov	r0, r4
 800e66e:	b003      	add	sp, #12
 800e670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e678:	e7d5      	b.n	800e626 <__d2b+0x2e>
 800e67a:	6161      	str	r1, [r4, #20]
 800e67c:	e7e5      	b.n	800e64a <__d2b+0x52>
 800e67e:	a801      	add	r0, sp, #4
 800e680:	f7ff fd5a 	bl	800e138 <__lo0bits>
 800e684:	9b01      	ldr	r3, [sp, #4]
 800e686:	6163      	str	r3, [r4, #20]
 800e688:	2201      	movs	r2, #1
 800e68a:	6122      	str	r2, [r4, #16]
 800e68c:	3020      	adds	r0, #32
 800e68e:	e7e3      	b.n	800e658 <__d2b+0x60>
 800e690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e698:	f8c9 0000 	str.w	r0, [r9]
 800e69c:	6918      	ldr	r0, [r3, #16]
 800e69e:	f7ff fd2b 	bl	800e0f8 <__hi0bits>
 800e6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6a6:	e7df      	b.n	800e668 <__d2b+0x70>
 800e6a8:	0800f06b 	.word	0x0800f06b
 800e6ac:	0800f0dc 	.word	0x0800f0dc

0800e6b0 <_calloc_r>:
 800e6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6b2:	fba1 2402 	umull	r2, r4, r1, r2
 800e6b6:	b94c      	cbnz	r4, 800e6cc <_calloc_r+0x1c>
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	9201      	str	r2, [sp, #4]
 800e6bc:	f000 f87a 	bl	800e7b4 <_malloc_r>
 800e6c0:	9a01      	ldr	r2, [sp, #4]
 800e6c2:	4605      	mov	r5, r0
 800e6c4:	b930      	cbnz	r0, 800e6d4 <_calloc_r+0x24>
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	b003      	add	sp, #12
 800e6ca:	bd30      	pop	{r4, r5, pc}
 800e6cc:	220c      	movs	r2, #12
 800e6ce:	6002      	str	r2, [r0, #0]
 800e6d0:	2500      	movs	r5, #0
 800e6d2:	e7f8      	b.n	800e6c6 <_calloc_r+0x16>
 800e6d4:	4621      	mov	r1, r4
 800e6d6:	f7fd fdf1 	bl	800c2bc <memset>
 800e6da:	e7f4      	b.n	800e6c6 <_calloc_r+0x16>

0800e6dc <_free_r>:
 800e6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6de:	2900      	cmp	r1, #0
 800e6e0:	d044      	beq.n	800e76c <_free_r+0x90>
 800e6e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e6:	9001      	str	r0, [sp, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e6ee:	bfb8      	it	lt
 800e6f0:	18e4      	addlt	r4, r4, r3
 800e6f2:	f000 fb19 	bl	800ed28 <__malloc_lock>
 800e6f6:	4a1e      	ldr	r2, [pc, #120]	; (800e770 <_free_r+0x94>)
 800e6f8:	9801      	ldr	r0, [sp, #4]
 800e6fa:	6813      	ldr	r3, [r2, #0]
 800e6fc:	b933      	cbnz	r3, 800e70c <_free_r+0x30>
 800e6fe:	6063      	str	r3, [r4, #4]
 800e700:	6014      	str	r4, [r2, #0]
 800e702:	b003      	add	sp, #12
 800e704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e708:	f000 bb14 	b.w	800ed34 <__malloc_unlock>
 800e70c:	42a3      	cmp	r3, r4
 800e70e:	d908      	bls.n	800e722 <_free_r+0x46>
 800e710:	6825      	ldr	r5, [r4, #0]
 800e712:	1961      	adds	r1, r4, r5
 800e714:	428b      	cmp	r3, r1
 800e716:	bf01      	itttt	eq
 800e718:	6819      	ldreq	r1, [r3, #0]
 800e71a:	685b      	ldreq	r3, [r3, #4]
 800e71c:	1949      	addeq	r1, r1, r5
 800e71e:	6021      	streq	r1, [r4, #0]
 800e720:	e7ed      	b.n	800e6fe <_free_r+0x22>
 800e722:	461a      	mov	r2, r3
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	b10b      	cbz	r3, 800e72c <_free_r+0x50>
 800e728:	42a3      	cmp	r3, r4
 800e72a:	d9fa      	bls.n	800e722 <_free_r+0x46>
 800e72c:	6811      	ldr	r1, [r2, #0]
 800e72e:	1855      	adds	r5, r2, r1
 800e730:	42a5      	cmp	r5, r4
 800e732:	d10b      	bne.n	800e74c <_free_r+0x70>
 800e734:	6824      	ldr	r4, [r4, #0]
 800e736:	4421      	add	r1, r4
 800e738:	1854      	adds	r4, r2, r1
 800e73a:	42a3      	cmp	r3, r4
 800e73c:	6011      	str	r1, [r2, #0]
 800e73e:	d1e0      	bne.n	800e702 <_free_r+0x26>
 800e740:	681c      	ldr	r4, [r3, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	6053      	str	r3, [r2, #4]
 800e746:	4421      	add	r1, r4
 800e748:	6011      	str	r1, [r2, #0]
 800e74a:	e7da      	b.n	800e702 <_free_r+0x26>
 800e74c:	d902      	bls.n	800e754 <_free_r+0x78>
 800e74e:	230c      	movs	r3, #12
 800e750:	6003      	str	r3, [r0, #0]
 800e752:	e7d6      	b.n	800e702 <_free_r+0x26>
 800e754:	6825      	ldr	r5, [r4, #0]
 800e756:	1961      	adds	r1, r4, r5
 800e758:	428b      	cmp	r3, r1
 800e75a:	bf04      	itt	eq
 800e75c:	6819      	ldreq	r1, [r3, #0]
 800e75e:	685b      	ldreq	r3, [r3, #4]
 800e760:	6063      	str	r3, [r4, #4]
 800e762:	bf04      	itt	eq
 800e764:	1949      	addeq	r1, r1, r5
 800e766:	6021      	streq	r1, [r4, #0]
 800e768:	6054      	str	r4, [r2, #4]
 800e76a:	e7ca      	b.n	800e702 <_free_r+0x26>
 800e76c:	b003      	add	sp, #12
 800e76e:	bd30      	pop	{r4, r5, pc}
 800e770:	20005018 	.word	0x20005018

0800e774 <sbrk_aligned>:
 800e774:	b570      	push	{r4, r5, r6, lr}
 800e776:	4e0e      	ldr	r6, [pc, #56]	; (800e7b0 <sbrk_aligned+0x3c>)
 800e778:	460c      	mov	r4, r1
 800e77a:	6831      	ldr	r1, [r6, #0]
 800e77c:	4605      	mov	r5, r0
 800e77e:	b911      	cbnz	r1, 800e786 <sbrk_aligned+0x12>
 800e780:	f000 f9e6 	bl	800eb50 <_sbrk_r>
 800e784:	6030      	str	r0, [r6, #0]
 800e786:	4621      	mov	r1, r4
 800e788:	4628      	mov	r0, r5
 800e78a:	f000 f9e1 	bl	800eb50 <_sbrk_r>
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	d00a      	beq.n	800e7a8 <sbrk_aligned+0x34>
 800e792:	1cc4      	adds	r4, r0, #3
 800e794:	f024 0403 	bic.w	r4, r4, #3
 800e798:	42a0      	cmp	r0, r4
 800e79a:	d007      	beq.n	800e7ac <sbrk_aligned+0x38>
 800e79c:	1a21      	subs	r1, r4, r0
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f000 f9d6 	bl	800eb50 <_sbrk_r>
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d101      	bne.n	800e7ac <sbrk_aligned+0x38>
 800e7a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	bd70      	pop	{r4, r5, r6, pc}
 800e7b0:	2000501c 	.word	0x2000501c

0800e7b4 <_malloc_r>:
 800e7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b8:	1ccd      	adds	r5, r1, #3
 800e7ba:	f025 0503 	bic.w	r5, r5, #3
 800e7be:	3508      	adds	r5, #8
 800e7c0:	2d0c      	cmp	r5, #12
 800e7c2:	bf38      	it	cc
 800e7c4:	250c      	movcc	r5, #12
 800e7c6:	2d00      	cmp	r5, #0
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	db01      	blt.n	800e7d0 <_malloc_r+0x1c>
 800e7cc:	42a9      	cmp	r1, r5
 800e7ce:	d905      	bls.n	800e7dc <_malloc_r+0x28>
 800e7d0:	230c      	movs	r3, #12
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	2600      	movs	r6, #0
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7dc:	4e2e      	ldr	r6, [pc, #184]	; (800e898 <_malloc_r+0xe4>)
 800e7de:	f000 faa3 	bl	800ed28 <__malloc_lock>
 800e7e2:	6833      	ldr	r3, [r6, #0]
 800e7e4:	461c      	mov	r4, r3
 800e7e6:	bb34      	cbnz	r4, 800e836 <_malloc_r+0x82>
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	f7ff ffc2 	bl	800e774 <sbrk_aligned>
 800e7f0:	1c43      	adds	r3, r0, #1
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	d14d      	bne.n	800e892 <_malloc_r+0xde>
 800e7f6:	6834      	ldr	r4, [r6, #0]
 800e7f8:	4626      	mov	r6, r4
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	d140      	bne.n	800e880 <_malloc_r+0xcc>
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	4631      	mov	r1, r6
 800e802:	4638      	mov	r0, r7
 800e804:	eb04 0803 	add.w	r8, r4, r3
 800e808:	f000 f9a2 	bl	800eb50 <_sbrk_r>
 800e80c:	4580      	cmp	r8, r0
 800e80e:	d13a      	bne.n	800e886 <_malloc_r+0xd2>
 800e810:	6821      	ldr	r1, [r4, #0]
 800e812:	3503      	adds	r5, #3
 800e814:	1a6d      	subs	r5, r5, r1
 800e816:	f025 0503 	bic.w	r5, r5, #3
 800e81a:	3508      	adds	r5, #8
 800e81c:	2d0c      	cmp	r5, #12
 800e81e:	bf38      	it	cc
 800e820:	250c      	movcc	r5, #12
 800e822:	4629      	mov	r1, r5
 800e824:	4638      	mov	r0, r7
 800e826:	f7ff ffa5 	bl	800e774 <sbrk_aligned>
 800e82a:	3001      	adds	r0, #1
 800e82c:	d02b      	beq.n	800e886 <_malloc_r+0xd2>
 800e82e:	6823      	ldr	r3, [r4, #0]
 800e830:	442b      	add	r3, r5
 800e832:	6023      	str	r3, [r4, #0]
 800e834:	e00e      	b.n	800e854 <_malloc_r+0xa0>
 800e836:	6822      	ldr	r2, [r4, #0]
 800e838:	1b52      	subs	r2, r2, r5
 800e83a:	d41e      	bmi.n	800e87a <_malloc_r+0xc6>
 800e83c:	2a0b      	cmp	r2, #11
 800e83e:	d916      	bls.n	800e86e <_malloc_r+0xba>
 800e840:	1961      	adds	r1, r4, r5
 800e842:	42a3      	cmp	r3, r4
 800e844:	6025      	str	r5, [r4, #0]
 800e846:	bf18      	it	ne
 800e848:	6059      	strne	r1, [r3, #4]
 800e84a:	6863      	ldr	r3, [r4, #4]
 800e84c:	bf08      	it	eq
 800e84e:	6031      	streq	r1, [r6, #0]
 800e850:	5162      	str	r2, [r4, r5]
 800e852:	604b      	str	r3, [r1, #4]
 800e854:	4638      	mov	r0, r7
 800e856:	f104 060b 	add.w	r6, r4, #11
 800e85a:	f000 fa6b 	bl	800ed34 <__malloc_unlock>
 800e85e:	f026 0607 	bic.w	r6, r6, #7
 800e862:	1d23      	adds	r3, r4, #4
 800e864:	1af2      	subs	r2, r6, r3
 800e866:	d0b6      	beq.n	800e7d6 <_malloc_r+0x22>
 800e868:	1b9b      	subs	r3, r3, r6
 800e86a:	50a3      	str	r3, [r4, r2]
 800e86c:	e7b3      	b.n	800e7d6 <_malloc_r+0x22>
 800e86e:	6862      	ldr	r2, [r4, #4]
 800e870:	42a3      	cmp	r3, r4
 800e872:	bf0c      	ite	eq
 800e874:	6032      	streq	r2, [r6, #0]
 800e876:	605a      	strne	r2, [r3, #4]
 800e878:	e7ec      	b.n	800e854 <_malloc_r+0xa0>
 800e87a:	4623      	mov	r3, r4
 800e87c:	6864      	ldr	r4, [r4, #4]
 800e87e:	e7b2      	b.n	800e7e6 <_malloc_r+0x32>
 800e880:	4634      	mov	r4, r6
 800e882:	6876      	ldr	r6, [r6, #4]
 800e884:	e7b9      	b.n	800e7fa <_malloc_r+0x46>
 800e886:	230c      	movs	r3, #12
 800e888:	603b      	str	r3, [r7, #0]
 800e88a:	4638      	mov	r0, r7
 800e88c:	f000 fa52 	bl	800ed34 <__malloc_unlock>
 800e890:	e7a1      	b.n	800e7d6 <_malloc_r+0x22>
 800e892:	6025      	str	r5, [r4, #0]
 800e894:	e7de      	b.n	800e854 <_malloc_r+0xa0>
 800e896:	bf00      	nop
 800e898:	20005018 	.word	0x20005018

0800e89c <__sfputc_r>:
 800e89c:	6893      	ldr	r3, [r2, #8]
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	b410      	push	{r4}
 800e8a4:	6093      	str	r3, [r2, #8]
 800e8a6:	da08      	bge.n	800e8ba <__sfputc_r+0x1e>
 800e8a8:	6994      	ldr	r4, [r2, #24]
 800e8aa:	42a3      	cmp	r3, r4
 800e8ac:	db01      	blt.n	800e8b2 <__sfputc_r+0x16>
 800e8ae:	290a      	cmp	r1, #10
 800e8b0:	d103      	bne.n	800e8ba <__sfputc_r+0x1e>
 800e8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8b6:	f7fe ba01 	b.w	800ccbc <__swbuf_r>
 800e8ba:	6813      	ldr	r3, [r2, #0]
 800e8bc:	1c58      	adds	r0, r3, #1
 800e8be:	6010      	str	r0, [r2, #0]
 800e8c0:	7019      	strb	r1, [r3, #0]
 800e8c2:	4608      	mov	r0, r1
 800e8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <__sfputs_r>:
 800e8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8cc:	4606      	mov	r6, r0
 800e8ce:	460f      	mov	r7, r1
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	18d5      	adds	r5, r2, r3
 800e8d4:	42ac      	cmp	r4, r5
 800e8d6:	d101      	bne.n	800e8dc <__sfputs_r+0x12>
 800e8d8:	2000      	movs	r0, #0
 800e8da:	e007      	b.n	800e8ec <__sfputs_r+0x22>
 800e8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e0:	463a      	mov	r2, r7
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f7ff ffda 	bl	800e89c <__sfputc_r>
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	d1f3      	bne.n	800e8d4 <__sfputs_r+0xa>
 800e8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8f0 <_vfiprintf_r>:
 800e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	460d      	mov	r5, r1
 800e8f6:	b09d      	sub	sp, #116	; 0x74
 800e8f8:	4614      	mov	r4, r2
 800e8fa:	4698      	mov	r8, r3
 800e8fc:	4606      	mov	r6, r0
 800e8fe:	b118      	cbz	r0, 800e908 <_vfiprintf_r+0x18>
 800e900:	6983      	ldr	r3, [r0, #24]
 800e902:	b90b      	cbnz	r3, 800e908 <_vfiprintf_r+0x18>
 800e904:	f7ff fa30 	bl	800dd68 <__sinit>
 800e908:	4b89      	ldr	r3, [pc, #548]	; (800eb30 <_vfiprintf_r+0x240>)
 800e90a:	429d      	cmp	r5, r3
 800e90c:	d11b      	bne.n	800e946 <_vfiprintf_r+0x56>
 800e90e:	6875      	ldr	r5, [r6, #4]
 800e910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e912:	07d9      	lsls	r1, r3, #31
 800e914:	d405      	bmi.n	800e922 <_vfiprintf_r+0x32>
 800e916:	89ab      	ldrh	r3, [r5, #12]
 800e918:	059a      	lsls	r2, r3, #22
 800e91a:	d402      	bmi.n	800e922 <_vfiprintf_r+0x32>
 800e91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e91e:	f7ff fac6 	bl	800deae <__retarget_lock_acquire_recursive>
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	071b      	lsls	r3, r3, #28
 800e926:	d501      	bpl.n	800e92c <_vfiprintf_r+0x3c>
 800e928:	692b      	ldr	r3, [r5, #16]
 800e92a:	b9eb      	cbnz	r3, 800e968 <_vfiprintf_r+0x78>
 800e92c:	4629      	mov	r1, r5
 800e92e:	4630      	mov	r0, r6
 800e930:	f7fe fa16 	bl	800cd60 <__swsetup_r>
 800e934:	b1c0      	cbz	r0, 800e968 <_vfiprintf_r+0x78>
 800e936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e938:	07dc      	lsls	r4, r3, #31
 800e93a:	d50e      	bpl.n	800e95a <_vfiprintf_r+0x6a>
 800e93c:	f04f 30ff 	mov.w	r0, #4294967295
 800e940:	b01d      	add	sp, #116	; 0x74
 800e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e946:	4b7b      	ldr	r3, [pc, #492]	; (800eb34 <_vfiprintf_r+0x244>)
 800e948:	429d      	cmp	r5, r3
 800e94a:	d101      	bne.n	800e950 <_vfiprintf_r+0x60>
 800e94c:	68b5      	ldr	r5, [r6, #8]
 800e94e:	e7df      	b.n	800e910 <_vfiprintf_r+0x20>
 800e950:	4b79      	ldr	r3, [pc, #484]	; (800eb38 <_vfiprintf_r+0x248>)
 800e952:	429d      	cmp	r5, r3
 800e954:	bf08      	it	eq
 800e956:	68f5      	ldreq	r5, [r6, #12]
 800e958:	e7da      	b.n	800e910 <_vfiprintf_r+0x20>
 800e95a:	89ab      	ldrh	r3, [r5, #12]
 800e95c:	0598      	lsls	r0, r3, #22
 800e95e:	d4ed      	bmi.n	800e93c <_vfiprintf_r+0x4c>
 800e960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e962:	f7ff faa5 	bl	800deb0 <__retarget_lock_release_recursive>
 800e966:	e7e9      	b.n	800e93c <_vfiprintf_r+0x4c>
 800e968:	2300      	movs	r3, #0
 800e96a:	9309      	str	r3, [sp, #36]	; 0x24
 800e96c:	2320      	movs	r3, #32
 800e96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e972:	f8cd 800c 	str.w	r8, [sp, #12]
 800e976:	2330      	movs	r3, #48	; 0x30
 800e978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb3c <_vfiprintf_r+0x24c>
 800e97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e980:	f04f 0901 	mov.w	r9, #1
 800e984:	4623      	mov	r3, r4
 800e986:	469a      	mov	sl, r3
 800e988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e98c:	b10a      	cbz	r2, 800e992 <_vfiprintf_r+0xa2>
 800e98e:	2a25      	cmp	r2, #37	; 0x25
 800e990:	d1f9      	bne.n	800e986 <_vfiprintf_r+0x96>
 800e992:	ebba 0b04 	subs.w	fp, sl, r4
 800e996:	d00b      	beq.n	800e9b0 <_vfiprintf_r+0xc0>
 800e998:	465b      	mov	r3, fp
 800e99a:	4622      	mov	r2, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f7ff ff93 	bl	800e8ca <__sfputs_r>
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f000 80aa 	beq.w	800eafe <_vfiprintf_r+0x20e>
 800e9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9ac:	445a      	add	r2, fp
 800e9ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f000 80a2 	beq.w	800eafe <_vfiprintf_r+0x20e>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9c4:	f10a 0a01 	add.w	sl, sl, #1
 800e9c8:	9304      	str	r3, [sp, #16]
 800e9ca:	9307      	str	r3, [sp, #28]
 800e9cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e9d2:	4654      	mov	r4, sl
 800e9d4:	2205      	movs	r2, #5
 800e9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9da:	4858      	ldr	r0, [pc, #352]	; (800eb3c <_vfiprintf_r+0x24c>)
 800e9dc:	f7f1 fc08 	bl	80001f0 <memchr>
 800e9e0:	9a04      	ldr	r2, [sp, #16]
 800e9e2:	b9d8      	cbnz	r0, 800ea1c <_vfiprintf_r+0x12c>
 800e9e4:	06d1      	lsls	r1, r2, #27
 800e9e6:	bf44      	itt	mi
 800e9e8:	2320      	movmi	r3, #32
 800e9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9ee:	0713      	lsls	r3, r2, #28
 800e9f0:	bf44      	itt	mi
 800e9f2:	232b      	movmi	r3, #43	; 0x2b
 800e9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e9fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e9fe:	d015      	beq.n	800ea2c <_vfiprintf_r+0x13c>
 800ea00:	9a07      	ldr	r2, [sp, #28]
 800ea02:	4654      	mov	r4, sl
 800ea04:	2000      	movs	r0, #0
 800ea06:	f04f 0c0a 	mov.w	ip, #10
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea10:	3b30      	subs	r3, #48	; 0x30
 800ea12:	2b09      	cmp	r3, #9
 800ea14:	d94e      	bls.n	800eab4 <_vfiprintf_r+0x1c4>
 800ea16:	b1b0      	cbz	r0, 800ea46 <_vfiprintf_r+0x156>
 800ea18:	9207      	str	r2, [sp, #28]
 800ea1a:	e014      	b.n	800ea46 <_vfiprintf_r+0x156>
 800ea1c:	eba0 0308 	sub.w	r3, r0, r8
 800ea20:	fa09 f303 	lsl.w	r3, r9, r3
 800ea24:	4313      	orrs	r3, r2
 800ea26:	9304      	str	r3, [sp, #16]
 800ea28:	46a2      	mov	sl, r4
 800ea2a:	e7d2      	b.n	800e9d2 <_vfiprintf_r+0xe2>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	1d19      	adds	r1, r3, #4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	9103      	str	r1, [sp, #12]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	bfbb      	ittet	lt
 800ea38:	425b      	neglt	r3, r3
 800ea3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ea3e:	9307      	strge	r3, [sp, #28]
 800ea40:	9307      	strlt	r3, [sp, #28]
 800ea42:	bfb8      	it	lt
 800ea44:	9204      	strlt	r2, [sp, #16]
 800ea46:	7823      	ldrb	r3, [r4, #0]
 800ea48:	2b2e      	cmp	r3, #46	; 0x2e
 800ea4a:	d10c      	bne.n	800ea66 <_vfiprintf_r+0x176>
 800ea4c:	7863      	ldrb	r3, [r4, #1]
 800ea4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea50:	d135      	bne.n	800eabe <_vfiprintf_r+0x1ce>
 800ea52:	9b03      	ldr	r3, [sp, #12]
 800ea54:	1d1a      	adds	r2, r3, #4
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	9203      	str	r2, [sp, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	bfb8      	it	lt
 800ea5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea62:	3402      	adds	r4, #2
 800ea64:	9305      	str	r3, [sp, #20]
 800ea66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb4c <_vfiprintf_r+0x25c>
 800ea6a:	7821      	ldrb	r1, [r4, #0]
 800ea6c:	2203      	movs	r2, #3
 800ea6e:	4650      	mov	r0, sl
 800ea70:	f7f1 fbbe 	bl	80001f0 <memchr>
 800ea74:	b140      	cbz	r0, 800ea88 <_vfiprintf_r+0x198>
 800ea76:	2340      	movs	r3, #64	; 0x40
 800ea78:	eba0 000a 	sub.w	r0, r0, sl
 800ea7c:	fa03 f000 	lsl.w	r0, r3, r0
 800ea80:	9b04      	ldr	r3, [sp, #16]
 800ea82:	4303      	orrs	r3, r0
 800ea84:	3401      	adds	r4, #1
 800ea86:	9304      	str	r3, [sp, #16]
 800ea88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea8c:	482c      	ldr	r0, [pc, #176]	; (800eb40 <_vfiprintf_r+0x250>)
 800ea8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea92:	2206      	movs	r2, #6
 800ea94:	f7f1 fbac 	bl	80001f0 <memchr>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d03f      	beq.n	800eb1c <_vfiprintf_r+0x22c>
 800ea9c:	4b29      	ldr	r3, [pc, #164]	; (800eb44 <_vfiprintf_r+0x254>)
 800ea9e:	bb1b      	cbnz	r3, 800eae8 <_vfiprintf_r+0x1f8>
 800eaa0:	9b03      	ldr	r3, [sp, #12]
 800eaa2:	3307      	adds	r3, #7
 800eaa4:	f023 0307 	bic.w	r3, r3, #7
 800eaa8:	3308      	adds	r3, #8
 800eaaa:	9303      	str	r3, [sp, #12]
 800eaac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaae:	443b      	add	r3, r7
 800eab0:	9309      	str	r3, [sp, #36]	; 0x24
 800eab2:	e767      	b.n	800e984 <_vfiprintf_r+0x94>
 800eab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eab8:	460c      	mov	r4, r1
 800eaba:	2001      	movs	r0, #1
 800eabc:	e7a5      	b.n	800ea0a <_vfiprintf_r+0x11a>
 800eabe:	2300      	movs	r3, #0
 800eac0:	3401      	adds	r4, #1
 800eac2:	9305      	str	r3, [sp, #20]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f04f 0c0a 	mov.w	ip, #10
 800eaca:	4620      	mov	r0, r4
 800eacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead0:	3a30      	subs	r2, #48	; 0x30
 800ead2:	2a09      	cmp	r2, #9
 800ead4:	d903      	bls.n	800eade <_vfiprintf_r+0x1ee>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d0c5      	beq.n	800ea66 <_vfiprintf_r+0x176>
 800eada:	9105      	str	r1, [sp, #20]
 800eadc:	e7c3      	b.n	800ea66 <_vfiprintf_r+0x176>
 800eade:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae2:	4604      	mov	r4, r0
 800eae4:	2301      	movs	r3, #1
 800eae6:	e7f0      	b.n	800eaca <_vfiprintf_r+0x1da>
 800eae8:	ab03      	add	r3, sp, #12
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	462a      	mov	r2, r5
 800eaee:	4b16      	ldr	r3, [pc, #88]	; (800eb48 <_vfiprintf_r+0x258>)
 800eaf0:	a904      	add	r1, sp, #16
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f7fd fc8a 	bl	800c40c <_printf_float>
 800eaf8:	4607      	mov	r7, r0
 800eafa:	1c78      	adds	r0, r7, #1
 800eafc:	d1d6      	bne.n	800eaac <_vfiprintf_r+0x1bc>
 800eafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb00:	07d9      	lsls	r1, r3, #31
 800eb02:	d405      	bmi.n	800eb10 <_vfiprintf_r+0x220>
 800eb04:	89ab      	ldrh	r3, [r5, #12]
 800eb06:	059a      	lsls	r2, r3, #22
 800eb08:	d402      	bmi.n	800eb10 <_vfiprintf_r+0x220>
 800eb0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb0c:	f7ff f9d0 	bl	800deb0 <__retarget_lock_release_recursive>
 800eb10:	89ab      	ldrh	r3, [r5, #12]
 800eb12:	065b      	lsls	r3, r3, #25
 800eb14:	f53f af12 	bmi.w	800e93c <_vfiprintf_r+0x4c>
 800eb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb1a:	e711      	b.n	800e940 <_vfiprintf_r+0x50>
 800eb1c:	ab03      	add	r3, sp, #12
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	462a      	mov	r2, r5
 800eb22:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <_vfiprintf_r+0x258>)
 800eb24:	a904      	add	r1, sp, #16
 800eb26:	4630      	mov	r0, r6
 800eb28:	f7fd ff14 	bl	800c954 <_printf_i>
 800eb2c:	e7e4      	b.n	800eaf8 <_vfiprintf_r+0x208>
 800eb2e:	bf00      	nop
 800eb30:	0800f09c 	.word	0x0800f09c
 800eb34:	0800f0bc 	.word	0x0800f0bc
 800eb38:	0800f07c 	.word	0x0800f07c
 800eb3c:	0800f234 	.word	0x0800f234
 800eb40:	0800f23e 	.word	0x0800f23e
 800eb44:	0800c40d 	.word	0x0800c40d
 800eb48:	0800e8cb 	.word	0x0800e8cb
 800eb4c:	0800f23a 	.word	0x0800f23a

0800eb50 <_sbrk_r>:
 800eb50:	b538      	push	{r3, r4, r5, lr}
 800eb52:	4d06      	ldr	r5, [pc, #24]	; (800eb6c <_sbrk_r+0x1c>)
 800eb54:	2300      	movs	r3, #0
 800eb56:	4604      	mov	r4, r0
 800eb58:	4608      	mov	r0, r1
 800eb5a:	602b      	str	r3, [r5, #0]
 800eb5c:	f7f4 fb58 	bl	8003210 <_sbrk>
 800eb60:	1c43      	adds	r3, r0, #1
 800eb62:	d102      	bne.n	800eb6a <_sbrk_r+0x1a>
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	b103      	cbz	r3, 800eb6a <_sbrk_r+0x1a>
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	20005020 	.word	0x20005020

0800eb70 <__sread>:
 800eb70:	b510      	push	{r4, lr}
 800eb72:	460c      	mov	r4, r1
 800eb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb78:	f000 f8e2 	bl	800ed40 <_read_r>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	bfab      	itete	ge
 800eb80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb82:	89a3      	ldrhlt	r3, [r4, #12]
 800eb84:	181b      	addge	r3, r3, r0
 800eb86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb8a:	bfac      	ite	ge
 800eb8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb8e:	81a3      	strhlt	r3, [r4, #12]
 800eb90:	bd10      	pop	{r4, pc}

0800eb92 <__swrite>:
 800eb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb96:	461f      	mov	r7, r3
 800eb98:	898b      	ldrh	r3, [r1, #12]
 800eb9a:	05db      	lsls	r3, r3, #23
 800eb9c:	4605      	mov	r5, r0
 800eb9e:	460c      	mov	r4, r1
 800eba0:	4616      	mov	r6, r2
 800eba2:	d505      	bpl.n	800ebb0 <__swrite+0x1e>
 800eba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba8:	2302      	movs	r3, #2
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f000 f898 	bl	800ece0 <_lseek_r>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	463b      	mov	r3, r7
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc6:	f000 b817 	b.w	800ebf8 <_write_r>

0800ebca <__sseek>:
 800ebca:	b510      	push	{r4, lr}
 800ebcc:	460c      	mov	r4, r1
 800ebce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd2:	f000 f885 	bl	800ece0 <_lseek_r>
 800ebd6:	1c43      	adds	r3, r0, #1
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	bf15      	itete	ne
 800ebdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebe6:	81a3      	strheq	r3, [r4, #12]
 800ebe8:	bf18      	it	ne
 800ebea:	81a3      	strhne	r3, [r4, #12]
 800ebec:	bd10      	pop	{r4, pc}

0800ebee <__sclose>:
 800ebee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf2:	f000 b831 	b.w	800ec58 <_close_r>
	...

0800ebf8 <_write_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4d07      	ldr	r5, [pc, #28]	; (800ec18 <_write_r+0x20>)
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	4608      	mov	r0, r1
 800ec00:	4611      	mov	r1, r2
 800ec02:	2200      	movs	r2, #0
 800ec04:	602a      	str	r2, [r5, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	f7f2 fefe 	bl	8001a08 <_write>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_write_r+0x1e>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_write_r+0x1e>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	20005020 	.word	0x20005020

0800ec1c <__assert_func>:
 800ec1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec1e:	4614      	mov	r4, r2
 800ec20:	461a      	mov	r2, r3
 800ec22:	4b09      	ldr	r3, [pc, #36]	; (800ec48 <__assert_func+0x2c>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4605      	mov	r5, r0
 800ec28:	68d8      	ldr	r0, [r3, #12]
 800ec2a:	b14c      	cbz	r4, 800ec40 <__assert_func+0x24>
 800ec2c:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <__assert_func+0x30>)
 800ec2e:	9100      	str	r1, [sp, #0]
 800ec30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec34:	4906      	ldr	r1, [pc, #24]	; (800ec50 <__assert_func+0x34>)
 800ec36:	462b      	mov	r3, r5
 800ec38:	f000 f81e 	bl	800ec78 <fiprintf>
 800ec3c:	f000 f89f 	bl	800ed7e <abort>
 800ec40:	4b04      	ldr	r3, [pc, #16]	; (800ec54 <__assert_func+0x38>)
 800ec42:	461c      	mov	r4, r3
 800ec44:	e7f3      	b.n	800ec2e <__assert_func+0x12>
 800ec46:	bf00      	nop
 800ec48:	20000140 	.word	0x20000140
 800ec4c:	0800f245 	.word	0x0800f245
 800ec50:	0800f252 	.word	0x0800f252
 800ec54:	0800f280 	.word	0x0800f280

0800ec58 <_close_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d06      	ldr	r5, [pc, #24]	; (800ec74 <_close_r+0x1c>)
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4608      	mov	r0, r1
 800ec62:	602b      	str	r3, [r5, #0]
 800ec64:	f7f4 fa9f 	bl	80031a6 <_close>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_close_r+0x1a>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_close_r+0x1a>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	20005020 	.word	0x20005020

0800ec78 <fiprintf>:
 800ec78:	b40e      	push	{r1, r2, r3}
 800ec7a:	b503      	push	{r0, r1, lr}
 800ec7c:	4601      	mov	r1, r0
 800ec7e:	ab03      	add	r3, sp, #12
 800ec80:	4805      	ldr	r0, [pc, #20]	; (800ec98 <fiprintf+0x20>)
 800ec82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec86:	6800      	ldr	r0, [r0, #0]
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	f7ff fe31 	bl	800e8f0 <_vfiprintf_r>
 800ec8e:	b002      	add	sp, #8
 800ec90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec94:	b003      	add	sp, #12
 800ec96:	4770      	bx	lr
 800ec98:	20000140 	.word	0x20000140

0800ec9c <_fstat_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	4d07      	ldr	r5, [pc, #28]	; (800ecbc <_fstat_r+0x20>)
 800eca0:	2300      	movs	r3, #0
 800eca2:	4604      	mov	r4, r0
 800eca4:	4608      	mov	r0, r1
 800eca6:	4611      	mov	r1, r2
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	f7f4 fa88 	bl	80031be <_fstat>
 800ecae:	1c43      	adds	r3, r0, #1
 800ecb0:	d102      	bne.n	800ecb8 <_fstat_r+0x1c>
 800ecb2:	682b      	ldr	r3, [r5, #0]
 800ecb4:	b103      	cbz	r3, 800ecb8 <_fstat_r+0x1c>
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	bd38      	pop	{r3, r4, r5, pc}
 800ecba:	bf00      	nop
 800ecbc:	20005020 	.word	0x20005020

0800ecc0 <_isatty_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4d06      	ldr	r5, [pc, #24]	; (800ecdc <_isatty_r+0x1c>)
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	4608      	mov	r0, r1
 800ecca:	602b      	str	r3, [r5, #0]
 800eccc:	f7f4 fa87 	bl	80031de <_isatty>
 800ecd0:	1c43      	adds	r3, r0, #1
 800ecd2:	d102      	bne.n	800ecda <_isatty_r+0x1a>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	b103      	cbz	r3, 800ecda <_isatty_r+0x1a>
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	bd38      	pop	{r3, r4, r5, pc}
 800ecdc:	20005020 	.word	0x20005020

0800ece0 <_lseek_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d07      	ldr	r5, [pc, #28]	; (800ed00 <_lseek_r+0x20>)
 800ece4:	4604      	mov	r4, r0
 800ece6:	4608      	mov	r0, r1
 800ece8:	4611      	mov	r1, r2
 800ecea:	2200      	movs	r2, #0
 800ecec:	602a      	str	r2, [r5, #0]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	f7f4 fa80 	bl	80031f4 <_lseek>
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d102      	bne.n	800ecfe <_lseek_r+0x1e>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	b103      	cbz	r3, 800ecfe <_lseek_r+0x1e>
 800ecfc:	6023      	str	r3, [r4, #0]
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}
 800ed00:	20005020 	.word	0x20005020

0800ed04 <__ascii_mbtowc>:
 800ed04:	b082      	sub	sp, #8
 800ed06:	b901      	cbnz	r1, 800ed0a <__ascii_mbtowc+0x6>
 800ed08:	a901      	add	r1, sp, #4
 800ed0a:	b142      	cbz	r2, 800ed1e <__ascii_mbtowc+0x1a>
 800ed0c:	b14b      	cbz	r3, 800ed22 <__ascii_mbtowc+0x1e>
 800ed0e:	7813      	ldrb	r3, [r2, #0]
 800ed10:	600b      	str	r3, [r1, #0]
 800ed12:	7812      	ldrb	r2, [r2, #0]
 800ed14:	1e10      	subs	r0, r2, #0
 800ed16:	bf18      	it	ne
 800ed18:	2001      	movne	r0, #1
 800ed1a:	b002      	add	sp, #8
 800ed1c:	4770      	bx	lr
 800ed1e:	4610      	mov	r0, r2
 800ed20:	e7fb      	b.n	800ed1a <__ascii_mbtowc+0x16>
 800ed22:	f06f 0001 	mvn.w	r0, #1
 800ed26:	e7f8      	b.n	800ed1a <__ascii_mbtowc+0x16>

0800ed28 <__malloc_lock>:
 800ed28:	4801      	ldr	r0, [pc, #4]	; (800ed30 <__malloc_lock+0x8>)
 800ed2a:	f7ff b8c0 	b.w	800deae <__retarget_lock_acquire_recursive>
 800ed2e:	bf00      	nop
 800ed30:	20005014 	.word	0x20005014

0800ed34 <__malloc_unlock>:
 800ed34:	4801      	ldr	r0, [pc, #4]	; (800ed3c <__malloc_unlock+0x8>)
 800ed36:	f7ff b8bb 	b.w	800deb0 <__retarget_lock_release_recursive>
 800ed3a:	bf00      	nop
 800ed3c:	20005014 	.word	0x20005014

0800ed40 <_read_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d07      	ldr	r5, [pc, #28]	; (800ed60 <_read_r+0x20>)
 800ed44:	4604      	mov	r4, r0
 800ed46:	4608      	mov	r0, r1
 800ed48:	4611      	mov	r1, r2
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	602a      	str	r2, [r5, #0]
 800ed4e:	461a      	mov	r2, r3
 800ed50:	f7f4 fa0c 	bl	800316c <_read>
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d102      	bne.n	800ed5e <_read_r+0x1e>
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	b103      	cbz	r3, 800ed5e <_read_r+0x1e>
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	bd38      	pop	{r3, r4, r5, pc}
 800ed60:	20005020 	.word	0x20005020

0800ed64 <__ascii_wctomb>:
 800ed64:	b149      	cbz	r1, 800ed7a <__ascii_wctomb+0x16>
 800ed66:	2aff      	cmp	r2, #255	; 0xff
 800ed68:	bf85      	ittet	hi
 800ed6a:	238a      	movhi	r3, #138	; 0x8a
 800ed6c:	6003      	strhi	r3, [r0, #0]
 800ed6e:	700a      	strbls	r2, [r1, #0]
 800ed70:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed74:	bf98      	it	ls
 800ed76:	2001      	movls	r0, #1
 800ed78:	4770      	bx	lr
 800ed7a:	4608      	mov	r0, r1
 800ed7c:	4770      	bx	lr

0800ed7e <abort>:
 800ed7e:	b508      	push	{r3, lr}
 800ed80:	2006      	movs	r0, #6
 800ed82:	f000 f82b 	bl	800eddc <raise>
 800ed86:	2001      	movs	r0, #1
 800ed88:	f7f4 f9e6 	bl	8003158 <_exit>

0800ed8c <_raise_r>:
 800ed8c:	291f      	cmp	r1, #31
 800ed8e:	b538      	push	{r3, r4, r5, lr}
 800ed90:	4604      	mov	r4, r0
 800ed92:	460d      	mov	r5, r1
 800ed94:	d904      	bls.n	800eda0 <_raise_r+0x14>
 800ed96:	2316      	movs	r3, #22
 800ed98:	6003      	str	r3, [r0, #0]
 800ed9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eda2:	b112      	cbz	r2, 800edaa <_raise_r+0x1e>
 800eda4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eda8:	b94b      	cbnz	r3, 800edbe <_raise_r+0x32>
 800edaa:	4620      	mov	r0, r4
 800edac:	f000 f830 	bl	800ee10 <_getpid_r>
 800edb0:	462a      	mov	r2, r5
 800edb2:	4601      	mov	r1, r0
 800edb4:	4620      	mov	r0, r4
 800edb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edba:	f000 b817 	b.w	800edec <_kill_r>
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d00a      	beq.n	800edd8 <_raise_r+0x4c>
 800edc2:	1c59      	adds	r1, r3, #1
 800edc4:	d103      	bne.n	800edce <_raise_r+0x42>
 800edc6:	2316      	movs	r3, #22
 800edc8:	6003      	str	r3, [r0, #0]
 800edca:	2001      	movs	r0, #1
 800edcc:	e7e7      	b.n	800ed9e <_raise_r+0x12>
 800edce:	2400      	movs	r4, #0
 800edd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edd4:	4628      	mov	r0, r5
 800edd6:	4798      	blx	r3
 800edd8:	2000      	movs	r0, #0
 800edda:	e7e0      	b.n	800ed9e <_raise_r+0x12>

0800eddc <raise>:
 800eddc:	4b02      	ldr	r3, [pc, #8]	; (800ede8 <raise+0xc>)
 800edde:	4601      	mov	r1, r0
 800ede0:	6818      	ldr	r0, [r3, #0]
 800ede2:	f7ff bfd3 	b.w	800ed8c <_raise_r>
 800ede6:	bf00      	nop
 800ede8:	20000140 	.word	0x20000140

0800edec <_kill_r>:
 800edec:	b538      	push	{r3, r4, r5, lr}
 800edee:	4d07      	ldr	r5, [pc, #28]	; (800ee0c <_kill_r+0x20>)
 800edf0:	2300      	movs	r3, #0
 800edf2:	4604      	mov	r4, r0
 800edf4:	4608      	mov	r0, r1
 800edf6:	4611      	mov	r1, r2
 800edf8:	602b      	str	r3, [r5, #0]
 800edfa:	f7f4 f99d 	bl	8003138 <_kill>
 800edfe:	1c43      	adds	r3, r0, #1
 800ee00:	d102      	bne.n	800ee08 <_kill_r+0x1c>
 800ee02:	682b      	ldr	r3, [r5, #0]
 800ee04:	b103      	cbz	r3, 800ee08 <_kill_r+0x1c>
 800ee06:	6023      	str	r3, [r4, #0]
 800ee08:	bd38      	pop	{r3, r4, r5, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20005020 	.word	0x20005020

0800ee10 <_getpid_r>:
 800ee10:	f7f4 b98a 	b.w	8003128 <_getpid>

0800ee14 <_init>:
 800ee14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee16:	bf00      	nop
 800ee18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee1a:	bc08      	pop	{r3}
 800ee1c:	469e      	mov	lr, r3
 800ee1e:	4770      	bx	lr

0800ee20 <_fini>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	bf00      	nop
 800ee24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee26:	bc08      	pop	{r3}
 800ee28:	469e      	mov	lr, r3
 800ee2a:	4770      	bx	lr
